<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>flink文档学习8</title>
    <link href="/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A08/"/>
    <url>/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A08/</url>
    
    <content type="html"><![CDATA[<h1 id="flink-sql"><a href="#flink-sql" class="headerlink" title="flink sql"></a>flink sql</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">SQL</span><br><span class="hljs-comment">数据类型</span><br><span class="hljs-comment">保留关键字</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 查询后，指定一个 TableSink，输出到外部文件系统</span><br><span class="hljs-comment">// SQL 查询一个已经注册的表</span><br><span class="hljs-comment">// 根据视图 &quot;Orders&quot; 创建一个 DataStream</span><br><span class="hljs-comment">tableEnv.createTemporaryView(&quot;Orders&quot;, ds, $(&quot;user&quot;), $(&quot;product&quot;), $(&quot;amount&quot;));</span><br><span class="hljs-comment">// 在表上执行 SQL 查询并得到以新表返回的结果</span><br><span class="hljs-comment">Table result2 = tableEnv.sqlQuery(</span><br><span class="hljs-comment">  &quot;SELECT product, amount FROM Orders WHERE product LIKE &#x27;%Rubber%&#x27;&quot;);</span><br><span class="hljs-comment">// 创建并注册一个 TableSink</span><br><span class="hljs-comment">final Schema schema = new Schema()</span><br><span class="hljs-comment">    .field(&quot;product&quot;, DataTypes.STRING())</span><br><span class="hljs-comment">    .field(&quot;amount&quot;, DataTypes.INT());</span><br><span class="hljs-comment">tableEnv.connect(new FileSystem().path(&quot;/path/to/file&quot;))</span><br><span class="hljs-comment">    .withFormat(...)</span><br><span class="hljs-comment">    .withSchema(schema)</span><br><span class="hljs-comment">    .createTemporaryTable(&quot;RubberOrders&quot;);</span><br><span class="hljs-comment">// 在表上执行插入语句并把结果发出到 TableSink</span><br><span class="hljs-comment">tableEnv.executeSql(</span><br><span class="hljs-comment">  &quot;INSERT INTO RubberOrders SELECT product, amount FROM Orders WHERE product LIKE &#x27;%Rubber%&#x27;&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 执行 SQL</span><br><span class="hljs-comment">tableEnv.executeSql(&quot;CREATE TABLE Orders (`user` BIGINT, product STRING, amount INT) WITH (...)&quot;);</span><br><span class="hljs-comment">// 执行 SELECT</span><br><span class="hljs-comment">TableResult tableResult1 = tableEnv.executeSql(&quot;SELECT * FROM Orders&quot;);</span><br><span class="hljs-comment">// 返回结果迭代</span><br><span class="hljs-comment">try (CloseableIterator&lt;Row&gt; it = tableResult1.collect()) &#123;</span><br><span class="hljs-comment">    while(it.hasNext()) &#123;</span><br><span class="hljs-comment">        Row row = it.next();</span><br><span class="hljs-comment">        // handle row</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">// 返回结果也可以直接打印</span><br><span class="hljs-comment">TableResult tableResult2 = tableEnv.sqlQuery(&quot;SELECT * FROM Orders&quot;).execute();</span><br><span class="hljs-comment">tableResult2.print();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 查询 ---------- 基本的 SQL 语句</span><br><span class="hljs-comment">// 查询</span><br><span class="hljs-comment">SELECT * FROM Orders</span><br><span class="hljs-comment">SELECT a, c AS d FROM Orders</span><br><span class="hljs-comment">SELECT * FROM Orders WHERE b = &#x27;red&#x27;</span><br><span class="hljs-comment">SELECT * FROM Orders WHERE a % 2 = 0</span><br><span class="hljs-comment">// 自定义函数</span><br><span class="hljs-comment">SELECT PRETTY_PRINT(user) FROM Orders</span><br><span class="hljs-comment">// 聚合</span><br><span class="hljs-comment">SELECT a, SUM(b) as d</span><br><span class="hljs-comment">FROM Orders</span><br><span class="hljs-comment">GROUP BY a</span><br><span class="hljs-comment">// 窗口</span><br><span class="hljs-comment">SELECT user, SUM(amount)</span><br><span class="hljs-comment">FROM Orders</span><br><span class="hljs-comment">GROUP BY TUMBLE(rowtime, INTERVAL &#x27;1&#x27; DAY), user</span><br><span class="hljs-comment">// OVER</span><br><span class="hljs-comment">SELECT COUNT(amount) OVER (</span><br><span class="hljs-comment">  PARTITION BY user</span><br><span class="hljs-comment">  ORDER BY proctime</span><br><span class="hljs-comment">  ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)</span><br><span class="hljs-comment">FROM Orders</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">SELECT COUNT(amount) OVER w, SUM(amount) OVER w</span><br><span class="hljs-comment">FROM Orders</span><br><span class="hljs-comment">WINDOW w AS (</span><br><span class="hljs-comment">  PARTITION BY user</span><br><span class="hljs-comment">  ORDER BY proctime</span><br><span class="hljs-comment">  ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 去重</span><br><span class="hljs-comment">SELECT DISTINCT users FROM Orders</span><br><span class="hljs-comment">// 分组</span><br><span class="hljs-comment">SELECT SUM(amount)</span><br><span class="hljs-comment">FROM Orders</span><br><span class="hljs-comment">GROUP BY GROUPING SETS ((user), (product))</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">SELECT SUM(amount)</span><br><span class="hljs-comment">FROM Orders</span><br><span class="hljs-comment">GROUP BY users</span><br><span class="hljs-comment">HAVING SUM(amount) &gt; 50</span><br><span class="hljs-comment">// 自定义聚合函数</span><br><span class="hljs-comment">SELECT MyAggregate(amount)</span><br><span class="hljs-comment">FROM Orders</span><br><span class="hljs-comment">GROUP BY users</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// join</span><br><span class="hljs-comment">SELECT *</span><br><span class="hljs-comment">FROM Orders INNER JOIN Product ON Orders.productId = Product.id</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">SELECT *</span><br><span class="hljs-comment">FROM Orders LEFT JOIN Product ON Orders.productId = Product.id</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">SELECT *</span><br><span class="hljs-comment">FROM Orders RIGHT JOIN Product ON Orders.productId = Product.id</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">SELECT *</span><br><span class="hljs-comment">FROM Orders FULL OUTER JOIN Product ON Orders.productId = Product.id</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 时区关联 join</span><br><span class="hljs-comment">SELECT *</span><br><span class="hljs-comment">FROM Orders o, Shipments s</span><br><span class="hljs-comment">WHERE o.id = s.orderId AND</span><br><span class="hljs-comment">      o.ordertime BETWEEN s.shiptime - INTERVAL &#x27;4&#x27; HOUR AND s.shiptime</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">SELECT users, tag</span><br><span class="hljs-comment">FROM Orders CROSS JOIN UNNEST(tags) AS t (tag)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// join 表函数</span><br><span class="hljs-comment">SELECT users, tag</span><br><span class="hljs-comment">FROM Orders, LATERAL TABLE(unnest_udtf(tags)) AS t(tag)</span><br><span class="hljs-comment">-- 从1.11开始，也可以使用下面的方式：</span><br><span class="hljs-comment">SELECT users, tag</span><br><span class="hljs-comment">FROM Orders, LATERAL TABLE(unnest_udtf(tags)) AS t(tag)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">SELECT users, tag</span><br><span class="hljs-comment">FROM Orders LEFT JOIN LATERAL TABLE(unnest_udtf(tags)) AS t(tag) ON TRUE</span><br><span class="hljs-comment">-- 从1.11开始，也可以使用下面的方式：</span><br><span class="hljs-comment">SELECT users, tag</span><br><span class="hljs-comment">FROM Orders LEFT JOIN LATERAL TABLE(unnest_udtf(tags)) AS t(tag) ON TRUE</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// join 临时表</span><br><span class="hljs-comment">SELECT</span><br><span class="hljs-comment">  o.amount, o.currency, r.rate, o.amount * r.rate</span><br><span class="hljs-comment">FROM</span><br><span class="hljs-comment">  Orders AS o</span><br><span class="hljs-comment">  JOIN LatestRates FOR SYSTEM_TIME AS OF o.proctime AS r</span><br><span class="hljs-comment">  ON r.currency = o.currency</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">SELECT</span><br><span class="hljs-comment">  o_amount, r_rate</span><br><span class="hljs-comment">FROM</span><br><span class="hljs-comment">  Orders,</span><br><span class="hljs-comment">  LATERAL TABLE (Rates(o_proctime))</span><br><span class="hljs-comment">WHERE</span><br><span class="hljs-comment">  r_currency = o_currency</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 集合操作</span><br><span class="hljs-comment">// union</span><br><span class="hljs-comment">SELECT *</span><br><span class="hljs-comment">FROM (</span><br><span class="hljs-comment">    (SELECT user FROM Orders WHERE a % 2 = 0)</span><br><span class="hljs-comment">  UNION</span><br><span class="hljs-comment">    (SELECT user FROM Orders WHERE b = 0)</span><br><span class="hljs-comment">)</span><br><span class="hljs-comment">// UnionAll</span><br><span class="hljs-comment">SELECT *</span><br><span class="hljs-comment">FROM (</span><br><span class="hljs-comment">    (SELECT user FROM Orders WHERE a % 2 = 0)</span><br><span class="hljs-comment">  UNION ALL</span><br><span class="hljs-comment">    (SELECT user FROM Orders WHERE b = 0)</span><br><span class="hljs-comment">)</span><br><span class="hljs-comment">// Intersect / Except</span><br><span class="hljs-comment">SELECT *</span><br><span class="hljs-comment">FROM (</span><br><span class="hljs-comment">    (SELECT user FROM Orders WHERE a % 2 = 0)</span><br><span class="hljs-comment">  INTERSECT</span><br><span class="hljs-comment">    (SELECT user FROM Orders WHERE b = 0)</span><br><span class="hljs-comment">)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">SELECT *</span><br><span class="hljs-comment">FROM (</span><br><span class="hljs-comment">    (SELECT user FROM Orders WHERE a % 2 = 0)</span><br><span class="hljs-comment">  EXCEPT</span><br><span class="hljs-comment">    (SELECT user FROM Orders WHERE b = 0)</span><br><span class="hljs-comment">)</span><br><span class="hljs-comment">// in</span><br><span class="hljs-comment">SELECT user, amount</span><br><span class="hljs-comment">FROM Orders</span><br><span class="hljs-comment">WHERE product IN (</span><br><span class="hljs-comment">    SELECT product FROM NewProducts</span><br><span class="hljs-comment">)</span><br><span class="hljs-comment">// Exists</span><br><span class="hljs-comment">SELECT user, amount</span><br><span class="hljs-comment">FROM Orders</span><br><span class="hljs-comment">WHERE product EXISTS (</span><br><span class="hljs-comment">    SELECT product FROM NewProducts</span><br><span class="hljs-comment">)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// OrderBy &amp; Limit</span><br><span class="hljs-comment">SELECT *</span><br><span class="hljs-comment">FROM Orders</span><br><span class="hljs-comment">ORDER BY orderTime</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">SELECT *</span><br><span class="hljs-comment">FROM Orders</span><br><span class="hljs-comment">ORDER BY orderTime</span><br><span class="hljs-comment">LIMIT 3</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//  Blink 计划器支持 Top-N</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 其它增删改查语句参考文档</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-type">StreamTableEnvironment</span> <span class="hljs-variable">tableEnv</span> <span class="hljs-operator">=</span> StreamTableEnvironment.create(env);<br>        DataStream&lt;WebSite&gt; dataStream = env<br>                .readTextFile(<span class="hljs-string">&quot;stream.txt&quot;</span>)<br>                .map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapFunction</span>&lt;String, WebSite&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> WebSite <span class="hljs-title function_">map</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-keyword">return</span> JSON.parseObject(s, WebSite.class);<br>                    &#125;<br>                &#125;)<br>                .assignTimestampsAndWatermarks(<br>                        WatermarkStrategy.&lt;WebSite&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="hljs-number">10</span>))<br>                                .withTimestampAssigner((record, ts) -&gt; &#123;<br>                                    <span class="hljs-keyword">return</span> record.getEventTime();<br>                                &#125;).withIdleness(Duration.ofMinutes(<span class="hljs-number">5</span>)) <span class="hljs-comment">// 空闲时间</span><br>                );<br>        <span class="hljs-comment">// 流转表，表名，字段映射，字段类型如何知道？</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> tableEnv.fromDataStream(dataStream);<br>        <span class="hljs-comment">// 执行查询</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> tableEnv.sqlQuery(<br>                <span class="hljs-string">&quot;select method,count(*) from website group by method&quot;</span><br>        );<br>        env.execute();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">函数</span><br><span class="hljs-comment">内置函数见文档</span><br><span class="hljs-comment">自定义函数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">函数分类：</span><br><span class="hljs-comment">标量函数 将标量值转换成一个新标量值；</span><br><span class="hljs-comment">表值函数 将标量值转换成新的行数据；</span><br><span class="hljs-comment">聚合函数 将多行数据里的标量值转换成一个新标量值；</span><br><span class="hljs-comment">表值聚合函数 将多行数据里的标量值转换成新的行数据；</span><br><span class="hljs-comment">异步表值函数 是异步查询外部数据系统的特殊函数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableTest6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        TableEnvironment env = TableEnvironment.create(...);</span><br><span class="hljs-comment">        // 在 Table API 里不经注册直接“内联”调用函数</span><br><span class="hljs-comment">        env.from(&quot;MyTable&quot;).select(call(SubstringFunction.class, $(&quot;myField&quot;), 5, 12));</span><br><span class="hljs-comment">        // 注册函数</span><br><span class="hljs-comment">        env.createTemporarySystemFunction(&quot;SubstringFunction&quot;, SubstringFunction.class);</span><br><span class="hljs-comment">        // 在 Table API 里调用注册好的函数</span><br><span class="hljs-comment">        env.from(&quot;MyTable&quot;).select(call(&quot;SubstringFunction&quot;, $(&quot;myField&quot;), 5, 12));</span><br><span class="hljs-comment">        // 在 SQL 里调用注册好的函数</span><br><span class="hljs-comment">        env.sqlQuery(&quot;SELECT SubstringFunction(myField, 5, 12) FROM MyTable&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        TableEnvironment env = TableEnvironment.create(...);</span><br><span class="hljs-comment">        // 在 Table API 里不经注册直接“内联”调用函数</span><br><span class="hljs-comment">        env.from(&quot;MyTable&quot;).select(call(new SubstringFunction2(true), $(&quot;myField&quot;), 5, 12));</span><br><span class="hljs-comment">        // 注册函数</span><br><span class="hljs-comment">        env.createTemporarySystemFunction(&quot;SubstringFunction2&quot;, new SubstringFunction2(true));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 逻辑函数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubstringFunction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ScalarFunction</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">eval</span><span class="hljs-params">(String s, Integer begin, Integer end)</span> &#123;<br>        <span class="hljs-keyword">return</span> s.substring(begin, end);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 可参数化函数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubstringFunction2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ScalarFunction</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> endInclusive;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SubstringFunction2</span><span class="hljs-params">(<span class="hljs-type">boolean</span> endInclusive)</span> &#123;<br>        <span class="hljs-built_in">this</span>.endInclusive = endInclusive;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">eval</span><span class="hljs-params">(String s, Integer begin, Integer end)</span> &#123;<br>        <span class="hljs-keyword">return</span> s.substring(begin, endInclusive ? end + <span class="hljs-number">1</span> : end);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实时计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink文档学习7</title>
    <link href="/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A07/"/>
    <url>/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A07/</url>
    
    <content type="html"><![CDATA[<h1 id="Table-API"><a href="#Table-API" class="headerlink" title="Table API"></a>Table API</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Table API</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 基本 table api 示例</span><br>        <span class="hljs-comment">// 准备环境</span><br>        <span class="hljs-type">ExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> ExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-type">BatchTableEnvironment</span> <span class="hljs-variable">tEnv</span> <span class="hljs-operator">=</span> BatchTableEnvironment.create(env);<br>        <span class="hljs-comment">// 注册表</span><br>        <span class="hljs-comment">// specify table program</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> tEnv.from(<span class="hljs-string">&quot;Orders&quot;</span>); <span class="hljs-comment">// schema (a, b, c, rowtime)</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">counts</span> <span class="hljs-operator">=</span> orders<br>                .groupBy($(<span class="hljs-string">&quot;a&quot;</span>))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>).count().as(<span class="hljs-string">&quot;cnt&quot;</span>));<br>        <span class="hljs-comment">// 转化 to DataSet</span><br>        DataSet&lt;Row&gt; result = tEnv.toDataSet(counts, Row.class);<br>        result.print();<br>        <span class="hljs-comment">// 复杂点的示例</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">orders2</span> <span class="hljs-operator">=</span> tEnv.from(<span class="hljs-string">&quot;Orders&quot;</span>); <span class="hljs-comment">// schema (a, b, c, rowtime)</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        就是查询的语句，window，select，groupBy 配上 $ 符号</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> orders2<br>                .filter(<br>                        and(<br>                                $(<span class="hljs-string">&quot;a&quot;</span>).isNotNull(),<br>                                $(<span class="hljs-string">&quot;b&quot;</span>).isNotNull(),<br>                                $(<span class="hljs-string">&quot;c&quot;</span>).isNotNull()<br>                        ))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>).lowerCase().as(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>), $(<span class="hljs-string">&quot;rowtime&quot;</span>))<br>                .window(Tumble.over(lit(<span class="hljs-number">1</span>).hours()).on($(<span class="hljs-string">&quot;rowtime&quot;</span>)).as(<span class="hljs-string">&quot;hourlyWindow&quot;</span>))<br>                .groupBy($(<span class="hljs-string">&quot;hourlyWindow&quot;</span>), $(<span class="hljs-string">&quot;a&quot;</span>))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;hourlyWindow&quot;</span>).end().as(<span class="hljs-string">&quot;hour&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>).avg().as(<span class="hljs-string">&quot;avgBillingAmount&quot;</span>));<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        详细用例</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 从已注册的表中获取</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">orders1</span> <span class="hljs-operator">=</span> tEnv.from(<span class="hljs-string">&quot;Orders&quot;</span>);<br>        <span class="hljs-comment">// 从元素获取</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> tEnv.fromValues(<br>                row(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;ABC&quot;</span>),<br>                row(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;ABCDE&quot;</span>)<br>        );<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        root</span><br><span class="hljs-comment">        |-- f0: BIGINT NOT NULL     // 字段名 f0，类型也会自己搞个默认值</span><br><span class="hljs-comment">        |-- f1: VARCHAR(5) NOT NULL // 字段名 f1</span><br><span class="hljs-comment">        或者可以指定字段名和类型</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table2</span> <span class="hljs-operator">=</span> tEnv.fromValues(<br>                DataTypes.ROW(<br>                        DataTypes.FIELD(<span class="hljs-string">&quot;id&quot;</span>, DataTypes.DECIMAL(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)),<br>                        DataTypes.FIELD(<span class="hljs-string">&quot;name&quot;</span>, DataTypes.STRING())<br>                ),<br>                row(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;ABC&quot;</span>),<br>                row(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;ABCDE&quot;</span>)<br>        );<br>        <span class="hljs-comment">// 查询</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">orders3</span> <span class="hljs-operator">=</span> tEnv.from(<span class="hljs-string">&quot;Orders&quot;</span>);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> orders.select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;c&quot;</span>).as(<span class="hljs-string">&quot;d&quot;</span>));<br>        <span class="hljs-comment">// 通配符</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> orders.select($(<span class="hljs-string">&quot;*&quot;</span>));<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">orders5</span> <span class="hljs-operator">=</span> tEnv.from(<span class="hljs-string">&quot;Orders&quot;</span>);<br>        <span class="hljs-comment">// 重命名</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> orders.as(<span class="hljs-string">&quot;x, y, z, t&quot;</span>);<br>        <span class="hljs-comment">// 筛选</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result6</span> <span class="hljs-operator">=</span> orders.where($(<span class="hljs-string">&quot;b&quot;</span>).isEqual(<span class="hljs-string">&quot;red&quot;</span>));<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result7</span> <span class="hljs-operator">=</span> orders.filter($(<span class="hljs-string">&quot;a&quot;</span>).mod(<span class="hljs-number">2</span>).isEqual(<span class="hljs-number">0</span>));<br>        <span class="hljs-comment">// --- 列操作</span><br>        <span class="hljs-comment">// 添加列</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result8</span> <span class="hljs-operator">=</span> orders.addColumns(concat($(<span class="hljs-string">&quot;c&quot;</span>), <span class="hljs-string">&quot;sunny&quot;</span>));<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result9</span> <span class="hljs-operator">=</span> orders.addOrReplaceColumns(concat($(<span class="hljs-string">&quot;c&quot;</span>), <span class="hljs-string">&quot;sunny&quot;</span>).as(<span class="hljs-string">&quot;desc&quot;</span>));<br>        <span class="hljs-comment">// 删除列</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result10</span> <span class="hljs-operator">=</span> orders.dropColumns($(<span class="hljs-string">&quot;b&quot;</span>), $(<span class="hljs-string">&quot;c&quot;</span>));<br>        <span class="hljs-comment">// 重命名列</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result11</span> <span class="hljs-operator">=</span> orders.renameColumns($(<span class="hljs-string">&quot;b&quot;</span>).as(<span class="hljs-string">&quot;b2&quot;</span>), $(<span class="hljs-string">&quot;c&quot;</span>).as(<span class="hljs-string">&quot;c2&quot;</span>));<br>        <span class="hljs-comment">// --- 集合体</span><br>        <span class="hljs-comment">// 分组</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result12</span> <span class="hljs-operator">=</span> orders.groupBy($(<span class="hljs-string">&quot;a&quot;</span>)).select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>).sum().as(<span class="hljs-string">&quot;d&quot;</span>));<br>        <span class="hljs-comment">// 窗口</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result13</span> <span class="hljs-operator">=</span> orders<br>                .window(Tumble.over(lit(<span class="hljs-number">5</span>).minutes()).on($(<span class="hljs-string">&quot;rowtime&quot;</span>)).as(<span class="hljs-string">&quot;w&quot;</span>)) <span class="hljs-comment">// define window</span><br>                .groupBy($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;w&quot;</span>)) <span class="hljs-comment">// group by key and window</span><br>                <span class="hljs-comment">// access window properties and aggregate</span><br>                .select(<br>                        $(<span class="hljs-string">&quot;a&quot;</span>),<br>                        $(<span class="hljs-string">&quot;w&quot;</span>).start(),<br>                        $(<span class="hljs-string">&quot;w&quot;</span>).end(),<br>                        $(<span class="hljs-string">&quot;w&quot;</span>).rowtime(),<br>                        $(<span class="hljs-string">&quot;b&quot;</span>).sum().as(<span class="hljs-string">&quot;d&quot;</span>)<br>                );<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result14</span> <span class="hljs-operator">=</span> orders<br>                .window(Tumble.over(lit(<span class="hljs-number">5</span>).minutes()).on($(<span class="hljs-string">&quot;rowtime&quot;</span>)).as(<span class="hljs-string">&quot;w&quot;</span>)) <span class="hljs-comment">// define window</span><br>                .groupBy($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;w&quot;</span>)) <span class="hljs-comment">// group by key and window</span><br>                <span class="hljs-comment">// access window properties and aggregate</span><br>                .select(<br>                        $(<span class="hljs-string">&quot;a&quot;</span>),<br>                        $(<span class="hljs-string">&quot;w&quot;</span>).start(),<br>                        $(<span class="hljs-string">&quot;w&quot;</span>).end(),<br>                        $(<span class="hljs-string">&quot;w&quot;</span>).rowtime(),<br>                        $(<span class="hljs-string">&quot;b&quot;</span>).sum().as(<span class="hljs-string">&quot;d&quot;</span>)<br>                );<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result15</span> <span class="hljs-operator">=</span> orders<br>                <span class="hljs-comment">// define window</span><br>                .window(<br>                        Over<br>                                .partitionBy($(<span class="hljs-string">&quot;a&quot;</span>))<br>                                .orderBy($(<span class="hljs-string">&quot;rowtime&quot;</span>))<br>                                .preceding(UNBOUNDED_RANGE)<br>                                .following(CURRENT_RANGE)<br>                                .as(<span class="hljs-string">&quot;w&quot;</span>))<br>                <span class="hljs-comment">// sliding aggregate</span><br>                .select(<br>                        $(<span class="hljs-string">&quot;a&quot;</span>),<br>                        $(<span class="hljs-string">&quot;b&quot;</span>).avg().over($(<span class="hljs-string">&quot;w&quot;</span>)),<br>                        $(<span class="hljs-string">&quot;b&quot;</span>).max().over($(<span class="hljs-string">&quot;w&quot;</span>)),<br>                        $(<span class="hljs-string">&quot;b&quot;</span>).min().over($(<span class="hljs-string">&quot;w&quot;</span>))<br>                );<br>        <span class="hljs-comment">// 不同流之间的聚合</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">groupByDistinctResult</span> <span class="hljs-operator">=</span> orders<br>                .groupBy($(<span class="hljs-string">&quot;a&quot;</span>))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>).sum().distinct().as(<span class="hljs-string">&quot;d&quot;</span>));<br><span class="hljs-comment">// Distinct aggregation on time window group by</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">groupByWindowDistinctResult</span> <span class="hljs-operator">=</span> orders<br>                .window(Tumble<br>                        .over(lit(<span class="hljs-number">5</span>).minutes())<br>                        .on($(<span class="hljs-string">&quot;rowtime&quot;</span>))<br>                        .as(<span class="hljs-string">&quot;w&quot;</span>)<br>                )<br>                .groupBy($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;w&quot;</span>))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>).sum().distinct().as(<span class="hljs-string">&quot;d&quot;</span>));<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result16</span> <span class="hljs-operator">=</span> orders<br>                .window(Over<br>                        .partitionBy($(<span class="hljs-string">&quot;a&quot;</span>))<br>                        .orderBy($(<span class="hljs-string">&quot;rowtime&quot;</span>))<br>                        .preceding(UNBOUNDED_RANGE)<br>                        .as(<span class="hljs-string">&quot;w&quot;</span>))<br>                .select(<br>                        $(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>).avg().distinct().over($(<span class="hljs-string">&quot;w&quot;</span>)),<br>                        $(<span class="hljs-string">&quot;b&quot;</span>).max().over($(<span class="hljs-string">&quot;w&quot;</span>)),<br>                        $(<span class="hljs-string">&quot;b&quot;</span>).min().over($(<span class="hljs-string">&quot;w&quot;</span>))<br>                );<br>        <span class="hljs-comment">// 自定义聚合函数</span><br>        <span class="hljs-comment">// tEnv.registerFunction(&quot;myUdagg&quot;, new MyUdagg());</span><br>        orders.groupBy(<span class="hljs-string">&quot;users&quot;</span>)<br>                .select(<br>                        $(<span class="hljs-string">&quot;users&quot;</span>),<br>                        call(<span class="hljs-string">&quot;myUdagg&quot;</span>, $(<span class="hljs-string">&quot;points&quot;</span>)).distinct().as(<span class="hljs-string">&quot;myDistinctResult&quot;</span>)<br>                );<br>        <span class="hljs-comment">// 去重</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result17</span> <span class="hljs-operator">=</span> orders.distinct();<br>        <span class="hljs-comment">// ---- 连接</span><br>        <span class="hljs-comment">// 内连接</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> tEnv.fromDataSet(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;a, b, c&quot;</span>);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> tEnv.fromDataSet(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;d, e, f&quot;</span>);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result18</span> <span class="hljs-operator">=</span> left.join(right)<br>                .where($(<span class="hljs-string">&quot;a&quot;</span>).isEqual($(<span class="hljs-string">&quot;d&quot;</span>)))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>), $(<span class="hljs-string">&quot;e&quot;</span>));<br>        <span class="hljs-comment">// 外连接</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">left2</span> <span class="hljs-operator">=</span> tEnv.fromDataSet(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;a, b, c&quot;</span>);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">right2</span> <span class="hljs-operator">=</span> tEnv.fromDataSet(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;d, e, f&quot;</span>);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">leftOuterResult</span> <span class="hljs-operator">=</span> left2.leftOuterJoin(right2, $(<span class="hljs-string">&quot;a&quot;</span>).isEqual($(<span class="hljs-string">&quot;d&quot;</span>)))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>), $(<span class="hljs-string">&quot;e&quot;</span>));<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">rightOuterResult</span> <span class="hljs-operator">=</span> left2.rightOuterJoin(right2, $(<span class="hljs-string">&quot;a&quot;</span>).isEqual($(<span class="hljs-string">&quot;d&quot;</span>)))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>), $(<span class="hljs-string">&quot;e&quot;</span>));<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">fullOuterResult</span> <span class="hljs-operator">=</span> left2.fullOuterJoin(right2, $(<span class="hljs-string">&quot;a&quot;</span>).isEqual($(<span class="hljs-string">&quot;d&quot;</span>)))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>), $(<span class="hljs-string">&quot;e&quot;</span>));<br>        <span class="hljs-comment">// 间隔加入，加上时间条件的 join</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">left3</span> <span class="hljs-operator">=</span> tEnv.fromDataSet(<span class="hljs-literal">null</span>, $(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>), $(<span class="hljs-string">&quot;c&quot;</span>), $(<span class="hljs-string">&quot;ltime&quot;</span>).rowtime());<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">right3</span> <span class="hljs-operator">=</span> tEnv.fromDataSet(<span class="hljs-literal">null</span>, $(<span class="hljs-string">&quot;d&quot;</span>), $(<span class="hljs-string">&quot;e&quot;</span>), $(<span class="hljs-string">&quot;f&quot;</span>), $(<span class="hljs-string">&quot;rtime&quot;</span>).rowtime());<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result19</span> <span class="hljs-operator">=</span> left3.join(right3)<br>                .where(<br>                        and(<br>                                $(<span class="hljs-string">&quot;a&quot;</span>).isEqual($(<span class="hljs-string">&quot;d&quot;</span>)),<br>                                $(<span class="hljs-string">&quot;ltime&quot;</span>).isGreaterOrEqual($(<span class="hljs-string">&quot;rtime&quot;</span>).minus(lit(<span class="hljs-number">5</span>).minutes())),<br>                                $(<span class="hljs-string">&quot;ltime&quot;</span>).isLess($(<span class="hljs-string">&quot;rtime&quot;</span>).plus(lit(<span class="hljs-number">10</span>).minutes()))<br>                        ))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>), $(<span class="hljs-string">&quot;e&quot;</span>), $(<span class="hljs-string">&quot;ltime&quot;</span>));<br>        <span class="hljs-comment">// 内联表，UDTF</span><br>        TableFunction&lt;String&gt; split = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySplitUDTF</span>();<br>        tEnv.registerFunction(<span class="hljs-string">&quot;split&quot;</span>, split);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result20</span> <span class="hljs-operator">=</span> orders<br>                .joinLateral(call(<span class="hljs-string">&quot;split&quot;</span>, $(<span class="hljs-string">&quot;c&quot;</span>)).as(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;v&quot;</span>))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>), $(<span class="hljs-string">&quot;s&quot;</span>), $(<span class="hljs-string">&quot;t&quot;</span>), $(<span class="hljs-string">&quot;v&quot;</span>));<br>        <span class="hljs-comment">// 左外连接</span><br>        TableFunction&lt;String&gt; split2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySplitUDTF</span>();<br>        tEnv.registerFunction(<span class="hljs-string">&quot;split&quot;</span>, split2);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result21</span> <span class="hljs-operator">=</span> orders<br>                .leftOuterJoinLateral(call(<span class="hljs-string">&quot;split2&quot;</span>, $(<span class="hljs-string">&quot;c&quot;</span>)).as(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;v&quot;</span>))<br>                .select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>), $(<span class="hljs-string">&quot;s&quot;</span>), $(<span class="hljs-string">&quot;t&quot;</span>), $(<span class="hljs-string">&quot;v&quot;</span>));<br>        <span class="hljs-comment">// 加入时态表？什么是时态表，还是有点模糊</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">ratesHistory</span> <span class="hljs-operator">=</span> tEnv.from(<span class="hljs-string">&quot;RatesHistory&quot;</span>);<br>        <span class="hljs-comment">// register temporal table function with a time attribute and primary key</span><br>        <span class="hljs-type">TemporalTableFunction</span> <span class="hljs-variable">rates</span> <span class="hljs-operator">=</span> ratesHistory.createTemporalTableFunction(<br>                <span class="hljs-string">&quot;r_proctime&quot;</span>,<br>                <span class="hljs-string">&quot;r_currency&quot;</span>);<br>        tEnv.registerFunction(<span class="hljs-string">&quot;rates&quot;</span>, rates);<br>        <span class="hljs-comment">// join with &quot;Orders&quot; based on the time attribute and key</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result22</span> <span class="hljs-operator">=</span> orders<br>                .joinLateral(call(<span class="hljs-string">&quot;rates&quot;</span>, $(<span class="hljs-string">&quot;o_proctime&quot;</span>)), $(<span class="hljs-string">&quot;o_currency&quot;</span>).isEqual($(<span class="hljs-string">&quot;r_currency&quot;</span>)));<br>        <span class="hljs-comment">// ---- 联合，集合的操作</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">left4</span> <span class="hljs-operator">=</span> tEnv.fromDataSet(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;a, b, c&quot;</span>);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">right4</span> <span class="hljs-operator">=</span> tEnv.fromDataSet(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;a, b, c&quot;</span>);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result23</span> <span class="hljs-operator">=</span> left4.union(right4);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result24</span> <span class="hljs-operator">=</span> left4.unionAll(right4);<br>        <span class="hljs-comment">// 相交，取交集</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result25</span> <span class="hljs-operator">=</span> left4.intersect(right4);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result26</span> <span class="hljs-operator">=</span> left4.intersectAll(right4);<br>        <span class="hljs-comment">// 差集</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result27</span> <span class="hljs-operator">=</span> left.minus(right);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result28</span> <span class="hljs-operator">=</span> left.minusAll(right);<br>        <span class="hljs-comment">// in</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result29</span> <span class="hljs-operator">=</span> left.select($(<span class="hljs-string">&quot;a&quot;</span>), $(<span class="hljs-string">&quot;b&quot;</span>), $(<span class="hljs-string">&quot;c&quot;</span>)).where($(<span class="hljs-string">&quot;a&quot;</span>).in(right));<br>        <span class="hljs-comment">// ---- 排序</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> tEnv.fromDataSet(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;a, b, c&quot;</span>);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result30</span> <span class="hljs-operator">=</span> in.orderBy($(<span class="hljs-string">&quot;a&quot;</span>).asc());<br>        <span class="hljs-comment">// 偏移</span><br>        <span class="hljs-comment">// returns the first 5 records from the sorted result</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result31</span> <span class="hljs-operator">=</span> in.orderBy($(<span class="hljs-string">&quot;a&quot;</span>).asc()).fetch(<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">// skips the first 3 records and returns all following records from the sorted result</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result32</span> <span class="hljs-operator">=</span> in.orderBy($(<span class="hljs-string">&quot;a&quot;</span>).asc()).offset(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// skips the first 10 records and returns the next 5 records from the sorted result</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result33</span> <span class="hljs-operator">=</span> in.orderBy($(<span class="hljs-string">&quot;a&quot;</span>).asc()).offset(<span class="hljs-number">10</span>).fetch(<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">// --- 插入</span><br>        orders.executeInsert(<span class="hljs-string">&quot;OutOrders&quot;</span>);<br>        <span class="hljs-comment">// 窗口合集</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        单聚合</span><br><span class="hljs-comment">        Table table = input</span><br><span class="hljs-comment">                .window([GroupWindow w].as(&quot;w&quot;))  // define window with alias w</span><br><span class="hljs-comment">                .groupBy($(&quot;w&quot;))  // group the table by window w</span><br><span class="hljs-comment">                .select($(&quot;b&quot;).sum());  // aggregate</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        多聚合</span><br><span class="hljs-comment">        Table table = input</span><br><span class="hljs-comment">                  .window([GroupWindow w].as(&quot;w&quot;))  // define window with alias w</span><br><span class="hljs-comment">                  .groupBy($(&quot;w&quot;), $(&quot;a&quot;))  // group the table by attribute a and window w</span><br><span class="hljs-comment">                  .select($(&quot;a&quot;), $(&quot;b&quot;).sum());  // aggregate</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        多聚合 + 输出窗口时间</span><br><span class="hljs-comment">        Table table = input</span><br><span class="hljs-comment">                  .window([GroupWindow w].as(&quot;w&quot;))  // define window with alias w</span><br><span class="hljs-comment">                  .groupBy($(&quot;w&quot;), $(&quot;a&quot;))  // group the table by attribute a and window w</span><br><span class="hljs-comment">                  .select($(&quot;a&quot;), $(&quot;w&quot;).start(), $(&quot;w&quot;).end(), $(&quot;w&quot;).rowtime(), $(&quot;b&quot;).count()); // aggregate and add window start, end, and rowtime timestamps</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        滚动窗口</span><br><span class="hljs-comment">        over : 窗口长度，时间间隔，或者计数间隔</span><br><span class="hljs-comment">        on : 指定时间属性</span><br><span class="hljs-comment">        as : 为窗口分配别名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // Tumbling Event-time Window</span><br><span class="hljs-comment">        .window(Tumble.over(lit(10).minutes()).on($(&quot;rowtime&quot;)).as(&quot;w&quot;));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // Tumbling Processing-time Window (assuming a processing-time attribute &quot;proctime&quot;)</span><br><span class="hljs-comment">        .window(Tumble.over(lit(10).minutes()).on($(&quot;proctime&quot;)).as(&quot;w&quot;));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // Tumbling Row-count Window (assuming a processing-time attribute &quot;proctime&quot;)</span><br><span class="hljs-comment">        .window(Tumble.over(rowInterval(10)).on($(&quot;proctime&quot;)).as(&quot;w&quot;));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        滑动窗口</span><br><span class="hljs-comment">        over : 窗口长度，时间间隔，或者计数间隔</span><br><span class="hljs-comment">        every : 滑动时间间隔</span><br><span class="hljs-comment">        on : 指定时间属性</span><br><span class="hljs-comment">        as : 为窗口分配别名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // Sliding Event-time Window</span><br><span class="hljs-comment">        .window(Slide.over(lit(10).minutes())</span><br><span class="hljs-comment">                    .every(lit(5).minutes())</span><br><span class="hljs-comment">                    .on($(&quot;rowtime&quot;))</span><br><span class="hljs-comment">                    .as(&quot;w&quot;));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // Sliding Processing-time window (assuming a processing-time attribute &quot;proctime&quot;)</span><br><span class="hljs-comment">        .window(Slide.over(lit(10).minutes())</span><br><span class="hljs-comment">                    .every(lit(5).minutes())</span><br><span class="hljs-comment">                    .on($(&quot;proctime&quot;))</span><br><span class="hljs-comment">                    .as(&quot;w&quot;));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // Sliding Row-count window (assuming a processing-time attribute &quot;proctime&quot;)</span><br><span class="hljs-comment">        .window(Slide.over(rowInterval(10)).every(rowInterval(5)).on($(&quot;proctime&quot;)).as(&quot;w&quot;));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        会话窗口</span><br><span class="hljs-comment">        withGap : 窗口之间的时间间隔</span><br><span class="hljs-comment">        on : 指定时间属性</span><br><span class="hljs-comment">        as : 为窗口分配别名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // Session Event-time Window</span><br><span class="hljs-comment">        .window(Session.withGap(lit(10).minutes()).on($(&quot;rowtime&quot;)).as(&quot;w&quot;));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // Session Processing-time Window (assuming a processing-time attribute &quot;proctime&quot;)</span><br><span class="hljs-comment">        .window(Session.withGap(lit(10).minutes()).on($(&quot;proctime&quot;)).as(&quot;w&quot;));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Over Windows</span><br><span class="hljs-comment">        Unbounded Over Windows</span><br><span class="hljs-comment">        Bounded Over Windows</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        基于行的操作</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// map</span><br>        <span class="hljs-type">ScalarFunction</span> <span class="hljs-variable">func</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMapFunction2</span>();<br>        tEnv.registerFunction(<span class="hljs-string">&quot;func&quot;</span>, func);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table3</span> <span class="hljs-operator">=</span> input<br>                .map(call(<span class="hljs-string">&quot;func&quot;</span>, $(<span class="hljs-string">&quot;c&quot;</span>)).as(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>));<br>        <span class="hljs-comment">// flat map , 聚合函数等</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySplitUDTF</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TableFunction</span>&lt;String&gt; &#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMapFunction2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ScalarFunction</span> &#123;<br>    <span class="hljs-keyword">public</span> Row <span class="hljs-title function_">eval</span><span class="hljs-params">(String a)</span> &#123;<br>        <span class="hljs-keyword">return</span> Row.of(a, <span class="hljs-string">&quot;pre-&quot;</span> + a);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> TypeInformation&lt;?&gt; getResultType(Class&lt;?&gt;[] signature) &#123;<br>        <span class="hljs-keyword">return</span> Types.ROW(STRING(), STRING());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实时计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink文档学习6</title>
    <link href="/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A06/"/>
    <url>/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A06/</url>
    
    <content type="html"><![CDATA[<h1 id="动态表"><a href="#动态表" class="headerlink" title="动态表"></a>动态表</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">动态表</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">对流数据进行 SQL 查询，本质是什么？</span><br><span class="hljs-comment">本质上是对一个 INSERT-only 的 changelog 流构建表，这张表在不断的进行插入数据操作</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">查询限制</span><br><span class="hljs-comment">合理的时间滚动可以存储中间数据的成本，和流数据的窗口是一致的</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">表到流之间的转换</span><br><span class="hljs-comment">1. Append-only 流</span><br><span class="hljs-comment">2. Retract 流</span><br><span class="hljs-comment">3. Upsert 流</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">时间属性</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-comment">// 已经被废弃了呀</span><br>        env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        创建表的时候指定时间</span><br><span class="hljs-comment">        CREATE TABLE user_actions (</span><br><span class="hljs-comment">          user_name STRING,</span><br><span class="hljs-comment">          data STRING,</span><br><span class="hljs-comment">          user_action_time AS PROCTIME() -- 声明一个额外的列作为处理时间属性</span><br><span class="hljs-comment">        ) WITH (</span><br><span class="hljs-comment">          ...</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment">        查询的时候指定窗口大小</span><br><span class="hljs-comment">        SELECT TUMBLE_START(user_action_time, INTERVAL &#x27;10&#x27; MINUTE), COUNT(DISTINCT user_name)</span><br><span class="hljs-comment">        FROM user_actions</span><br><span class="hljs-comment">        GROUP BY TUMBLE(user_action_time, INTERVAL &#x27;10&#x27; MINUTE);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        PS: 文档有些过时了</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        无论是基于什么时间，都要指定时间参数和水位生成方式，和 MySQL 的区别就是多加了</span><br><span class="hljs-comment">        时间参数而已</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        在 DataStream 到 Table 转换时定义</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">StreamTableEnvironment</span> <span class="hljs-variable">tEnv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        DataStream&lt;Tuple2&lt;String, String&gt;&gt; stream = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> tEnv.fromDataStream(<br>                stream,<br>                $(<span class="hljs-string">&quot;user_name&quot;</span>),<br>                $(<span class="hljs-string">&quot;data&quot;</span>),<br>                $(<span class="hljs-string">&quot;user_action_time&quot;</span>).proctime()<br>        );<br>        <span class="hljs-type">GroupWindowedTable</span> <span class="hljs-variable">windowedTable</span> <span class="hljs-operator">=</span> table.window(<br>                Tumble.over(<span class="hljs-string">&quot;10&quot;</span>)<br>                        .on($(<span class="hljs-string">&quot;user_action_time&quot;</span>))<br>                        .as(<span class="hljs-string">&quot;userActionWindow&quot;</span>));<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        设计初衷：查询数据的版本</span><br><span class="hljs-comment">        时态表，仅 Blink planner 支持此功能，不同时间查询的数据结果不同</span><br><span class="hljs-comment">        根据当前时间而定版本</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        声明版本表</span><br><span class="hljs-comment">        在 Flink 中，定义了主键约束和事件时间属性的表就是版本表</span><br><span class="hljs-comment">        -- 定义一张版本表</span><br><span class="hljs-comment">        CREATE TABLE product_changelog (</span><br><span class="hljs-comment">          product_id STRING,</span><br><span class="hljs-comment">          product_name STRING,</span><br><span class="hljs-comment">          product_price DECIMAL(10, 4),</span><br><span class="hljs-comment">          # 从每条 changelog 中抽取 changelog 对应的数据库表中操作的执行时间</span><br><span class="hljs-comment">          update_time TIMESTAMP(3) METADATA FROM &#x27;value.source.timestamp&#x27; VIRTUAL,</span><br><span class="hljs-comment">          PRIMARY KEY(product_id) NOT ENFORCED,      -- (1) 定义主键约束</span><br><span class="hljs-comment">          WATERMARK FOR update_time AS update_time   -- (2) 通过 watermark 定义事件时间</span><br><span class="hljs-comment">        ) WITH (</span><br><span class="hljs-comment">          &#x27;connector&#x27; = &#x27;kafka&#x27;,</span><br><span class="hljs-comment">          &#x27;topic&#x27; = &#x27;products&#x27;,</span><br><span class="hljs-comment">          &#x27;scan.startup.mode&#x27; = &#x27;earliest-offset&#x27;,</span><br><span class="hljs-comment">          &#x27;properties.bootstrap.servers&#x27; = &#x27;localhost:9092&#x27;,</span><br><span class="hljs-comment">          &#x27;value.format&#x27; = &#x27;debezium-json&#x27;</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        声明版本视图</span><br><span class="hljs-comment">        Flink 也支持定义版本视图只要一个视图包含主键和事件时间便是一个版本视图</span><br><span class="hljs-comment">        -- 定义一张 append-only 表</span><br><span class="hljs-comment">        CREATE TABLE RatesHistory (</span><br><span class="hljs-comment">            currency_time TIMESTAMP(3),</span><br><span class="hljs-comment">            currency STRING,</span><br><span class="hljs-comment">            rate DECIMAL(38, 10),</span><br><span class="hljs-comment">            WATERMARK FOR currency_time AS currency_time   -- 定义事件时间</span><br><span class="hljs-comment">        ) WITH (</span><br><span class="hljs-comment">          &#x27;connector&#x27; = &#x27;kafka&#x27;,</span><br><span class="hljs-comment">          &#x27;topic&#x27; = &#x27;rates&#x27;,</span><br><span class="hljs-comment">          &#x27;scan.startup.mode&#x27; = &#x27;earliest-offset&#x27;,</span><br><span class="hljs-comment">          &#x27;properties.bootstrap.servers&#x27; = &#x27;localhost:9092&#x27;,</span><br><span class="hljs-comment">          &#x27;format&#x27; = &#x27;json&#x27;                                -- 普通的 append-only 流</span><br><span class="hljs-comment">        )</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        时态表函数</span><br><span class="hljs-comment">        时态表的 Join</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        表中的模式检测</span><br><span class="hljs-comment">        MATCH_RECOGNIZE 定义更高级的用法：</span><br><span class="hljs-comment">        1. 使用 PARTITION BY 和 ORDER BY 子句对数据进行逻辑分区和排序。</span><br><span class="hljs-comment">        2. 使用 PATTERN 子句定义要查找的行模式。这些模式使用类似于正则表达式的语法。</span><br><span class="hljs-comment">        3. 在 DEFINE 子句中指定行模式变量的逻辑组合。</span><br><span class="hljs-comment">        4. measures 是指在 MEASURES 子句中定义的表达式，这些表达式可用于 SQL 查询中的其他部分</span><br><span class="hljs-comment">        需要引用 cep 库</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        SQL 语句，语法</span><br><span class="hljs-comment">        PARTITION BY - 定义表的逻辑分区；类似于 GROUP BY 操作</span><br><span class="hljs-comment">        ORDER BY - 指定传入行的排序方式；这是必须的，因为模式依赖于顺序</span><br><span class="hljs-comment">        MEASURES - 定义子句的输出；类似于 SELECT 子句</span><br><span class="hljs-comment">        ONE ROW PER MATCH - 输出方式，定义每个匹配项应产生多少行</span><br><span class="hljs-comment">        AFTER MATCH SKIP - 指定下一个匹配的开始位置；这也是控制单个事件可以属于多少个不同匹配项的方法</span><br><span class="hljs-comment">        PATTERN - 允许使用类似于 正则表达式 的语法构造搜索的模式</span><br><span class="hljs-comment">        DEFINE - 本部分定义了模式变量必须满足的条件</span><br><span class="hljs-comment">        定义更复杂的 SQL 查询，语法和查询看文档就行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        查询配置，和流计算一样，表的查询也有配置</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env2</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-type">StreamTableEnvironment</span> <span class="hljs-variable">tableEnv</span> <span class="hljs-operator">=</span> StreamTableEnvironment.create(env2);<br>        <span class="hljs-type">TableConfig</span> <span class="hljs-variable">tConfig</span> <span class="hljs-operator">=</span> tableEnv.getConfig();<br>        tConfig.setIdleStateRetentionTime(Time.hours(<span class="hljs-number">12</span>), Time.hours(<span class="hljs-number">24</span>));<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        TableSink&lt;Row&gt; sink = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// API 文档都不是太新</span><br><span class="hljs-comment">//        tableEnv.registerTableSink(</span><br><span class="hljs-comment">//                &quot;outputTable&quot;,               // table name</span><br><span class="hljs-comment">//                new String[]&#123;&#125;,           // field names</span><br><span class="hljs-comment">//                new TypeInformation[]&#123;&#125;,  // field types</span><br><span class="hljs-comment">//                sink);                       // table sink</span><br>        result.executeInsert(<span class="hljs-string">&quot;outputTable&quot;</span>);<br>        DataStream&lt;Row&gt; stream2 = tableEnv.toAppendStream(result, Row.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">数据类型</span><br><span class="hljs-comment">flink 1.9 之前，table &amp; SQL 也是使用 TypeInformation，后来独立了</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Table API 数据类型</span><br><span class="hljs-comment">        物理提示，桥接声明</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">DataType</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> INTERVAL(DAY(), SECOND(<span class="hljs-number">3</span>));<br>        <span class="hljs-type">DataType</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> DataTypes.TIMESTAMP(<span class="hljs-number">3</span>).bridgedTo(java.sql.Timestamp.class);<br>        <span class="hljs-type">DataType</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> DataTypes.ARRAY(DataTypes.INT().notNull()).bridgedTo(<span class="hljs-type">int</span>[].class);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        数据类型的取用，取决于 planner</span><br><span class="hljs-comment">        数据类型列表</span><br><span class="hljs-comment">        CHAR</span><br><span class="hljs-comment">        VARCHAR</span><br><span class="hljs-comment">        STRING = VARCHAR(2147483647)</span><br><span class="hljs-comment">        BINARY</span><br><span class="hljs-comment">        VARBINARY 可变长二进制</span><br><span class="hljs-comment">        BYTES = VARBINARY(2147483647)</span><br><span class="hljs-comment">        DECIMAL         精确数值</span><br><span class="hljs-comment">        DECIMAL(p)</span><br><span class="hljs-comment">        DECIMAL(p, s)</span><br><span class="hljs-comment">        DEC</span><br><span class="hljs-comment">        DEC(p)</span><br><span class="hljs-comment">        DEC(p, s)</span><br><span class="hljs-comment">        NUMERIC</span><br><span class="hljs-comment">        NUMERIC(p)</span><br><span class="hljs-comment">        NUMERIC(p, s)</span><br><span class="hljs-comment">        TINYINT</span><br><span class="hljs-comment">        SMALLINT</span><br><span class="hljs-comment">        INT</span><br><span class="hljs-comment">        INTEGER</span><br><span class="hljs-comment">        BIGINT</span><br><span class="hljs-comment">        FLOAT</span><br><span class="hljs-comment">        DOUBLE</span><br><span class="hljs-comment">        DOUBLE PRECISION</span><br><span class="hljs-comment">        DATE</span><br><span class="hljs-comment">        TIME</span><br><span class="hljs-comment">        TIMESTAMP</span><br><span class="hljs-comment">        TIMESTAMP WITHOUT TIME ZONE</span><br><span class="hljs-comment">        TIMESTAMP(p) WITHOUT TIME ZONE</span><br><span class="hljs-comment">        TIMESTAMP WITH LOCAL TIME ZONE</span><br><span class="hljs-comment">        TIMESTAMP(p) WITH LOCAL TIME ZONE</span><br><span class="hljs-comment">        INTERVAL YEAR</span><br><span class="hljs-comment">        INTERVAL YEAR(p)</span><br><span class="hljs-comment">        INTERVAL YEAR(p) TO MONTH</span><br><span class="hljs-comment">        INTERVAL MONTH</span><br><span class="hljs-comment">        INTERVAL DAY</span><br><span class="hljs-comment">        INTERVAL DAY(p1)</span><br><span class="hljs-comment">        INTERVAL DAY(p1) TO HOUR</span><br><span class="hljs-comment">        INTERVAL DAY(p1) TO MINUTE</span><br><span class="hljs-comment">        INTERVAL DAY(p1) TO SECOND(p2)</span><br><span class="hljs-comment">        INTERVAL HOUR</span><br><span class="hljs-comment">        INTERVAL HOUR TO MINUTE</span><br><span class="hljs-comment">        INTERVAL HOUR TO SECOND(p2)</span><br><span class="hljs-comment">        INTERVAL MINUTE</span><br><span class="hljs-comment">        INTERVAL MINUTE TO SECOND(p2)</span><br><span class="hljs-comment">        INTERVAL SECOND</span><br><span class="hljs-comment">        INTERVAL SECOND(p2)</span><br><span class="hljs-comment">        ARRAY</span><br><span class="hljs-comment">        MAP</span><br><span class="hljs-comment">        ROW</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        自定义数据类型</span><br><span class="hljs-comment">        数据类型注解</span><br><span class="hljs-comment">        class User &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            // extract fields automatically</span><br><span class="hljs-comment">            // 普通类型自动转化，复杂点的需要用注解指定</span><br><span class="hljs-comment">            public int age;</span><br><span class="hljs-comment">            public String name;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            // enrich the extraction with precision information</span><br><span class="hljs-comment">            public @DataTypeHint(&quot;DECIMAL(10, 2)&quot;) BigDecimal totalBalance;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            // enrich the extraction with forcing using RAW types</span><br><span class="hljs-comment">            public @DataTypeHint(&quot;RAW&quot;) Class&lt;?&gt; modelClass;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        DataTypes.of(User.class);</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实时计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink文档学习5</title>
    <link href="/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A05/"/>
    <url>/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A05/</url>
    
    <content type="html"><![CDATA[<h1 id="Table-API-amp-SQL"><a href="#Table-API-amp-SQL" class="headerlink" title="Table API &amp; SQL"></a>Table API &amp; SQL</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Table API &amp; SQL</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Planner 的作用主要是把关系型的SQL翻译成可执行的、经过优化的 Flink 任务</span><br><span class="hljs-comment">flink-table-planner : 1.9 版本之前</span><br><span class="hljs-comment">flink-table-planner-blink_2.11 : 最新的版本</span><br><span class="hljs-comment">两种 planner 的区别：</span><br><span class="hljs-comment">Blink 将批处理作业视作流处理的一种特例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        通用的程序结构</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 创建环境</span><br>        <span class="hljs-comment">// TableEnvironment tableEnv = TableEnvironment.create(..);</span><br>        <span class="hljs-type">TableEnvironment</span> <span class="hljs-variable">tableEnv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 创建输入表</span><br>        tableEnv.executeSql(<br>                <span class="hljs-string">&quot;CREATE TEMPORARY TABLE table1 ... WITH (&#x27;connect&#x27; = ... )&quot;</span><br>        );<br>        <span class="hljs-comment">// 创建输出表</span><br>        tableEnv.executeSql(<br>                <span class="hljs-string">&quot;CREATE TEMPORARY outputTable ... WITH (&#x27;connect&#x27; = ... )&quot;</span><br>        );<br>        <span class="hljs-comment">// 查询</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table2</span> <span class="hljs-operator">=</span> tableEnv.from(<span class="hljs-string">&quot;table1&quot;</span>).select(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table3</span> <span class="hljs-operator">=</span> tableEnv.sqlQuery(<span class="hljs-string">&quot;SELECT ... FROM table1 ...&quot;</span>);<br>        <span class="hljs-comment">// 输出到外部环境</span><br>        <span class="hljs-type">TableResult</span> <span class="hljs-variable">tableResult</span> <span class="hljs-operator">=</span> table2.executeInsert(<span class="hljs-string">&quot;outputTable&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        TableEnvironment 是核心类</span><br><span class="hljs-comment">        1. 注册内外部的 catalog (好像就是元数据)</span><br><span class="hljs-comment">        2. 注册自定义函数，执行查询</span><br><span class="hljs-comment">        3. 将 DataStream 或 DataSet 转换为 Table</span><br><span class="hljs-comment">        你要明确的指出用实时还是离线</span><br><span class="hljs-comment">        BatchTableEnvironment.create()</span><br><span class="hljs-comment">        StreamTableEnvironment.create()</span><br><span class="hljs-comment">        TableConfig 可配置查询优化</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">EnvironmentSettings</span> <span class="hljs-variable">fsSetting</span> <span class="hljs-operator">=</span> EnvironmentSettings<br>                .newInstance()<br>                .useOldPlanner() <span class="hljs-comment">// old,blink,或者 any 让程序自己选择合适的</span><br>                .inStreamingMode() <span class="hljs-comment">// 实时模式</span><br>                .build();<br>        <span class="hljs-comment">// 实时环境</span><br>        <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">fsEnv</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-type">StreamTableEnvironment</span> <span class="hljs-variable">fsTableEnv</span> <span class="hljs-operator">=</span> StreamTableEnvironment.create(fsEnv, fsSetting);<br>        <span class="hljs-comment">// or TableEnvironment fsTableEnv = TableEnvironment.create(fsSettings);</span><br>        <span class="hljs-comment">// 离线环境</span><br>        <span class="hljs-type">ExecutionEnvironment</span> <span class="hljs-variable">fbEnv</span> <span class="hljs-operator">=</span> ExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-type">BatchTableEnvironment</span> <span class="hljs-variable">fbTableEnv</span> <span class="hljs-operator">=</span> BatchTableEnvironment.create(fbEnv);<br>        <span class="hljs-comment">// blink 实时</span><br>        <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">bsEnv</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-type">EnvironmentSettings</span> <span class="hljs-variable">bsSettings</span> <span class="hljs-operator">=</span> EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();<br>        <span class="hljs-type">StreamTableEnvironment</span> <span class="hljs-variable">bsTableEnv</span> <span class="hljs-operator">=</span> StreamTableEnvironment.create(bsEnv, bsSettings);<br>        <span class="hljs-comment">// blink 离线</span><br>        <span class="hljs-type">EnvironmentSettings</span> <span class="hljs-variable">bbSettings</span> <span class="hljs-operator">=</span> EnvironmentSettings.newInstance().useBlinkPlanner().inBatchMode().build();<br>        <span class="hljs-type">TableEnvironment</span> <span class="hljs-variable">bbTableEnv</span> <span class="hljs-operator">=</span> TableEnvironment.create(bbSettings);<br>        <span class="hljs-comment">// 如果/lib目录中只有一种计划器的 jar 包，则可以使用useAnyPlanner（python 使用 use any_u_planner）创建 EnvironmentSettings</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        TableEnvironment 维护着 catalog</span><br><span class="hljs-comment">        catalog 名称，数据库名称，对象名称</span><br><span class="hljs-comment">        表可以是虚拟（放一些查询结果）的，也可以是实体（真正的对应外部消息队列啥的）的</span><br><span class="hljs-comment">        可以是临时的，也可以是永久的</span><br><span class="hljs-comment">        永久的表会注册元数据信息：</span><br><span class="hljs-comment">        一旦永久表被创建，它对任何的会话都是生效的，直到明确删除</span><br><span class="hljs-comment">        临时表只在自己的内存中可见，其它会话不可见</span><br><span class="hljs-comment">        同名的临时表会屏蔽永久表（全局变量和局部变量的区别嘛！可见性）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 简单的查询</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">projTable</span> <span class="hljs-operator">=</span> fsTableEnv.from(<span class="hljs-string">&quot;X&quot;</span>).select();<br>        <span class="hljs-comment">// 注册表</span><br>        fsTableEnv.createTemporaryView(<span class="hljs-string">&quot;projectedTable&quot;</span>, projTable);<br>        <span class="hljs-comment">// 与外部系统的链接</span><br>        fsTableEnv.connect(<span class="hljs-literal">null</span>)<br>                .withFormat(<span class="hljs-literal">null</span>)<br>                .withSchema(<span class="hljs-literal">null</span>)<br>                .inAppendMode()<br>                .createTemporaryTable(<span class="hljs-string">&quot;MyTable&quot;</span>);<br>        <span class="hljs-comment">// 表注册信息 ： &lt;catalog 名、数据库名和表名&gt;</span><br>        <span class="hljs-comment">// 通过 . 来指定层级关系</span><br>        fsTableEnv.useCatalog(<span class="hljs-string">&quot;custom_catalog&quot;</span>);<br>        fsTableEnv.useDatabase(<span class="hljs-string">&quot;custom_database&quot;</span>);<br>        tableEnv.createTemporaryView(<span class="hljs-string">&quot;exampleView&quot;</span>, projTable);<br>        tableEnv.createTemporaryView(<span class="hljs-string">&quot;other_database.exampleView&quot;</span>, projTable);<br>        tableEnv.createTemporaryView(<span class="hljs-string">&quot;`example.View`&quot;</span>, projTable);<br>        tableEnv.createTemporaryView(<span class="hljs-string">&quot;other_catalog.other_database.exampleView&quot;</span>, projTable);<br>        <span class="hljs-comment">// 查询表，假设之前有注册过订单表</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> fsTableEnv.from(<span class="hljs-string">&quot;orders&quot;</span>);<br>        <span class="hljs-comment">// Table API</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">revenue</span> <span class="hljs-operator">=</span> orders<br>                .filter($(<span class="hljs-string">&quot;cCountry&quot;</span>).isEqual(<span class="hljs-string">&quot;FRANCE&quot;</span>))<br>                .groupBy($(<span class="hljs-string">&quot;cID&quot;</span>), $(<span class="hljs-string">&quot;cName&quot;</span>))<br>                .select($(<span class="hljs-string">&quot;cID&quot;</span>), $(<span class="hljs-string">&quot;cName&quot;</span>), $(<span class="hljs-string">&quot;revenue&quot;</span>).sum().as(<span class="hljs-string">&quot;revSum&quot;</span>));<br>        <span class="hljs-comment">// SQL</span><br>        <span class="hljs-comment">// 查询语句</span><br>        <span class="hljs-type">Table</span> <span class="hljs-variable">revenue2</span> <span class="hljs-operator">=</span> fsTableEnv.sqlQuery(<br>                <span class="hljs-string">&quot;select cID, cName, SUM(revenue) as revSum &quot;</span> +<br>                        <span class="hljs-string">&quot;from orders where cCountry = &#x27;FRANCE&#x27; &quot;</span> +<br>                        <span class="hljs-string">&quot;group by cID, cName&quot;</span><br>        );<br>        <span class="hljs-comment">// 更新语句</span><br>        tableEnv.executeSql(<br>                <span class="hljs-string">&quot;INSERT INTO RevenueFrance &quot;</span> +<br>                        <span class="hljs-string">&quot;SELECT cID, cName, SUM(revenue) AS revSum &quot;</span> +<br>                        <span class="hljs-string">&quot;FROM Orders &quot;</span> +<br>                        <span class="hljs-string">&quot;WHERE cCountry = &#x27;FRANCE&#x27; &quot;</span> +<br>                        <span class="hljs-string">&quot;GROUP BY cID, cName&quot;</span><br>        );<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Table Sink</span><br><span class="hljs-comment">        批处理 Table 只能写入 BatchTableSink，</span><br><span class="hljs-comment">        而流处理 Table 需要指定写入 AppendStreamTableSink，RetractStreamTableSink</span><br><span class="hljs-comment">        或者 UpsertStreamTableSink</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Schema</span> <span class="hljs-variable">schema</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>()<br>                .field(<span class="hljs-string">&quot;a&quot;</span>, DataTypes.INT())<br>                .field(<span class="hljs-string">&quot;b&quot;</span>, DataTypes.STRING())<br>                .field(<span class="hljs-string">&quot;c&quot;</span>, DataTypes.BIGINT());<br>        fsTableEnv.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystem</span>().path(<span class="hljs-string">&quot;/path/to/file&quot;</span>))<br>                .withFormat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OldCsv</span>().fieldDelimiter(<span class="hljs-string">&quot;|&quot;</span>).deriveSchema())<br>                .withSchema(schema)<br>                .createTemporaryTable(<span class="hljs-string">&quot;CsvSinkTable&quot;</span>);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        result.executeInsert(<span class="hljs-string">&quot;CsvSinkTable&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        不论输入数据源是流式的还是批式的，Table API 和 SQL 查询都会被转换成 DataStream 程序。</span><br><span class="hljs-comment">        查询在内部表示为逻辑查询计划，并被翻译成两个阶段：</span><br><span class="hljs-comment">        1. 优化逻辑执行计划</span><br><span class="hljs-comment">        2. 翻译成 DataStream 程序</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        在流处理方面两种计划器都可以与 DataStream API 结合</span><br><span class="hljs-comment">        只有 Old 计划器可以与 DataSet API 结合!!!!!!!</span><br><span class="hljs-comment">        在批处理方面，Blink 计划器不能同两种计划器中的任何一个结合</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        DataStream/DataSet 和 Table 之间的相互转换</span><br><span class="hljs-comment">        (DataSet 只 针对 older planner)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        两种模式：</span><br><span class="hljs-comment">        1. Append Mode: 仅当动态 Table 仅通过INSERT更改进行修改时，才可以使用此模式，即，</span><br><span class="hljs-comment">            它仅是追加操作，并且之前输出的结果永远不会更新</span><br><span class="hljs-comment">        2. Retract Mode: 任何情形都可以使用此模式</span><br><span class="hljs-comment">            它使用 boolean 值对 INSERT 和 DELETE 操作的数据进行标记</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-comment">// 流 -&gt; 视图，表</span><br>        <span class="hljs-type">StreamTableEnvironment</span> <span class="hljs-variable">tableEnv1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        DataStream&lt;Tuple2&lt;Long, String&gt;&gt; stream = <span class="hljs-literal">null</span>;<br>        tableEnv1.createTemporaryView(<span class="hljs-string">&quot;myTable&quot;</span>, stream);<br>        tableEnv1.createTemporaryView(<span class="hljs-string">&quot;myTable2&quot;</span>, stream, $(<span class="hljs-string">&quot;myLong&quot;</span>), $(<span class="hljs-string">&quot;myString&quot;</span>));<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table1</span> <span class="hljs-operator">=</span> tableEnv1.fromDataStream(stream);<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table22</span> <span class="hljs-operator">=</span> tableEnv1.fromDataStream(stream, $(<span class="hljs-string">&quot;myLong&quot;</span>), $(<span class="hljs-string">&quot;myString&quot;</span>));<br>        <span class="hljs-comment">// 表 -&gt; 流</span><br>        DataStream&lt;Row&gt; dsRow = tableEnv1.toAppendStream(table1, Row.class);<br>        TupleTypeInfo&lt;Tuple2&lt;String, Integer&gt;&gt; tupleType = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TupleTypeInfo</span>&lt;&gt;(<br>                Types.STRING(),<br>                Types.INT());<br>        DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; dsTuple =<br>                tableEnv1.toAppendStream(table1, tupleType);<br>        <span class="hljs-comment">// True is INSERT, false is DELETE.</span><br>        DataStream&lt;Tuple2&lt;Boolean, Row&gt;&gt; retractStream =<br>                tableEnv1.toRetractStream(table1, Row.class);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        名称映射，就是选择表中的列的时候</span><br><span class="hljs-comment">        $(&quot;myLong&quot;) : 确定到列</span><br><span class="hljs-comment">        $(&quot;f1&quot;) : 对于 Tuple 类型，也可以这样指定</span><br><span class="hljs-comment">        Row 类型支持任意数量的字段以及具有 null 值的字段。字段名称可以通过 RowTypeInfo 指定，</span><br><span class="hljs-comment">        也可以在将 Row 的 DataStream 或 DataSet 转换为 Table 时指定</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        查询优化：</span><br><span class="hljs-comment">            基于 Apache Calcite 的子查询解相关</span><br><span class="hljs-comment">            投影剪裁</span><br><span class="hljs-comment">            分区剪裁</span><br><span class="hljs-comment">            过滤器下推</span><br><span class="hljs-comment">            子计划消除重复数据以避免重复计算</span><br><span class="hljs-comment">            特殊子查询重写，包括两部分：</span><br><span class="hljs-comment">            将 IN 和 EXISTS 转换为 left semi-joins</span><br><span class="hljs-comment">            将 NOT IN 和 NOT EXISTS 转换为 left anti-join</span><br><span class="hljs-comment">            可选 join 重新排序</span><br><span class="hljs-comment">            通过 table.optimizer.join-reorder-enabled 启用</span><br><span class="hljs-comment">        优化器不仅基于计划，而且还基于可从数据源获得的丰富统计信息以及每个算子（例如 io，cpu，网络和内存）的细粒度成本来做出明智的决策。</span><br><span class="hljs-comment">        高级用户可以通过 CalciteConfig 对象提供自定义优化，可以通过调用 TableEnvironment＃getConfig＃setPlannerConfig 将其提供给 TableEnvironment</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        解释表，跟 MySQL 的 explain 关键字的意义一样</span><br><span class="hljs-comment">        用来分析执行计划</span><br><span class="hljs-comment">            1. 关系查询的抽象语法树（the Abstract Syntax Tree），即未优化的逻辑查询计划，</span><br><span class="hljs-comment">            2. 优化的逻辑查询计划，以及</span><br><span class="hljs-comment">            3. 物理执行计划</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-type">StreamTableEnvironment</span> <span class="hljs-variable">tEnv</span> <span class="hljs-operator">=</span> StreamTableEnvironment.create(env);<br>        DataStream&lt;Tuple2&lt;Integer, String&gt;&gt; stream1 = env.fromElements(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Tuple2</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;hello&quot;</span>));<br>        DataStream&lt;Tuple2&lt;Integer, String&gt;&gt; stream2 = env.fromElements(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Tuple2</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;hello&quot;</span>));<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table4</span> <span class="hljs-operator">=</span> tEnv.fromDataStream(stream1, $(<span class="hljs-string">&quot;count&quot;</span>), $(<span class="hljs-string">&quot;word&quot;</span>));<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table5</span> <span class="hljs-operator">=</span> tEnv.fromDataStream(stream2, $(<span class="hljs-string">&quot;count&quot;</span>), $(<span class="hljs-string">&quot;word&quot;</span>));<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> table4<br>                .where($(<span class="hljs-string">&quot;word&quot;</span>).like(<span class="hljs-string">&quot;F%&quot;</span>))<br>                .unionAll(table5);<br>        System.out.println(table.explain());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实时计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink文档学习4</title>
    <link href="/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A04/"/>
    <url>/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A04/</url>
    
    <content type="html"><![CDATA[<h1 id="异步I-x2F-O"><a href="#异步I-x2F-O" class="headerlink" title="异步I&#x2F;O"></a>异步I&#x2F;O</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">异步 IO</span><br><span class="hljs-comment">假设 function 需要访问数据库？</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest10</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建初始 DataStream</span><br>        DataStream&lt;String&gt; stream = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 应用异步 I/O 转换操作</span><br>        DataStream&lt;Tuple2&lt;String, String&gt;&gt; resultStream = AsyncDataStream<br>                .unorderedWait(stream,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncDatabaseRequest</span>(),<br>                        <span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS,<br>                        <span class="hljs-number">100</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        指定超时时间和最大并发容量</span><br><span class="hljs-comment">        超时后调用 timeout 函数处理</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        有序 orderedWait</span><br><span class="hljs-comment">        无序 unorderedWait</span><br><span class="hljs-comment">        以及它们的水位变化</span><br><span class="hljs-comment">        Flink 不以多线程方式调用 AsyncFunction</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 假设它是一个 MySQL 连接器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseClient</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    Future <span class="hljs-title function_">query</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncDatabaseRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RichAsyncFunction</span>&lt;String, Tuple2&lt;String, String&gt;&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 能够利用回调函数并发发送请求的数据库客户端</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> DatabaseClient client;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(Configuration parameters)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseClient</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        client.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">asyncInvoke</span><span class="hljs-params">(String key, ResultFuture&lt;Tuple2&lt;String, String&gt;&gt; resultFuture)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 发送异步请求，接收 future 结果</span><br>        <span class="hljs-keyword">final</span> Future&lt;String&gt; result = client.query(key);<br><br>        <span class="hljs-comment">// 设置客户端完成请求后要执行的回调函数</span><br>        <span class="hljs-comment">// 回调函数只是简单地把结果发给 future</span><br>        CompletableFuture.supplyAsync(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Supplier</span>&lt;String&gt;() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">return</span> result.get();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException e) &#123;<br>                    <span class="hljs-comment">// 显示地处理异常。</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;<br>        &#125;).thenAccept((String dbResult) -&gt; &#123;<br>            resultFuture.complete(Collections.singleton(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Tuple2</span>&lt;&gt;(key, dbResult)));<br>        &#125;);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">timeout</span><span class="hljs-params">(String input, ResultFuture&lt;Tuple2&lt;String, String&gt;&gt; resultFuture)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 超时处理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="自定义数据源"><a href="#自定义数据源" class="headerlink" title="自定义数据源"></a>自定义数据源</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">数据源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest11</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.createLocalEnvironment();<br>        env.addSource(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceFunction</span>&lt;Object&gt;() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(SourceContext&lt;Object&gt; ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">()</span> &#123;<br><br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// env.addSource(new FlinkKafkaConsumer&lt;Object&gt;());</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        如果要重新定义一个数据源</span><br><span class="hljs-comment">        走 fromSource 方法，实现方法的细节先不看了</span><br><span class="hljs-comment">         */</span><br>        env.fromSource(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Source</span>&lt;Object, SourceSplit, Object&gt;() &#123;<br><br>                           <span class="hljs-meta">@Override</span><br>                           <span class="hljs-keyword">public</span> Boundedness <span class="hljs-title function_">getBoundedness</span><span class="hljs-params">()</span> &#123;<br>                               <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                           &#125;<br><br>                           <span class="hljs-meta">@Override</span><br>                           <span class="hljs-keyword">public</span> SourceReader&lt;Object, SourceSplit&gt; <span class="hljs-title function_">createReader</span><span class="hljs-params">(SourceReaderContext sourceReaderContext)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                               <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                           &#125;<br><br>                           <span class="hljs-meta">@Override</span><br>                           <span class="hljs-keyword">public</span> SplitEnumerator&lt;SourceSplit, Object&gt; <span class="hljs-title function_">createEnumerator</span><span class="hljs-params">(SplitEnumeratorContext&lt;SourceSplit&gt; splitEnumeratorContext)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                               <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                           &#125;<br><br>                           <span class="hljs-meta">@Override</span><br>                           <span class="hljs-keyword">public</span> SplitEnumerator&lt;SourceSplit, Object&gt; <span class="hljs-title function_">restoreEnumerator</span><span class="hljs-params">(SplitEnumeratorContext&lt;SourceSplit&gt; splitEnumeratorContext, Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                               <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                           &#125;<br><br>                           <span class="hljs-meta">@Override</span><br>                           <span class="hljs-keyword">public</span> SimpleVersionedSerializer&lt;SourceSplit&gt; <span class="hljs-title function_">getSplitSerializer</span><span class="hljs-params">()</span> &#123;<br>                               <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                           &#125;<br><br>                           <span class="hljs-meta">@Override</span><br>                           <span class="hljs-keyword">public</span> SimpleVersionedSerializer&lt;Object&gt; <span class="hljs-title function_">getEnumeratorCheckpointSerializer</span><span class="hljs-params">()</span> &#123;<br>                               <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                           &#125;<br>                       &#125;,<br>                WatermarkStrategy.noWatermarks(),<br>                <span class="hljs-string">&quot;sourceName&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="旁路输出"><a href="#旁路输出" class="headerlink" title="旁路输出"></a>旁路输出</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">旁路输出</span><br><span class="hljs-comment">程序参数</span><br><span class="hljs-comment">flink 程序测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest12</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        OutputTag&lt;String&gt; outputTag = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputTag</span>&lt;String&gt;(<span class="hljs-string">&quot;side-output&quot;</span>) &#123;<br>        &#125;;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.createLocalEnvironment();<br>        DataStream&lt;String&gt; text = env.readTextFile(<span class="hljs-string">&quot;stream.txt&quot;</span>);<br>        SingleOutputStreamOperator&lt;String&gt; operator = text<br>                .process(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessFunction</span>&lt;String, String&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processElement</span><span class="hljs-params">(String value, Context ctx, Collector&lt;String&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-comment">// 输出到主要位置</span><br>                        out.collect(value);<br>                        ctx.output(outputTag, <span class="hljs-string">&quot;sideout-&quot;</span> + String.valueOf(value));<br>                    &#125;<br>                &#125;);<br>        <span class="hljs-comment">// 获取旁路数据的数据</span><br>        DataStream&lt;String&gt; sideOutputStream = operator.getSideOutput(outputTag);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        参数配置</span><br><span class="hljs-comment">        从文件、从路径、从输入流获取参数</span><br><span class="hljs-comment">        从命令行</span><br><span class="hljs-comment">        从系统属性获取</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">propertiesFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxx/&quot;</span>;<br>        <span class="hljs-type">ParameterTool</span> <span class="hljs-variable">parameterTool</span> <span class="hljs-operator">=</span> ParameterTool.fromPropertiesFile(propertiesFilePath);<br>        <span class="hljs-type">ParameterTool</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> ParameterTool.fromArgs(args);<br>        <span class="hljs-type">ParameterTool</span> <span class="hljs-variable">parameter2</span> <span class="hljs-operator">=</span> ParameterTool.fromSystemProperties();<br>        parameterTool.get(<span class="hljs-string">&quot;key&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> parameter.getInt(<span class="hljs-string">&quot;mapParallelism&quot;</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// 设置参数</span><br>        env.getConfig().setGlobalJobParameters(parameter);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实时计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink文档学习3</title>
    <link href="/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A03/"/>
    <url>/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A03/</url>
    
    <content type="html"><![CDATA[<h1 id="function"><a href="#function" class="headerlink" title="function"></a>function</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">UDF，用户自定义的 function</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        累加器，便于调试使用</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">IntCounter</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntCounter</span>();<br>        counter.add(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 注册累加器，从返回结果中获取值</span><br>        <span class="hljs-comment">// getRuntimeContext().addAccumulator(&quot;counter&quot;, counter);</span><br>        <span class="hljs-type">JobExecutionResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> env.execute();<br>        result.getAccumulatorResult(<span class="hljs-string">&quot;counter&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 实现相应的接口就行，或者匿名类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMapFunction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MapFunction</span>&lt;String, Integer&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">map</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> Integer.parseInt(s);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">数据流转换</span><br><span class="hljs-comment">map : 1 -&gt; 1</span><br><span class="hljs-comment">flatMap : 1 -&gt; 0,1,n</span><br><span class="hljs-comment">filter : 筛选，true/false</span><br><span class="hljs-comment">keyBy : 如果是 key 为对象，则必须重写 hashCode() 方法</span><br><span class="hljs-comment">reduce : 合并流</span><br><span class="hljs-comment">数据流→AllWindowedStream : 非并行的转换</span><br><span class="hljs-comment">KeyedStream→数据流 : sum, min, max, minBy, maxBy</span><br><span class="hljs-comment">KeyedStream→WindowedStream : window</span><br><span class="hljs-comment">WindowedStream→数据流AllWindowedStream→数据流 : apply</span><br><span class="hljs-comment">union : dataStream.union(otherStream1, otherStream2, ...)</span><br><span class="hljs-comment">窗口连接 : join, where, equalTo, window, apply</span><br><span class="hljs-comment">intervalJoin</span><br><span class="hljs-comment">coGroup</span><br><span class="hljs-comment">connectedStreams</span><br><span class="hljs-comment">CoMap, CoFlatMap</span><br><span class="hljs-comment">迭代流 : filter + closeWith(条件)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">物理分区</span><br><span class="hljs-comment">对数据流指定分区 : dataStream.partitionCustom(partitioner, &quot;someKey&quot;);</span><br><span class="hljs-comment">随机分区 : dataStream.shuffle();</span><br><span class="hljs-comment">重新平衡，负载均衡 : dataStream.rebalance();</span><br><span class="hljs-comment">重新缩放 : dataStream.rescale();</span><br><span class="hljs-comment">广播 : dataStream.broadcast();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">任务链和资源组</span><br><span class="hljs-comment">禁用任务链 : StreamExecutionEnvironment.disableOperatorChaining()</span><br><span class="hljs-comment">开始新链 : someStream.filter(...).map(...).startNewChain().map(...);</span><br><span class="hljs-comment">禁用链 : someStream.map(...).disableChaining();</span><br><span class="hljs-comment">设置 slot 运行 : someStream.filter(...).slotSharingGroup(&quot;name&quot;); 默认是 default</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">窗口</span><br><span class="hljs-comment">滚动窗口 : TumblingEventTimeWindows, 可以指定时区偏移, 参数：窗口大小</span><br><span class="hljs-comment">滑动窗口 : SlidingEventTimeWindows, 窗口大小 + 滑动频率</span><br><span class="hljs-comment">会话窗口 : 没有固定的时间，按 session 划分</span><br><span class="hljs-comment">全局窗口 : 定义触发器才会执行计算</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">窗口是对流进行划分的，触发器是触发计算的（默认就是事件超过水位线后，进行计算，也可以自己定的）</span><br><span class="hljs-comment">evictor 是窗口销毁后进行什么操作!</span><br><span class="hljs-comment">最大延迟：默认情况下，延迟超过一定事件的元素将被丢弃，但是!可以指定 allowedLateness 延迟在多少以内的</span><br><span class="hljs-comment">仍然可以加入计算!</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.createLocalEnvironment();<br>        DataStream&lt;String&gt; text = env.readTextFile(<span class="hljs-string">&quot;stream.txt&quot;</span>);<br>        DataStream&lt;WebSite&gt; webSiteDataStream = text.map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapFunction</span>&lt;String, WebSite&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> WebSite <span class="hljs-title function_">map</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-keyword">return</span> JSON.parseObject(s, WebSite.class);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 需要指定时间和水位</span><br>        DataStream&lt;WebSite&gt; waterMarkStream = webSiteDataStream.assignTimestampsAndWatermarks(<br>                WatermarkStrategy.&lt;WebSite&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="hljs-number">10</span>))<br>                        .withTimestampAssigner((website, ts) -&gt; &#123;<br>                            <span class="hljs-keyword">return</span> website.getEventTime();<br>                        &#125;).withIdleness(Duration.ofMinutes(<span class="hljs-number">1</span>))<br>        );<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        一个窗口的编写分为</span><br><span class="hljs-comment">        有 key 的窗口：</span><br><span class="hljs-comment">            stream</span><br><span class="hljs-comment">                .keyBy(&lt;KeySelector&gt;)       // 指定按 key 分组，如果是对象必须重写 hashCode() 方法</span><br><span class="hljs-comment">                .window(&lt;WindowAssigner&gt;)   // 按时间分配窗口</span><br><span class="hljs-comment">                .[.trigger(&lt;Trigger&gt;)]      // 可选，指定触发器</span><br><span class="hljs-comment">                .[.evictor(&lt;Evictor&gt;)]      // 可选，指定清除器</span><br><span class="hljs-comment">                .reduce/aggregate/process() // 窗口处理函数</span><br><span class="hljs-comment">        无 key 的窗口：</span><br><span class="hljs-comment">            stream</span><br><span class="hljs-comment">                .windowAll(WindowAssigner)  // 不分组，所有数据应用于窗口</span><br><span class="hljs-comment">                .reduce/aggregate/process() // 窗口处理函数；触发器和清除器可选</span><br><span class="hljs-comment">         */</span><br>        KeyedStream&lt;WebSite, String&gt; keyedStream = waterMarkStream.keyBy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeySelector</span>&lt;WebSite, String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getKey</span><span class="hljs-params">(WebSite webSite)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-keyword">return</span> webSite.getMethod();<br>            &#125;<br>        &#125;);<br>        keyedStream<br>                .window(TumblingEventTimeWindows.of(Time.seconds(<span class="hljs-number">10</span>)))<br>                <span class="hljs-comment">// .trigger()</span><br>                .process(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessWindowFunction</span>&lt;WebSite, Tuple2&lt;String, Integer&gt;, String, TimeWindow&gt;() &#123;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(String key, Context context, Iterable&lt;WebSite&gt; elements, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> Iterators.size(elements.iterator());<br>                        out.collect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Tuple2</span>&lt;&gt;(key, count));<br>                        System.out.println(<span class="hljs-string">&quot;key=&quot;</span> + key + <span class="hljs-string">&quot;;count=&quot;</span> + count);<br>                    &#125;<br>                &#125;);<br>        <span class="hljs-comment">// webSiteDataStream.print();</span><br>        <span class="hljs-comment">// keyedStream.print();</span><br>        <span class="hljs-type">JobExecutionResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> env.execute();<br>        <span class="hljs-comment">// System.out.println(result);</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        窗口把数据流切成若干块，触发器决定什么时候对切块进行计算，聚合函数是计算的逻辑!</span><br><span class="hljs-comment">        窗口函数：</span><br><span class="hljs-comment">            reduce</span><br><span class="hljs-comment">            aggregate，更高级的方法，重写一些函数</span><br><span class="hljs-comment">            process，最高级的方法，对窗口内数据的处理灵活度更高</span><br><span class="hljs-comment">        增量聚合：</span><br><span class="hljs-comment">            reduce, aggregate 可以指定多个聚合函数，依次执行（传参可以传多个）</span><br><span class="hljs-comment">        重写触发器</span><br><span class="hljs-comment">            实现几个方法</span><br><span class="hljs-comment">            EventTimeTrigger默认触发器。一旦水印通过窗口的末端，此触发器便会触发</span><br><span class="hljs-comment">        Evictor</span><br><span class="hljs-comment">            窗口被销毁的时候调用？没错吧</span><br><span class="hljs-comment">        允许延迟</span><br><span class="hljs-comment">            默认为0，也就是超过水印的数据被丢了，但是也可以不丢</span><br><span class="hljs-comment">            allowedLateness(&lt;时间&gt;)，允许多长时间以内的延迟数据，</span><br><span class="hljs-comment">            并且制定处理函数 &lt;windowed transformation&gt;</span><br><span class="hljs-comment">        允许开启后，可以获取迟到的流</span><br><span class="hljs-comment">            sideOutputLateData</span><br><span class="hljs-comment">            当指定的允许延迟大于0时，在水印通过窗口末尾之后，将保留窗口及其内容。</span><br><span class="hljs-comment">            在这些情况下，当延迟但未丢弃的元素到达时，可能会触发该窗口的另一次触发。</span><br><span class="hljs-comment">            这些触发称为late firings。因为要等待，假设真有延迟，还是要处理的!</span><br><span class="hljs-comment">        连续窗口操作</span><br><span class="hljs-comment">            window 处理后的流，可以反复被 window</span><br><span class="hljs-comment">            上游的水印也会被发到下游，一个下游收来自多个上游的水印，取最小值</span><br><span class="hljs-comment">        考虑</span><br><span class="hljs-comment">            窗口可能很长，滚动窗口，flink 会为其准备一个副本。对于滚动窗口，元素有</span><br><span class="hljs-comment">            多个副本，如果设置1天的滑动窗口和1秒的滚动频率!将大大浪费资源!</span><br><span class="hljs-comment">            此外：ReduceFunction、AggregateFunction对于窗口内的元素，可以快速聚合，而</span><br><span class="hljs-comment">            ProcessWindowFunction 需要等到窗口内的所有元素到齐，才能计算。前两者可以</span><br><span class="hljs-comment">            减少存储的成本。Evictor 也是，需要等所有元素到齐</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">窗口 join</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest9</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        stream</span><br><span class="hljs-comment">            .join(otherStream)</span><br><span class="hljs-comment">            .where(&lt;KeySelector&gt;)</span><br><span class="hljs-comment">            .equalTo(&lt;KeySelector&gt;)</span><br><span class="hljs-comment">            .window(&lt;WindowAssigner&gt;)</span><br><span class="hljs-comment">            .apply(&lt;JoinFunction&gt;)</span><br><span class="hljs-comment">        一般用法</span><br><span class="hljs-comment">        1. 连接是内连接，inner join,双方匹配才有事件出来</span><br><span class="hljs-comment">        2. 匹配上了，时间戳取两者的最大值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        KeyedProcessFunction 额外的重写功能和计时器功能</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.createLocalEnvironment();<br>        DataStream&lt;String&gt; text1 = env.readTextFile(<span class="hljs-string">&quot;stream.txt&quot;</span>);<br>        DataStream&lt;String&gt; text2 = env.readTextFile(<span class="hljs-string">&quot;stream.txt&quot;</span>);<br>        text1.join(text2)<br>                .where(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeySelector</span>&lt;String, Object&gt;() &#123;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getKey</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>                &#125;)<br>                .equalTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeySelector</span>&lt;String, Object&gt;() &#123;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getKey</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>                &#125;)<br>                .window(TumblingEventTimeWindows.of(Time.seconds(<span class="hljs-number">2</span>)))<br>                .apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JoinFunction</span>&lt;String, String, Object&gt;() &#123;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">join</span><span class="hljs-params">(String s, String s2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>                &#125;);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CountWithTimestamp</span> &#123;<br>    <span class="hljs-keyword">public</span> String key;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> count;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> lastModified;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CountWithTimeoutFunction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">KeyedProcessFunction</span>&lt;Tuple, Tuple2&lt;String, String&gt;, Tuple2&lt;String, Long&gt;&gt; &#123;<br>    <span class="hljs-keyword">private</span> ValueState&lt;CountWithTimestamp&gt; state;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(Configuration parameters)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        state = getRuntimeContext().getState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueStateDescriptor</span>&lt;&gt;(<span class="hljs-string">&quot;myState&quot;</span>, CountWithTimestamp.class));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processElement</span><span class="hljs-params">(Tuple2&lt;String, String&gt; value, Context ctx, Collector&lt;Tuple2&lt;String, Long&gt;&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">CountWithTimestamp</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> state.value();<br>        <span class="hljs-keyword">if</span> (current == <span class="hljs-literal">null</span>) &#123;<br>            current = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountWithTimestamp</span>();<br>            current.key = value.f0;<br>        &#125;<br>        <span class="hljs-comment">// update the state&#x27;s count</span><br>        current.count++;<br>        <span class="hljs-comment">// set the state&#x27;s timestamp to the record&#x27;s assigned event time timestamp</span><br>        current.lastModified = ctx.timestamp();<br>        <span class="hljs-comment">// write the state back</span><br>        state.update(current);<br>        <span class="hljs-comment">// schedule the next timer 60 seconds from the current event time</span><br>        ctx.timerService().registerEventTimeTimer(current.lastModified + <span class="hljs-number">60000</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onTimer</span><span class="hljs-params">(<span class="hljs-type">long</span> timestamp, OnTimerContext ctx, Collector&lt;Tuple2&lt;String, Long&gt;&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">CountWithTimestamp</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> state.value();<br>        <span class="hljs-comment">// check if this is an outdated timer or the latest timer</span><br>        <span class="hljs-keyword">if</span> (timestamp == result.lastModified + <span class="hljs-number">60000</span>) &#123;<br>            <span class="hljs-comment">// emit the state on timeout</span><br>            out.collect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Tuple2</span>&lt;String, Long&gt;(result.key, result.count));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实时计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink文档学习2</title>
    <link href="/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A02/"/>
    <url>/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A02/</url>
    
    <content type="html"><![CDATA[<h1 id="有状态的流计算"><a href="#有状态的流计算" class="headerlink" title="有状态的流计算"></a>有状态的流计算</h1><p>flink 状态<br>怎么理解状态？<br>首先状态的恢复，需要一个持久化的存储。只能存储在磁盘而不是内存<br>flink 状态就是一个全局变量，猜测：flatMap 被发到各个机器上执行，有些编程环境需要有全局变量来支持<br>同样，可以设置状态的过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="hljs-comment">//        env.fromElements(Tuple2.of(1L, 3L), Tuple2.of(1L, 5L), Tuple2.of(1L, 7L), Tuple2.of(1L, 4L), Tuple2.of(1L, 2L))</span><br><span class="hljs-comment">//                .keyBy(value -&gt; value.f0)</span><br><span class="hljs-comment">//                .flatMap(new CountWindowAverage())</span><br><span class="hljs-comment">//                .print();</span><br><span class="hljs-comment">//        env.execute();</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        状态的过期时间</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">StateTtlConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> StateTtlConfig<br>                .newBuilder(Time.seconds(<span class="hljs-number">1</span>))<br>                <span class="hljs-comment">// 什么时候更新 TTL？创建、写、或者读的时候</span><br>                .setUpdateType(StateTtlConfig.UpdateType.OnCreateAndWrite)<br>                <span class="hljs-comment">// 变量已经过期了，能否继续使用？NeverReturnExpired</span><br>                .setStateVisibility(StateTtlConfig.StateVisibility.NeverReturnExpired)<br>                <span class="hljs-comment">// 禁用后台清理，即使它已经过期</span><br>                .disableCleanupInBackground()<br>                .cleanupInRocksdbCompactFilter(<span class="hljs-number">1000</span>)<br>                .build();<br>        ValueStateDescriptor&lt;String&gt; descriptor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueStateDescriptor</span>&lt;String&gt;(<br>                <span class="hljs-string">&quot;text statue&quot;</span>,<br>                String.class<br>        );<br>        <span class="hljs-comment">// 给状态变量设置一些配置</span><br>        descriptor.enableTimeToLive(config);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>RichFlatMapFunction<br>相比于普通的 Map，有 open 和 close 函数，可以做一些额外的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CountWindowAverage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RichFlatMapFunction</span>&lt;Tuple2&lt;Long, Long&gt;, Tuple2&lt;Long, Long&gt;&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> ValueState&lt;Tuple2&lt;Long, Long&gt;&gt; sum;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(Configuration parameters)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 初始化的操作</span><br>        ValueStateDescriptor&lt;Tuple2&lt;Long, Long&gt;&gt; descriptor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueStateDescriptor</span>&lt;&gt;(<br>                <span class="hljs-string">&quot;average&quot;</span>,<br>                TypeInformation.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeHint</span>&lt;Tuple2&lt;Long, Long&gt;&gt;() &#123;<br>                &#125;),<br>                Tuple2.of(<span class="hljs-number">0L</span>, <span class="hljs-number">0L</span>) <span class="hljs-comment">// 每次清空后都是这个值</span><br>        );<br>        <span class="hljs-comment">// 状态是可以通过其它客户端监控的，设置查询 ID</span><br>        descriptor.setQueryable(<span class="hljs-string">&quot;query-id&quot;</span>);<br>        sum = getRuntimeContext().getState(descriptor);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flatMap</span><span class="hljs-params">(Tuple2&lt;Long, Long&gt; input, Collector&lt;Tuple2&lt;Long, Long&gt;&gt; collector)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Tuple2&lt;Long, Long&gt; currentSum = sum.value();<br>        currentSum.f0 += <span class="hljs-number">1</span>;<span class="hljs-comment">//个数</span><br>        currentSum.f1 += input.f1;<br>        sum.update(currentSum);<br>        <span class="hljs-keyword">if</span> (currentSum.f0 &gt;= <span class="hljs-number">2</span>) &#123;<br>            collector.collect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Tuple2</span>&lt;Long, Long&gt;(input.f0, currentSum.f1 / currentSum.f0));<br>            sum.clear();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="checkpoint"><a href="#checkpoint" class="headerlink" title="checkpoint"></a>checkpoint</h2><p>实现了 CheckpointedFunction 接口，示例：<br>输出的时候，缓冲一段输出<br>每次 checkpoint 屏障来时，把缓冲区的数据 save 到外部<br>程序恢复的时候，把外部的数据再恢复到内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferingSink</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SinkFunction</span>&lt;Tuple2&lt;String, Integer&gt;&gt;, CheckpointedFunction &#123;<br>    <span class="hljs-comment">// 阈值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> threshold;<br>    <span class="hljs-comment">// 缓冲数组</span><br>    <span class="hljs-keyword">private</span> List&lt;Tuple2&lt;String, Integer&gt;&gt; bufferedElements;<br>    <span class="hljs-comment">// 状态</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> ListState&lt;Tuple2&lt;String, Integer&gt;&gt; checkpointedState;<br><br>    BufferingSink(<span class="hljs-type">int</span> threshold) &#123;<br>        <span class="hljs-built_in">this</span>.threshold = threshold;<br>        <span class="hljs-built_in">this</span>.bufferedElements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">snapshotState</span><span class="hljs-params">(FunctionSnapshotContext context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 必须执行检查点时，该方法都会被调用</span><br>        checkpointedState.clear();<br>        <span class="hljs-keyword">for</span> (Tuple2&lt;String, Integer&gt; element : bufferedElements) &#123;<br>            checkpointedState.add(element);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initializeState</span><span class="hljs-params">(FunctionInitializationContext context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ListStateDescriptor&lt;Tuple2&lt;String, Integer&gt;&gt; descriptor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListStateDescriptor</span>&lt;Tuple2&lt;String, Integer&gt;&gt;(<br>                <span class="hljs-string">&quot;buffered-elements&quot;</span>,<br>                TypeInformation.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeHint</span>&lt;Tuple2&lt;String, Integer&gt;&gt;() &#123;<br>                &#125;)<br>        );<br>        checkpointedState = context.getOperatorStateStore().getListState(descriptor);<br>        <span class="hljs-comment">// checkpointedState = context.getOperatorStateStore().getUnionListState(descriptor);</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        For example, to use list state with the union redistribution scheme on restore, access the state by using getUnionListState(descriptor). If the method name does not contain the redistribution pattern, e.g. getListState(descriptor), it simply implies that the basic even-split redistribution scheme will be used.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (context.isRestored()) &#123;<br>            <span class="hljs-keyword">for</span> (Tuple2&lt;String, Integer&gt; element : checkpointedState.get()) &#123;<br>                bufferedElements.add(element);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Tuple2&lt;String, Integer&gt; value, Context context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        bufferedElements.add(value);<br>        <span class="hljs-keyword">if</span> (bufferedElements.size() == threshold) &#123;<br>            <span class="hljs-keyword">for</span> (Tuple2&lt;String, Integer&gt; element : bufferedElements) &#123;<br>                <span class="hljs-comment">// sink 输出</span><br>            &#125;<br>            bufferedElements.clear();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="广播状态"><a href="#广播状态" class="headerlink" title="广播状态"></a>广播状态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">广播状态</span><br><span class="hljs-comment">一组流用一个规则进行筛选，例如过滤，但是我需要动态的设置规则，</span><br><span class="hljs-comment">把规则写到文件里面，让程序动态读取（有点类似）</span><br><span class="hljs-comment">不懂？</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest5</span> &#123;<br><br>    <span class="hljs-keyword">static</span> MapStateDescriptor&lt;String, Rule&gt; ruleMapStateDescriptor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapStateDescriptor</span>&lt;String, Rule&gt;(<br>            <span class="hljs-string">&quot;MapStateDescriptor&quot;</span>,<br>            BasicTypeInfo.STRING_TYPE_INFO,<br>            TypeInformation.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeHint</span>&lt;Rule&gt;() &#123;<br>            &#125;)<br>    );<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        DataStream&lt;Item&gt; itemDataStream = env.fromElements(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(Shape.Rectangle, Color.Black),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(Shape.Rectangle, Color.Blue),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(Shape.Circular, Color.White)<br>        );<br>        KeyedStream&lt;Item, Color&gt; colorKeyedStream = itemDataStream<br>                .keyBy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeySelector</span>&lt;Item, Color&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Color <span class="hljs-title function_">getKey</span><span class="hljs-params">(Item item)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        <span class="hljs-keyword">return</span> item.color;<br>                    &#125;<br>                &#125;);<br>        DataStream&lt;Rule&gt; ruleDataStream = env.fromElements(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rule</span>()<br>        );<br>        BroadcastStream&lt;Rule&gt; ruleBroadcastStream = ruleDataStream.broadcast(ruleMapStateDescriptor);<br>        <span class="hljs-comment">// 1. 连接两个流</span><br>        <span class="hljs-comment">// 2. 指定匹配逻辑</span><br>        DataStream&lt;String&gt; output = colorKeyedStream<br>                .connect(ruleBroadcastStream)<br>                .process(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyedBroadcastProcessFunction</span>&lt;Object, Item, Rule, String&gt;() &#123;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processElement</span><span class="hljs-params">(Item value, ReadOnlyContext ctx, Collector&lt;String&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                    &#125;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBroadcastElement</span><span class="hljs-params">(Rule value, Context ctx, Collector&lt;String&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                    &#125;<br>                &#125;);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> &#123;<br>    Shape shape;<br>    Color color;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Item</span><span class="hljs-params">(Shape shape, Color color)</span> &#123;<br>        <span class="hljs-built_in">this</span>.shape = shape;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Shape</span> &#123;<br>    Rectangle,<br>    Circular;<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>    Blue,<br>    Black,<br>    White;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rule</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="检查点机制"><a href="#检查点机制" class="headerlink" title="检查点机制"></a>检查点机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">CheckPoint，检查点机制</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-comment">// 每 1000 ms 检查一次</span><br>        env.enableCheckpointing(<span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 至少一次，完全一次；默认是完全一次</span><br>        env.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE);<br>        <span class="hljs-comment">// 两次检查点至少有 500 ms 间隔</span><br>        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(<span class="hljs-number">500</span>);<br>        <span class="hljs-comment">// 防止检查点消耗CPU，检查时间超时则丢弃</span><br>        env.getCheckpointConfig().setCheckpointTimeout(<span class="hljs-number">60000</span>);<br>        <span class="hljs-comment">// 最大并行度</span><br>        env.getCheckpointConfig().setMaxConcurrentCheckpoints(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        flink-conf.yaml 也可以在配置文件中配置</span><br><span class="hljs-comment">        迭代作业的检查点异常需要强制指定</span><br><span class="hljs-comment">        env.enableCheckpointing(interval, CheckpointingMode.EXACTLY_ONCE, force = true)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        flink 支持自定义序列化</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 可以指定状态保存在哪</span><br>        <span class="hljs-comment">// env.setStateBackend(new FsStateBackend());</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实时计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flink文档学习1</title>
    <link href="/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A01/"/>
    <url>/2021/04/10/flink/flink%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A01/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>flink官网文档学习记录<br><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/dev/datastream_api.html">官方文档</a></p><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>基本的流式程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-comment">// 默认是按行读取文件</span><br>        DataStream&lt;String&gt; text = env.readTextFile(<span class="hljs-string">&quot;stream.txt&quot;</span>);<br>        <span class="hljs-comment">// 把每行读取的文件反序列化为对象</span><br>        DataStream&lt;WebSite&gt; webSiteDataStream = text.map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapFunction</span>&lt;String, WebSite&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> WebSite <span class="hljs-title function_">map</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-keyword">return</span> JSON.parseObject(s, WebSite.class);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 输出的顺序不一样，有多个线程在读取文件</span><br>        webSiteDataStream.print();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">JobExecutionResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> env.execute(<span class="hljs-string">&quot;data stream test&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        JobExecutionResult 返回执行时间和计算结果（如果有的话）</span><br><span class="hljs-comment">        如果不想等待作业完成，可以调用 executeAsync() 获取异步结果</span><br><span class="hljs-comment">        程序的执行：</span><br><span class="hljs-comment">        所有的 flink 程序都是异步执行的，执行 main 方法的时候，不会直接进行数据加载和转换。而是创建数据</span><br><span class="hljs-comment">        流图（DataFlow），最后通过 execute 显示执行</span><br><span class="hljs-comment">        好处：如果是构建的复杂的程序， flink 会帮你列成整体计划并且优化执行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">JobClient</span> <span class="hljs-variable">jobClient</span> <span class="hljs-operator">=</span> env.executeAsync();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">JobExecutionResult</span> <span class="hljs-variable">jobExecutionResult</span> <span class="hljs-operator">=</span> jobClient.getJobExecutionResult().get();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        数据源：</span><br><span class="hljs-comment">        可以自己实现 SourceFunction，ParallelSourceFunction，RichParallelSourceFunction</span><br><span class="hljs-comment">        来编写自己的数据源</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        迭代次数：IterativeStream，可以反复的迭代，设置一个停止迭代的条件 closeWith</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        控制延迟</span><br><span class="hljs-comment">        可以通过配置文件来设置缓冲区大小（数据不是1v1发送，而是累积到一定数量再发送），可以在客户端设置缓冲的超时时间</span><br><span class="hljs-comment">        未满但超时也可以发送</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        调试</span><br><span class="hljs-comment">        createLocalEnvironment() 可以在本地打断点并调试</span><br><span class="hljs-comment">        输出可以使用 DataStreamUtils 工具</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        env.setBufferTimeout(<span class="hljs-number">100</span>);<br>        env.setBufferTimeout(-<span class="hljs-number">1</span>); <span class="hljs-comment">// 消除超时时间，只等缓冲区满</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="执行模式"><a href="#执行模式" class="headerlink" title="执行模式"></a>执行模式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest2</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    执行模式</span><br><span class="hljs-comment">    无论不同的处理模式如何，最后产出的总结果是相同的</span><br><span class="hljs-comment">    STREAMING 模式：产生动态更新，数据是增量更新</span><br><span class="hljs-comment">    BATCH 模式：只产生一个结果。不就是实时和离线的区别</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        RuntimeExecutionMode.STREAMING</span><br><span class="hljs-comment">        RuntimeExecutionMode.BATCH</span><br><span class="hljs-comment">        RuntimeExecutionMode.AUTOMATIC</span><br><span class="hljs-comment">        实时，离线和自动。建议不写死，而是在命令行启动程序时执行</span><br><span class="hljs-comment">        flink run -Dexecution.runtime-mode=BATCH ...</span><br><span class="hljs-comment">         */</span><br>        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        不同模式的具体区别在哪？首先理解执行原理</span><br><span class="hljs-comment">        对于以下的任务：</span><br><span class="hljs-comment">        source.name(&quot;source&quot;)</span><br><span class="hljs-comment">            .map(...).name(&quot;map1&quot;)</span><br><span class="hljs-comment">            .map(...).name(&quot;map2&quot;)</span><br><span class="hljs-comment">            .rebalance()   -----------&gt; 分割线</span><br><span class="hljs-comment">            .map(...).name(&quot;map3&quot;)</span><br><span class="hljs-comment">            .map(...).name(&quot;map4&quot;)</span><br><span class="hljs-comment">            .keyBy((value) -&gt; value)   -----------&gt; 分割线</span><br><span class="hljs-comment">            .map(...).name(&quot;map5&quot;)</span><br><span class="hljs-comment">            .map(...).name(&quot;map6&quot;)</span><br><span class="hljs-comment">            .sinkTo(...).name(&quot;sink&quot;);</span><br><span class="hljs-comment">        对于普通的 map 函数，分开并行计算完全没问题，但是对于 keyBy 等算子，后一步强依赖于前一步的结果!</span><br><span class="hljs-comment">        计算结果会经过网络传输汇总的，对于以上的任务，flink 将任务分组：</span><br><span class="hljs-comment">        - 任务1，source、map1、map2</span><br><span class="hljs-comment">        - 任务2，map3、map4</span><br><span class="hljs-comment">        - 任务3，map5、map6 和 sink</span><br><span class="hljs-comment">        任务 1~2，2~3 会有大量的网络传输，交换数据</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        STREAMING 模式，1~2、2~3 之间需要缓存数据，临时存储（等待可能的延迟数据到达），会增加整个处理的延迟</span><br><span class="hljs-comment">            输出是增量、累计的</span><br><span class="hljs-comment">        BATCH 模式，由于是确定步骤的，阶段1 -&gt; 阶段2 -&gt; 分批次有序进行，也节约了资源</span><br><span class="hljs-comment">            输出只有最后的值</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="事件时间"><a href="#事件时间" class="headerlink" title="事件时间"></a>事件时间</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStreamTest3</span> &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    时间：</span><br><span class="hljs-comment">    - 事件时间，事件产生的时间</span><br><span class="hljs-comment">    - 摄取时间，flink 读取事件的时间/事件进入 flink 系统的时间</span><br><span class="hljs-comment">    - 处理时间，flink 算子处理事件的时间</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StreamExecutionEnvironment</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        方法被废弃了，默认是 EventTime</span><br><span class="hljs-comment">        无论用的什么时间，需要自己定义 WatermarkStrategy，</span><br><span class="hljs-comment">        你需要告诉系统 assignTimestampsAndWatermarks：</span><br><span class="hljs-comment">        时间和水印，也就是 WatermarkGenerator：</span><br><span class="hljs-comment">        如果要使用其它两个时间，需要自己定义：</span><br><span class="hljs-comment">        1. 时间</span><br><span class="hljs-comment">        2. Watermark（何时去计算）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        OK，如果这个数据没有携带时间？当前水印是空的，可以标记为闲置</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        可以在数据源上指定（推荐）</span><br><span class="hljs-comment">        也可以在操作算子的时候指定</span><br><span class="hljs-comment">         */</span><br>        DataStream&lt;String&gt; text = env.readTextFile(<span class="hljs-string">&quot;stream.txt&quot;</span>);<br>        <span class="hljs-comment">// 把每行读取的文件反序列化为对象</span><br>        DataStream&lt;WebSite&gt; webSiteDataStream = text.map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapFunction</span>&lt;String, WebSite&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> WebSite <span class="hljs-title function_">map</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-keyword">return</span> JSON.parseObject(s, WebSite.class);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 指定水印策略</span><br>        <span class="hljs-comment">// 1. 最大延迟 10 秒 2. 当前时间是对象中的时间</span><br>        DataStream&lt;WebSite&gt; withTimestampsAndWatermarks = webSiteDataStream.assignTimestampsAndWatermarks(<br>                WatermarkStrategy<br>                        .&lt;WebSite&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="hljs-number">10</span>))<br>                        <span class="hljs-comment">// 第二个参数 ts 干啥的？</span><br>                        .withTimestampAssigner((record, ts) -&gt; &#123;<br>                            <span class="hljs-keyword">return</span> record.getEventTime();<br>                        &#125;)<br>                        .withIdleness(Duration.ofMinutes(<span class="hljs-number">5</span>))<br>        );<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        WatermarkStrategy.forBoundedOutOfOrderness(Duration.ofSeconds(2));</span><br><span class="hljs-comment">        // 无延迟，什么时候无延迟?当前时间就是处理时间的时候</span><br><span class="hljs-comment">        // 内部就是调用 forBoundedOutOfOrderness，传参时间为 0 而已</span><br><span class="hljs-comment">        WatermarkStrategy.forMonotonousTimestamps();</span><br><span class="hljs-comment">         */</span><br>        withTimestampsAndWatermarks<br>                .keyBy((event) -&gt; event.getIp())<br>                .window(TumblingEventTimeWindows.of(Time.seconds(<span class="hljs-number">10</span>)));<br><span class="hljs-comment">//                .reduce()</span><br><span class="hljs-comment">//                .addSink()</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="水位线"><a href="#水位线" class="headerlink" title="水位线"></a>水位线</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 固定超时的水印</span><br><span class="hljs-comment">// 这段代码就是源码 BoundedOutOfOrdernessWatermarks 的实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BoundedOutOfOrdernessGenerator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WatermarkGenerator</span>&lt;WebSite&gt; &#123;<br>    <span class="hljs-comment">// 最大超时时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxOutOfOrderness</span> <span class="hljs-operator">=</span> <span class="hljs-number">3500</span>;<br>    <span class="hljs-comment">// flink 系统感知到的时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> currentMaxTimestamp;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(WebSite webSite, <span class="hljs-type">long</span> eventTimestamp, WatermarkOutput watermarkOutput)</span> &#123;<br>        currentMaxTimestamp = Math.max(currentMaxTimestamp, eventTimestamp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPeriodicEmit</span><span class="hljs-params">(WatermarkOutput watermarkOutput)</span> &#123;<br>        watermarkOutput.emitWatermark(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermark</span>(currentMaxTimestamp - maxOutOfOrderness - <span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实时计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SparkSQL</title>
    <link href="/2019/01/01/hadoop/SparkSQL/"/>
    <url>/2019/01/01/hadoop/SparkSQL/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spark SQL踩坑</p><p>SparkSQL就是将大量的数据加载到内存中（本身这些数据都是规则的，相当于MySQL数据库中的表一样），然后用SQL语句进行查询，查询的结果也可以再导入MySQL</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装MySQL，我最开始是在Windows上安装的MySQL，Windows和Linux虚拟机能ping通，无奈，程序跑起来Linux上没有权限访问Windows上的数据库，试了很久没搞定，于是就在Linux上装MySQL，和Spark程序在一台节点上</p><p>准备一些数据</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>小明 <span class="hljs-number">22</span><br><span class="hljs-symbol">2 </span>小红 <span class="hljs-number">21</span><br><span class="hljs-symbol">3 </span>小张 <span class="hljs-number">25</span><br><span class="hljs-symbol">4 </span>小王 <span class="hljs-number">19</span><br><span class="hljs-symbol">5 </span>小陈 <span class="hljs-number">17</span><br><span class="hljs-symbol">6 </span>zc <span class="hljs-number">18</span><br><span class="hljs-symbol">7 </span>pang <span class="hljs-number">39</span><br><span class="hljs-symbol">8 </span>yuan <span class="hljs-number">28</span><br><span class="hljs-symbol">9 </span>小文 <span class="hljs-number">10</span><br><span class="hljs-symbol">10 </span>liu <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>有规则的数据，上传数据到HDFS上</p><span id="more"></span><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> java.util.<span class="hljs-type">Properties</span><br><span class="hljs-keyword">import</span> org.apache.spark.rdd.<span class="hljs-type">RDD</span><br><span class="hljs-keyword">import</span> org.apache.spark.sql.&#123;<span class="hljs-type">DataFrame</span>, <span class="hljs-type">SparkSession</span>&#125;<br><span class="hljs-comment">//创建样例类Student</span><br><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params">id: <span class="hljs-type">Int</span>, name: <span class="hljs-type">String</span>, age: <span class="hljs-type">Int</span></span>)</span><br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">SparkSqlToMysql</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>    <span class="hljs-comment">//1、创建sparkSession对象</span><br>    <span class="hljs-keyword">val</span> spark: <span class="hljs-type">SparkSession</span> = <span class="hljs-type">SparkSession</span>.builder()<br>      .appName(<span class="hljs-string">&quot;SparkSqlToMysql&quot;</span>)<br>      .getOrCreate()<br>    <span class="hljs-comment">//2、读取数据</span><br>    <span class="hljs-keyword">val</span> data: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>] = spark.sparkContext.textFile(<span class="hljs-string">&quot;hdfs://hadoop01:9000/student&quot;</span>)<br>    <span class="hljs-comment">//3、切分每一行,</span><br>    <span class="hljs-keyword">val</span> arrRDD: <span class="hljs-type">RDD</span>[<span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]] = data.map(_.split(<span class="hljs-string">&quot; &quot;</span>))<br>    <span class="hljs-comment">//4、RDD关联Student</span><br>    <span class="hljs-keyword">val</span> studentRDD: <span class="hljs-type">RDD</span>[<span class="hljs-type">Student</span>] = arrRDD.map(x =&gt; <span class="hljs-type">Student</span>(x(<span class="hljs-number">0</span>).toInt, x(<span class="hljs-number">1</span>), x(<span class="hljs-number">2</span>).toInt))<br>    <span class="hljs-comment">//导入隐式转换</span><br>    <span class="hljs-keyword">import</span> spark.implicits._<br>    <span class="hljs-comment">//5、将RDD转换成DataFrame</span><br>    <span class="hljs-keyword">val</span> studentDF: <span class="hljs-type">DataFrame</span> = studentRDD.toDF()<br>    <span class="hljs-comment">//6、将DataFrame注册成表</span><br>    studentDF.createOrReplaceTempView(<span class="hljs-string">&quot;student&quot;</span>)<br>    <span class="hljs-comment">//7、操作student表 ,按照年龄进行降序排列</span><br>    <span class="hljs-keyword">val</span> resultDF: <span class="hljs-type">DataFrame</span> = spark.sql(<span class="hljs-string">&quot;select * from student order by age desc&quot;</span>)<br>    <span class="hljs-comment">//8、把结果保存在mysql表中</span><br>    <span class="hljs-comment">//创建Properties对象，配置连接mysql的用户名和密码</span><br>    <span class="hljs-keyword">val</span> prop = <span class="hljs-keyword">new</span> <span class="hljs-type">Properties</span>()<br>    prop.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>)<br>    prop.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>)<br>    resultDF.write.jdbc(<span class="hljs-string">&quot;jdbc:mysql://hadoop01:3306/spark?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>, <span class="hljs-string">&quot;student&quot;</span>, prop)<br>    <span class="hljs-comment">//写入mysql时，可以配置插入mode，overwrite覆盖，append追加，ignore忽略，error默认表存在报错</span><br>    <span class="hljs-comment">//resultDF.write.mode(SaveMode.Overwrite).jdbc(&quot;jdbc:mysql://192.168.200.150:3306/spark&quot;,&quot;student&quot;,prop)</span><br>    spark.stop()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数textFile的功能特别强大，文件路径支持通配符，比如你要一次性导入文件夹，或者多个文件只需要</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">textFile</span><span class="hljs-params">(/xxx/*/*)</span></span><br></code></pre></td></tr></table></figure><p>就可以全部导入RDD中</p><h3 id="打包运行踩坑"><a href="#打包运行踩坑" class="headerlink" title="打包运行踩坑"></a>打包运行踩坑</h3><p>运行，指定MySQL连接驱动包</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">.<span class="hljs-regexp">/spark-submit --class demo03.SparkSqlToMysql --executor-memory 500m --jars /</span>root<span class="hljs-regexp">/Desktop/my</span>sql-connector-java-<span class="hljs-number">5.1</span>.<span class="hljs-number">38</span>.jar --driver-<span class="hljs-keyword">class</span>-path <span class="hljs-regexp">/root/</span>Desktop<span class="hljs-regexp">/mysql-connector-java-5.1.38.jar /</span>root<span class="hljs-regexp">/Desktop/</span>scalaDemo.jar<br></code></pre></td></tr></table></figure><p>也可以运行spark-shell</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">.<span class="hljs-regexp">/spark-shell --executor-memory 500m --jars /</span>root<span class="hljs-regexp">/Desktop/my</span>sql-connector-java-<span class="hljs-number">5.1</span>.<span class="hljs-number">38</span>.jar --driver-<span class="hljs-keyword">class</span>-path <span class="hljs-regexp">/root/</span>Desktop/mysql-connector-java-<span class="hljs-number">5.1</span>.<span class="hljs-number">38</span>.jar<br></code></pre></td></tr></table></figure><p>通过shell直接操作</p>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spark入门</title>
    <link href="/2019/01/01/hadoop/Spark%E5%85%A5%E9%97%A8/"/>
    <url>/2019/01/01/hadoop/Spark%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spark入门学习</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装scala"><a href="#安装scala" class="headerlink" title="安装scala"></a>安装scala</h4><p>下载<code>scala-2.12.7.tgz</code>，解压&amp;&amp;环境变量</p><h4 id="安装Spark"><a href="#安装Spark" class="headerlink" title="安装Spark"></a>安装Spark</h4><p>下载<code>spark-2.4.0-bin-hadoop2.7.tgz</code>，解压&amp;&amp;环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># scala</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">SCALA_HOME</span>=/usr/scala<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$SCALA_HOME/bin<br><span class="hljs-comment"># spark</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">SPARK_HOME</span>=/hadoop/spark-2.4.0<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$SPARK_HOME/bin<br></code></pre></td></tr></table></figure><h5 id="spark-env-sh"><a href="#spark-env-sh" class="headerlink" title="spark-env.sh"></a>spark-env.sh</h5><p>先重命名<code>spark-env.sh.template</code>，vim增加如下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">JAVA_HOME</span>=/usr/java/jdk1.<span class="hljs-number">8.0</span>_171<br><span class="hljs-attr">SCALA_HOME</span>=/usr/scala<br><span class="hljs-attr">HADOOP_HOME</span>=/hadoop-<span class="hljs-number">2.8</span>.<span class="hljs-number">4</span><br><span class="hljs-attr">HADOOP_CONF_DIR</span>=/hadoop/hadoop-<span class="hljs-number">2.8</span>.<span class="hljs-number">4</span>/etc/hadoop<br><span class="hljs-attr">SPARK_MASTER_IP</span>=hadoop01<br><span class="hljs-attr">SPARK_MASTER_PORT</span>=<span class="hljs-number">7077</span><br><span class="hljs-attr">SPARK_MASTER_WEBUI_PORT</span>=<span class="hljs-number">8080</span><br><span class="hljs-attr">SPARK_WORKER_CORES</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">SPARK_WORKER_MEMORY</span>=<span class="hljs-number">2</span>g<br><span class="hljs-attr">SPARK_WORKER_PORT</span>=<span class="hljs-number">7078</span><br><span class="hljs-attr">SPARK_WORKER_WEBUI_PORT</span>=<span class="hljs-number">8081</span><br><span class="hljs-attr">SPARK_WORKER_INSTANCES</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><span id="more"></span><h5 id="spark-defaults-conf"><a href="#spark-defaults-conf" class="headerlink" title="spark-defaults.conf"></a>spark-defaults.conf</h5><p><code>mv spark-defaults.conf.template spark-defaults.conf</code><br><code>vim spark-defaults.conf</code></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">spark.<span class="hljs-keyword">master</span>                     <span class="hljs-title">spark</span>://hadoop01:<span class="hljs-number">7077</span><br></code></pre></td></tr></table></figure><h5 id="slaves"><a href="#slaves" class="headerlink" title="slaves"></a>slaves</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mv slaves.<span class="hljs-keyword">template</span> slaves<br>vim slaves<br></code></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">hadoop02<br></code></pre></td></tr></table></figure><h5 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h5><p>在hadoop02上安装scala并且将hadoop01上的Spark目录拷贝到hadoop02</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">安装，环境变量配置略...<br>scp -r <span class="hljs-regexp">/hadoop/</span>spark-<span class="hljs-number">2.4</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/ hadoop02:/</span>hadoop/<br></code></pre></td></tr></table></figure><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/sbin/</span>start-all.sh<br></code></pre></td></tr></table></figure><p><code>jps</code>查看进程，发现多了Master节点和Worker节点，说明安装成功~，管理界面：<a href="http://hadoop01:8080/">http://hadoop01:8080/</a></p><h3 id="WordCount程序"><a href="#WordCount程序" class="headerlink" title="WordCount程序"></a>WordCount程序</h3><p>Windows上下载scala环境，IDEA下载scala插件，新建一个maven项目，将scala插件添加到项目中</p><h4 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">scala.version</span>&gt;</span>2.11<span class="hljs-tag">&lt;/<span class="hljs-name">scala.version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">spark.version</span>&gt;</span>2.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">spark.version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-core_$</span><span class="hljs-template-variable">&#123;scala.version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spark.version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-sql_$</span><span class="hljs-template-variable">&#123;scala.version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spark.version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-streaming_$</span><span class="hljs-template-variable">&#123;scala.version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spark.version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>scalaDemo<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!-- 这是个编译scala代码的 --&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.alchim31.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>scala-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>scala-compile-first<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>process-resources<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>add-source<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意plugin标签上一定要添加scala的插件，否则直接点maven-&gt;compile时，scala文件无法编译成class文件</p><h5 id="code"><a href="#code" class="headerlink" title="code"></a>code</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">WordCount</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>    <span class="hljs-keyword">val</span> conf = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkConf</span>().setAppName(<span class="hljs-string">&quot;WC&quot;</span>)<br>    <span class="hljs-keyword">val</span> sc = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkContext</span>(conf)<br>    <span class="hljs-keyword">val</span> line = sc.textFile(<span class="hljs-string">&quot;hdfs://hadoop01:9000/wc_test_02&quot;</span>)<br>    <span class="hljs-keyword">val</span> result = line.flatMap(_.split(<span class="hljs-string">&quot; &quot;</span>)).map((_, <span class="hljs-number">1</span>)).reduceByKey(_ + _)<br>    result.saveAsTextFile(<span class="hljs-string">&quot;hdfs://hadoop01:9000/spark/out2&quot;</span>)<br>    sc.stop()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后编译，打包，上传到linux，准备运行。。</p><h3 id="踩坑错误"><a href="#踩坑错误" class="headerlink" title="踩坑错误"></a>踩坑错误</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">Initial job has<span class="hljs-built_in"> not </span>accepted any resources;<span class="hljs-built_in"> check </span>your cluster UI to ensure that workers are registered<span class="hljs-built_in"> and </span>have sufficient resources<br></code></pre></td></tr></table></figure><p>搞了好几个小时，Spark太吃内存了吧，解决办法：</p><p>修改spark-env.sh</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">SPARK_WORKER_MEMORY</span>=<span class="hljs-number">800</span>M<br></code></pre></td></tr></table></figure><p>把内存搞小一点，然后运行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/spark-submit --class demo02.WordCount --executor-memory 500m /</span>root<span class="hljs-regexp">/Desktop/</span>scalaDemo.jar<br></code></pre></td></tr></table></figure><p>指定的内存要小于800m，然后就运行成功了，也没一点提示（不报错就是成功）。</p><p>结果</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name">brother</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<br>(<span class="hljs-name">hello</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span>)<br>(<span class="hljs-name">world</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<br>(<span class="hljs-name">spark</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<br>(<span class="hljs-name">hadoop</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>一个简单的Spark WordCount程序，比写MapReduce简单很多。</p><p>中途遇到问题，SparkSubmit进程为什么杀不死？kill也不行，最后进程太多，只能重启虚拟机来解决了</p>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HBase</title>
    <link href="/2018/11/03/hadoop/HBase/"/>
    <url>/2018/11/03/hadoop/HBase/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学习HBase</p><ul><li>HBase基础知识</li><li>HBase分布式搭建</li><li>HBase Shell</li><li>HBase的批量导入</li><li>HBase的Java API</li></ul><p>简介<br>高可靠、高性能、面向列、可伸缩的分布式存储系统。HBase利用HDFS作为底层的文件系统，利用MapReduce来处理数据，Zookeeper为协调工具</p><p>逻辑视图如下图所示：</p><p><img src="/images/hadoop_010.PNG" alt="hadoop_010"></p><p>数据模型，行</p><ul><li>每行有可排序关键字和任意列</li><li>字符串、二进制串都可以作为行键</li><li>表按照行键有序处理</li><li>可以只对一行上锁，对行的写操作是原子的</li></ul><p>数据模型，列</p><ul><li>列族，定义为“族：标签”</li><li>数据通过时间戳分版本</li><li>列族在建表后不能改变，但是一个列族中列标签可以任意增加</li></ul><span id="more"></span><p>系统总体结构图</p><p><img src="/images/hadoop_011.PNG" alt="hadoop_011"></p><ul><li>主从结构</li><li>可以有多个Master，但Zookeeper的选举机制保证有一个Master运行</li><li>HBase建立在HDFS之上</li></ul><h3 id="安装HBase"><a href="#安装HBase" class="headerlink" title="安装HBase"></a>安装HBase</h3><p>下载，<a href="http://mirrors.hust.edu.cn/apache/hbase/2.1.1/hbase-2.1.1-bin.tar.gz">http://mirrors.hust.edu.cn/apache/hbase/2.1.1/hbase-2.1.1-bin.tar.gz</a></p><p>复制到虚拟机，解压安装包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf hbase-<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>-bin.tar.gz<br></code></pre></td></tr></table></figure><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p><code>vim /etc/profile</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># hbase</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HBASE_HOME</span>=/hadoop/hbase-2.1.1<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$HBASE_HOME/bin<br></code></pre></td></tr></table></figure><p><code>source /etc/profile</code></p><h4 id="vim-hbase-env-sh"><a href="#vim-hbase-env-sh" class="headerlink" title="vim hbase-env.sh"></a>vim hbase-env.sh</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/usr/java/jdk1.8.0_171<br><span class="hljs-comment"># 设置由hbase自己管理zookeeper，不需要安装单独的zookeeper</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HBASE_MANAGES_ZK</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="vim-hbase-site-xml"><a href="#vim-hbase-site-xml" class="headerlink" title="vim hbase-site.xml"></a>vim hbase-site.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://hadoop01:9000/hbase<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.cluster.distributed<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.master<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop01<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop01,hadoop02<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="vim-regionservers"><a href="#vim-regionservers" class="headerlink" title="vim regionservers"></a>vim regionservers</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">hadoop02<br></code></pre></td></tr></table></figure><h4 id="拷贝已经配置好的机器"><a href="#拷贝已经配置好的机器" class="headerlink" title="拷贝已经配置好的机器"></a>拷贝已经配置好的机器</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp -r <span class="hljs-regexp">/hadoop/</span>hbase-<span class="hljs-number">2.1</span>.<span class="hljs-number">1</span> hadoop02:<span class="hljs-regexp">/hadoop/</span><br></code></pre></td></tr></table></figure><p>拷贝前可以删除HBASE_HOME下的docs目录</p><p>拷贝完后在hadoop02上配置一下环境变量</p><h4 id="启动HBase"><a href="#启动HBase" class="headerlink" title="启动HBase"></a>启动HBase</h4><p>进入bin目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./start-hbase.sh <br></code></pre></td></tr></table></figure><p>启动完成，查看HDFS下是否有hbase目录，发现没有，启动失败</p><h4 id="查看错误"><a href="#查看错误" class="headerlink" title="查看错误"></a>查看错误</h4><p>进入logs目录，查看文件<code>hbase-root-master-hadoop01</code>，发现错误</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.NoClassDefFoundError</span>: org/apache/htrace/SamplerBuilder<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.hdfs</span><span class="hljs-selector-class">.DFSClient</span>.&lt;init&gt;(DFSClient<span class="hljs-selector-class">.java</span>:<span class="hljs-number">644</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.hdfs</span><span class="hljs-selector-class">.DFSClient</span>.&lt;init&gt;(DFSClient<span class="hljs-selector-class">.java</span>:<span class="hljs-number">628</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.hdfs</span><span class="hljs-selector-class">.DistributedFileSystem</span><span class="hljs-selector-class">.initialize</span>(DistributedFileSystem<span class="hljs-selector-class">.java</span>:<span class="hljs-number">149</span>)<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.fs</span><span class="hljs-selector-class">.FileSystem</span><span class="hljs-selector-class">.createFileSystem</span>(FileSystem<span class="hljs-selector-class">.java</span>:<span class="hljs-number">2667</span>)<br></code></pre></td></tr></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>百度了一下，拷贝一下jar包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cp</span> /hadoop/hbase-<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>/lib/client-facing-thirdparty/htrace-core-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-incubating.jar /hadoop/hbase-<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>/lib/<br></code></pre></td></tr></table></figure><p>两个节点都执行这个命令，重新启动，OK，hbase目录有了</p><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><p>master</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7072 </span>ResourceManager<br><span class="hljs-symbol">16817 </span>HRegionServer<br><span class="hljs-symbol">6837 </span>SecondaryNameNode<br><span class="hljs-symbol">6358 </span>NameNode<br><span class="hljs-symbol">30118 </span>Jps<br><span class="hljs-symbol">25755 </span>HQuorumPeer<br><span class="hljs-symbol">28187 </span>HMaster<br><span class="hljs-symbol">30015 </span>HBaseConfTool<br></code></pre></td></tr></table></figure><p>slave</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7314 </span>NodeManager<br><span class="hljs-symbol">22612 </span>HQuorumPeer<br><span class="hljs-symbol">16362 </span>HRegionServer<br><span class="hljs-symbol">6858 </span>DataNode<br><span class="hljs-symbol">26079 </span>Jps<br></code></pre></td></tr></table></figure><p>一切正常</p><h3 id="Hbase-Shell"><a href="#Hbase-Shell" class="headerlink" title="Hbase Shell"></a>Hbase Shell</h3><p>提供了基本的增删改查，如下图所示：</p><p><img src="/images/hadoop_012.PNG" alt="hadoop_012"></p><h4 id="基本增删改查"><a href="#基本增删改查" class="headerlink" title="基本增删改查"></a>基本增删改查</h4><p>创建表，列出所有的表</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs excel">hbase(main)<span class="hljs-symbol">:002</span><span class="hljs-symbol">:0</span>&gt; create &#x27;user&#x27;,&#x27;user_id&#x27;,&#x27;<span class="hljs-built_in">address</span>&#x27;,&#x27;<span class="hljs-built_in">info</span>&#x27;<br>Created table user<br>Took <span class="hljs-number">25.6470</span> seconds                                                                                                                                         <br>=&gt; Hba<span class="hljs-symbol">se:</span><span class="hljs-symbol">:Ta</span>ble - user<br>hbase(main)<span class="hljs-symbol">:003</span><span class="hljs-symbol">:0</span>&gt; list<br>TABLE                                                                                                                                                        <br>user                                                                                                                                                         <br><span class="hljs-number">1</span> <span class="hljs-built_in">row</span>(s)<br>Took <span class="hljs-number">0.2597</span> seconds                                                                                                                                          <br>=&gt; [<span class="hljs-string">&quot;user&quot;</span>]<br></code></pre></td></tr></table></figure><p>得到表的信息</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">describe</span> <span class="hljs-string">&#x27;user&#x27;</span><br></code></pre></td></tr></table></figure><p>删除表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">disable</span> <span class="hljs-string">&#x27;user&#x27;</span>，或者<br><span class="hljs-keyword">drop</span> <span class="hljs-string">&#x27;user&#x27;</span><br></code></pre></td></tr></table></figure><p>添加信息，在一个列族上可以无限扩展</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">hbase</span><span class="hljs-params">(main)</span></span>:<span class="hljs-number">005</span>:<span class="hljs-number">0</span>&gt; put <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,<span class="hljs-string">&#x27;info:age&#x27;</span>,<span class="hljs-string">&#x27;24&#x27;</span><br>Took <span class="hljs-number">2.7663</span> seconds                                                                                                                                          <br><span class="hljs-function"><span class="hljs-title">hbase</span><span class="hljs-params">(main)</span></span>:<span class="hljs-number">006</span>:<span class="hljs-number">0</span>&gt; put <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,<span class="hljs-string">&#x27;info:company&#x27;</span>,<span class="hljs-string">&#x27;alibaba&#x27;</span><br>Took <span class="hljs-number">0.0777</span> seconds                                                                                                                                          <br></code></pre></td></tr></table></figure><p>获取一条记录</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">//获取一个ID下所有数据</span><br><span class="hljs-keyword">get</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span><br><span class="hljs-comment">//获取一个列族</span><br><span class="hljs-keyword">get</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,<span class="hljs-string">&#x27;info&#x27;</span><br><span class="hljs-comment">//获取一个列</span><br><span class="hljs-keyword">get</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,<span class="hljs-string">&#x27;info:age&#x27;</span><br></code></pre></td></tr></table></figure><p>更新记录，和put一个记录一样</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">put</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,<span class="hljs-string">&#x27;info:age&#x27;</span> ,<span class="hljs-string">&#x27;29&#x27;</span><br><span class="hljs-built_in">get</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,<span class="hljs-string">&#x27;info:age&#x27;</span><br><span class="hljs-built_in">put</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,<span class="hljs-string">&#x27;info:age&#x27;</span> ,<span class="hljs-string">&#x27;30&#x27;</span><br><span class="hljs-built_in">get</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,<span class="hljs-string">&#x27;info:age&#x27;</span><br></code></pre></td></tr></table></figure><p>被覆盖的数据也能查到</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">get</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,&#123;COLUMN=&gt;<span class="hljs-string">&#x27;info:age&#x27;</span>,VERSIONS=&gt;<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">get</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,&#123;COLUMN=&gt;<span class="hljs-string">&#x27;info:age&#x27;</span>,VERSIONS=&gt;<span class="hljs-number">2</span>&#125;<br><span class="hljs-keyword">get</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,&#123;COLUMN=&gt;<span class="hljs-string">&#x27;info:age&#x27;</span>,VERSIONS=&gt;<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p>获取某个时间戳下的数据</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">get</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,&#123;COLUMN=&gt;<span class="hljs-string">&#x27;info:age&#x27;</span>,TIMESTAMP=&gt;<span class="hljs-number">1364874937056</span>&#125;<br></code></pre></td></tr></table></figure><p>全表扫描</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">scan</span> <span class="hljs-string">&#x27;user&#x27;</span><br></code></pre></td></tr></table></figure><p>删除列</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">delete</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span>,<span class="hljs-string">&#x27;info:age&#x27;</span><br><span class="hljs-keyword">get</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span><br></code></pre></td></tr></table></figure><p>删除整行</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">deleteall</span> <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;xiaoming&#x27;</span><br></code></pre></td></tr></table></figure><p>统计表的行数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">count</span> <span class="hljs-string">&#x27;user&#x27;</span><br></code></pre></td></tr></table></figure><p>清空表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">truncate</span> <span class="hljs-string">&#x27;user&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h4><p>导入hbase-client包，函数有点过时了</p>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop之MapReduce</title>
    <link href="/2018/10/28/hadoop/hadoop%E4%B9%8BMapReduce/"/>
    <url>/2018/10/28/hadoop/hadoop%E4%B9%8BMapReduce/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学习MapReduce</p><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><ul><li>map，输入（k1,v1&gt;），输出（k2,v2）</li><li>reduce，输入就是将map的输出按key值group起来，（k2,list(v2)），输出需要得到的结果（k3,v3）</li></ul><p>对于WordCound程序而言，例如文件</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">hello hadoop<br>hello <span class="hljs-built_in">map</span><br>hello <span class="hljs-built_in">reduce</span><br></code></pre></td></tr></table></figure><p>默认按行读数据，即每读入一行数据，调用一次map方法，map输入的key值意义不大，可以是行号，可以是字符偏移，默认是字符偏移，即map的输入：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&lt;<span class="hljs-number">0</span>,<span class="hljs-string">&quot;hello hadoop&quot;</span>&gt;<br>&lt;<span class="hljs-number">13</span>,<span class="hljs-string">&quot;hello map&quot;</span>&gt;<br>&lt;<span class="hljs-number">23</span>,<span class="hljs-string">&quot;hello reduce&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>即要调用3次map函数，对于WC程序而言，就是统计每个单词出现的次数，那么map的输出就是</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&lt;<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">1</span>&gt;,&lt;<span class="hljs-string">&quot;hadoop&quot;</span>,<span class="hljs-number">1</span>&gt;<br>&lt;<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">1</span>&gt;,&lt;<span class="hljs-string">&quot;map&quot;</span>,<span class="hljs-number">1</span>&gt;<br>&lt;<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">1</span>&gt;,&lt;<span class="hljs-string">&quot;reduce&quot;</span>,<span class="hljs-number">1</span>&gt;<br></code></pre></td></tr></table></figure><p>reduce的输入就是将map输出的值相同的key值group成list，输入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-string">&quot;hello&quot;</span>,list<span class="hljs-comment">(1,1,1)</span>&gt;<br>&lt;<span class="hljs-string">&quot;hadoop&quot;</span>,list<span class="hljs-comment">(1)</span>&gt;<br>&lt;<span class="hljs-string">&quot;map&quot;</span>,list<span class="hljs-comment">(1)</span>&gt;<br>&lt;<span class="hljs-string">&quot;reduce&quot;</span>,list<span class="hljs-comment">(1)</span>&gt;<br></code></pre></td></tr></table></figure><p>输出的结果就是WC的计算结果，将list的数据累加就行</p><span id="more"></span><p>由此可见map和reduce的接口很抽象，实现的key,value全靠程序员</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Mapper接口，要实现这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//泛型，map的输入、输出键值对</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mapper</span>&lt;KEYIN, VALUEIN, KEYOUT, VALUEOUT&gt; &#123;<br>    <span class="hljs-comment">//重写map方法</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(KEYIN key, VALUEIN value, Mapper&lt;KEYIN, VALUEIN, KEYOUT, VALUEOUT&gt;.Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">//context为内部类Context</span><br>        context.write(key, value);<br>    &#125;<br>    <span class="hljs-comment">//重要，定义了一个内部类Context对象继承于MapContext</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MapContext</span>&lt;KEYIN, VALUEIN, KEYOUT, VALUEOUT&gt; &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Context</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br>    &#125;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>Reducer接口，需要实现这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//输入输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reducer</span>&lt;KEYIN, VALUEIN, KEYOUT, VALUEOUT&gt; &#123;<br>    <span class="hljs-comment">//重写reduce方法</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(KEYIN key, Iterable&lt;VALUEIN&gt; values, Reducer&lt;KEYIN, VALUEIN, KEYOUT, VALUEOUT&gt;.Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">i$</span> <span class="hljs-operator">=</span> values.iterator();<br><br>        <span class="hljs-keyword">while</span>(i$.hasNext()) &#123;<br>            <span class="hljs-type">VALUEIN</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> i$.next();<br>            context.write(key, value);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//内部类Context继承于ReduceContext</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ReduceContext</span>&lt;KEYIN, VALUEIN, KEYOUT, VALUEOUT&gt; &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Context</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br>    &#125;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="combine方法"><a href="#combine方法" class="headerlink" title="combine方法"></a>combine方法</h3><p>减少reduce的IO开销，将map产生的结果在本地先进行一个合并处理</p><p>对于WC程序而言，CombinerClass和ReducerClass一样</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-keyword">job</span>.setMapperClass(TokenizerMapper.<span class="hljs-keyword">class</span>)<span class="hljs-comment">;</span><br><span class="hljs-comment">//CombinerClass和ReducerClass一样</span><br><span class="hljs-keyword">job</span>.setCombinerClass(IntSumReducer.<span class="hljs-keyword">class</span>)<span class="hljs-comment">;</span><br><span class="hljs-keyword">job</span>.setReducerClass(IntSumReducer.<span class="hljs-keyword">class</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="partition方法"><a href="#partition方法" class="headerlink" title="partition方法"></a>partition方法</h3><p>将reduce的输出结果分不同的文件存放，它的计算只依赖于key值</p><h3 id="MapReduce的输入输出"><a href="#MapReduce的输入输出" class="headerlink" title="MapReduce的输入输出"></a>MapReduce的输入输出</h3><ul><li>能处理很多格式的数据，text、数据库等</li><li>输入被分成InputSplit，每个Mapper处理一个InputSplit</li><li>每个InputSplit被分成多条记录record，每一个record产生一个key-value</li></ul><p>默认的输入处理类是TextInputFormat</p><ul><li>处理固定数量的记录，NLineIputFormat</li><li>处理二进制数据，BinaryInputFormat</li><li>多类不同类型的文件，MultipleInputs</li><li>数据库文件，DBInputFormat</li></ul><p>输出同理，和输入一样分这么多类型</p>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop之IO操作</title>
    <link href="/2018/10/28/hadoop/hadoop%E4%B9%8BIO%E6%93%8D%E4%BD%9C/"/>
    <url>/2018/10/28/hadoop/hadoop%E4%B9%8BIO%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学习hadoop的IO</p><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><ul><li>数据完整性检查</li><li>数据压缩</li><li>数据序列化</li><li>基于文件的数据结构</li></ul><h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><p>hadoop采用CRC-32校验和检查数据完整性</p><h4 id="本地文件系统的数据完整性"><a href="#本地文件系统的数据完整性" class="headerlink" title="本地文件系统的数据完整性"></a>本地文件系统的数据完整性</h4><p>在创建文件a的同时，会创建隐藏的文件a.crc记录了文件的校验和，默认每512个字节就产生32位的校验和</p><p>可以自定义配置core-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>　　　<br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>io.bytes.per.checksum<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>　　<br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>　　<br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以自定义是否启用校验和</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>　　　<br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.file.impl<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>　　<br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.fs.LocalFileSystem<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>　　<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!--上面启用校验和，下面禁用--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>　　　<br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.file.impl<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>　　<br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.fs.RawLocalFileSystem<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>　　<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>任何在配置文件中修改的配置都可以通过Java代码在Configuration类中局部的配置</p><span id="more"></span><h4 id="HDFS的数据完整性"><a href="#HDFS的数据完整性" class="headerlink" title="HDFS的数据完整性"></a>HDFS的数据完整性</h4><p>HDFS使用ChecksumFileSystem类来校验</p><p>RawLocalFileSystem和ChecksumFileSystem一起使用，可以达到LocalFileSystem的效果</p><p>Java中可以通过函数setVerifyChecksum(false)来局部的禁止校验</p><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><p>hadoop支持的压缩算法</p><p><img src="/images/hadoop_007.PNG" alt="hadoop_007"></p><p>其中LZO不在hadoop的发布版本中，需要单独下载</p><ul><li>利用CompressionCodec压缩和解压流</li><li>利用CompressionCodecFactory推断压缩算法</li></ul><p>在MapReduce中使用压缩</p><ul><li>如果输入数据被压缩，通过使用CompressionCodecFactory自动推断Codec对象，MapReduce程序会自动将输入数据解压</li><li>如果希望MapReduce输出压缩文件，设置属性<code>mapred.output.compress</code>为<code>true</code>，将<code>mapred.output.compression.codec</code>属性设置为要使用的Codec类</li></ul><h3 id="IO序列化（重要）"><a href="#IO序列化（重要）" class="headerlink" title="IO序列化（重要）"></a>IO序列化（重要）</h3><ul><li>序列化是将内存中的对象转化为字节流，反序列化则是将字节流恢复到内存中</li><li>系列化的目的，1是进程间的通信，2是数据的持久化</li><li>hadoop利用RPC实现进程间的通信</li><li>由于Java本身序列化的弊端，hadoop实现了一套自己的序列化机制</li></ul><p>序列化的核心，Writable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Writable</span> &#123;<br>    <span class="hljs-comment">//将对象序列化到输出流，DataOutput、DataInput均为二进制流</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(DataOutput out)</span> <span class="hljs-keyword">throws</span> IOException;<br>    <span class="hljs-comment">//输入流反序列化</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFields</span><span class="hljs-params">(DataInput in)</span> <span class="hljs-keyword">throws</span> IOException;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口的继承关系图</p><p><img src="/images/hadoop_008.PNG" alt="hadoop_008"></p><p>由图可以看出，hadoop的基本数据类型都是继承于WritableComparable接口，即这种类型既是可序列化的，又是可比较大小的。而其它的存储数据结构ArrayWritable和MapWritable只继承于Writable接口</p><p>Comparable和Comparator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;&#123;<br>    <span class="hljs-comment">//隐含了一个this指针，this和o对象比较</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(T o)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparator</span>&lt;T&gt;&#123;<br>    <span class="hljs-comment">//是一个工具类，实现两个对象的比较</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(T o1,T o2)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接在字节流层面上进行比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RawComparator</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparator</span>&lt;T&gt; &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b1, <span class="hljs-type">int</span> s1, <span class="hljs-type">int</span> l1, <span class="hljs-type">byte</span>[] b2, <span class="hljs-type">int</span> s2, <span class="hljs-type">int</span> l2)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="hadoop数据类型"><a href="#hadoop数据类型" class="headerlink" title="hadoop数据类型"></a>hadoop数据类型</h4><p>hadoop数据类型就是对Java数据类型的封装，如下图所示：</p><p><img src="/images/hadoop_009.PNG" alt="hadoop_009"></p><p>自定义数据类型，实现WritableComparable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TextPair</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WritableComparable</span>&lt;TextPair&gt; &#123;<br>    <span class="hljs-keyword">private</span> Text first;<br>    <span class="hljs-keyword">private</span> Text second;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TextPair</span><span class="hljs-params">(Text f, Text s)</span> &#123;<br>        first = f;<br>        second = s;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(TextPair o)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cmp</span> <span class="hljs-operator">=</span> first.compareTo(o.first);<br>        <span class="hljs-keyword">if</span> (cmp != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> cmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> second.compareTo(o.second);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(DataOutput dataOutput)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        first.write(dataOutput);<br>        second.write(dataOutput);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFields</span><span class="hljs-params">(DataInput dataInput)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        first.readFields(dataInput);<br>        first.readFields(dataInput);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="序列化框架"><a href="#序列化框架" class="headerlink" title="序列化框架"></a>序列化框架</h4><ul><li>hadoop支持不同的序列化框架，可以在配置文件中配置</li><li>实现序列化框架需要实现Serialization接口</li><li>默认的序列框架是org.apache.hadoop.io.serializer.WritableSerialization</li></ul><h4 id="基于文件的数据接口"><a href="#基于文件的数据接口" class="headerlink" title="基于文件的数据接口"></a>基于文件的数据接口</h4><ul><li>解决hadoop中小文件太多浪费资源的问题，SequenceFile</li><li>小文件的文件名为key，文件内容为value写入SequenceFile文件</li></ul>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop之HDFS</title>
    <link href="/2018/10/27/hadoop/hadoop%E4%B9%8BHDFS/"/>
    <url>/2018/10/27/hadoop/hadoop%E4%B9%8BHDFS/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学习HDFS文件系统</p><h3 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h3><ul><li>数据量很多，一台机器放不下，需要多台机器共同存储</li><li>允许文件通过网络在多台主机上分享</li><li>通透性，对于用户来说，使用存储和普通单机没什么区别</li><li>容错，某些机器挂了，对系统没有影响</li></ul><h3 id="hadoop文件系统"><a href="#hadoop文件系统" class="headerlink" title="hadoop文件系统"></a>hadoop文件系统</h3><ul><li>对Linux文件系统的抽象。抽象类为<code>org.apache.hadoop.fs.FileSystem</code>，HDFS只是一个实例</li><li>丰富的Shell命令</li><li>提供JAVA API编程接口</li></ul><p><img src="/images/hadoop_004.PNG" alt="hadoop_004"></p><span id="more"></span><h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><ul><li>主从结构，通过心跳机制维持</li><li>NameNode是master，DataNode是slave</li><li>处理超大文件</li><li>机器不要很好的性能</li><li>不适合处理小文件</li><li>不适合任意修改文件</li></ul><h3 id="命令行（整体设计与Linux命令行相似）"><a href="#命令行（整体设计与Linux命令行相似）" class="headerlink" title="命令行（整体设计与Linux命令行相似）"></a>命令行（整体设计与Linux命令行相似）</h3><p>列出所有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -<span class="hljs-built_in">ls</span> /<br></code></pre></td></tr></table></figure><p>本地文件上传到hdfs</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">hadoop fs -copyFromLocal <span class="hljs-regexp">/root/</span>xxx hdfs:<span class="hljs-regexp">/hadoop01:9000/</span>xxx<br>hadoop fs -put <span class="hljs-regexp">/root/</span>xxx hdfs:<span class="hljs-regexp">/hadoop01:9000/</span>xxx<br></code></pre></td></tr></table></figure><p>下载文件，是否加校验和</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">hadoop fs -copyToLocal [-ignorecrc] [-crc] <span class="hljs-regexp">/root/</span>xxx hdfs:<span class="hljs-regexp">/hadoop01:9000/</span>xxx<br>hadoop fs -get [-ignorecrc] [-crc] <span class="hljs-regexp">/root/</span>xxx hdfs:<span class="hljs-regexp">/hadoop01:9000/</span>xxx<br></code></pre></td></tr></table></figure><p>删除文件，文件夹多加<code>-r</code>参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -<span class="hljs-built_in">rm</span> hdfs://hadoop01:9000/wc_test_01<br></code></pre></td></tr></table></figure><h3 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h3><ul><li>Configuration类，封装了所有的配置</li><li>FileSystem类，是个抽象类，DistributedFileSystem是它的实现之一</li><li>FSDataInputStream和FSDataOutputStream是HDFS的输入和输出流，分别通过FileSystem的open方法和create方法获得</li></ul><h3 id="如何从HDFS读数据？"><a href="#如何从HDFS读数据？" class="headerlink" title="如何从HDFS读数据？"></a>如何从HDFS读数据？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSystemCat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://hadoop01:9000/wc_test_01&quot;</span>;<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> FileSystem.get(URI.create(url), conf);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            in = fs.open(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(url));<br>            IOUtils.copyBytes(in, System.out, <span class="hljs-number">4</span> * <span class="hljs-number">1024</span>, <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            IOUtils.closeStream(in);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件内容将打印在控制台上</p><h3 id="如何从HDFS写数据？"><a href="#如何从HDFS写数据？" class="headerlink" title="如何从HDFS写数据？"></a>如何从HDFS写数据？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCopy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">local</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/1.txt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dst</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://hadoop01:9000/1.txt&quot;</span>;<br><span class="hljs-comment">//        String local = args[0];</span><br><span class="hljs-comment">//        String dst = args[1];</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(local));<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> FileSystem.get(URI.create(dst), conf, <span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> fs.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(dst));<br>        IOUtils.copyBytes(in, out, <span class="hljs-number">4</span> * <span class="hljs-number">1024</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不能直接上传Windows的文件，权限不够；但可以伪装成root用户，这样就可以上传</p><h3 id="如何创建目录"><a href="#如何创建目录" class="headerlink" title="如何创建目录"></a>如何创建目录</h3><p>这个方法会创建不存在的父目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> boolen <span class="hljs-title function_">mkdirs</span><span class="hljs-params">(Path f)</span> <span class="hljs-keyword">throws</span> IOException<br></code></pre></td></tr></table></figure><h3 id="如何查询文件系统"><a href="#如何查询文件系统" class="headerlink" title="如何查询文件系统"></a>如何查询文件系统</h3><p>查询元数据和目录结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">FileStatus  <span class="hljs-title function_">getFileStatus</span><span class="hljs-params">( Path f)</span> <span class="hljs-keyword">throws</span> IOException<br></code></pre></td></tr></table></figure><p>FileSystem的listStatus提供了列出文件目录内容的方法</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">FileStatus<span class="hljs-selector-attr">[]</span>  <span class="hljs-built_in">listStatus</span>( Path f) throws IOException<br>FileStatus<span class="hljs-selector-attr">[]</span>  <span class="hljs-built_in">listStatus</span>( Path f, PathFilter filter) throws IOException<br>FileStatus<span class="hljs-selector-attr">[]</span>  <span class="hljs-built_in">listStatus</span>( Path[] files) throws IOException <br>FileStatus<span class="hljs-selector-attr">[]</span>  <span class="hljs-built_in">listStatus</span>( Path[] files, PathFilter filter) throws IOException<br></code></pre></td></tr></table></figure><p>显示文件元数据信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShowFileStatus</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://hadoop01:9000/wc_test_01&quot;</span>;<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> FileSystem.get(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(url), conf);<br>        <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(url);<br>        <span class="hljs-type">FileStatus</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> fs.getFileStatus(path);<br>        System.out.println(<span class="hljs-string">&quot;Full path:&quot;</span> + stat.getPath().toUri().getPath());<br>        <span class="hljs-keyword">if</span> (stat.isDirectory()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;is dir&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;is file&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Length:&quot;</span> + stat.getLen());<br>        System.out.println(<span class="hljs-string">&quot;Last modified time:&quot;</span> + stat.getModificationTime());<br>        System.out.println(<span class="hljs-string">&quot;Replication:&quot;</span> + stat.getReplication());<br>        System.out.println(<span class="hljs-string">&quot;Block size:&quot;</span> + stat.getBlockSize());<br>        System.out.println(<span class="hljs-string">&quot;Owner:&quot;</span> + stat.getOwner());<br>        System.out.println(<span class="hljs-string">&quot;Group:&quot;</span> + stat.getGroup());<br>        System.out.println(<span class="hljs-string">&quot;Permission:&quot;</span> + stat.getPermission());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>列出目录内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListStatus</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://hadoop01:9000/tmp&quot;</span>;<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> FileSystem.get(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(url), conf, <span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(url);<br>        FileStatus[] statuses = fs.listStatus(path);<br>        Path[] paths = FileUtil.stat2Paths(statuses);<br>        <span class="hljs-keyword">for</span> (Path p : paths) &#123;<br>            System.out.println(p);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="利用通配符来实现文件的筛选"><a href="#利用通配符来实现文件的筛选" class="headerlink" title="利用通配符来实现文件的筛选"></a>利用通配符来实现文件的筛选</h3><p>利用<code>*</code>或者<code>?</code>来匹配文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">FileStatus<span class="hljs-selector-attr">[]</span>  <span class="hljs-built_in">globStatus</span>( Path pathPattern) throws IOException<br>FileStatus<span class="hljs-selector-attr">[]</span>  <span class="hljs-built_in">globStatus</span>( Path pathPattern, PathFilter filter) throws IOException<br></code></pre></td></tr></table></figure><h3 id="利用正则式来筛选文件"><a href="#利用正则式来筛选文件" class="headerlink" title="利用正则式来筛选文件"></a>利用正则式来筛选文件</h3><p>实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PathFilter</span>&#123;<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Path path)</span>; <span class="hljs-comment">//如果接受该path，则返回true</span><br>&#125; <br><br></code></pre></td></tr></table></figure><h3 id="HDFS写文件原理"><a href="#HDFS写文件原理" class="headerlink" title="HDFS写文件原理"></a>HDFS写文件原理</h3><p>原理图如下</p><p><img src="/images/hadoop_005.PNG" alt="hadoop_005"></p><h3 id="HDFS读文件原理"><a href="#HDFS读文件原理" class="headerlink" title="HDFS读文件原理"></a>HDFS读文件原理</h3><p>原理图如下</p><p><img src="/images/hadoop_006.PNG" alt="hadoop_006"></p><p>原理过程先放着，以后再看..</p><h3 id="网络距离"><a href="#网络距离" class="headerlink" title="网络距离"></a>网络距离</h3><p>就是两个节点的物理距离。当文件需要拷贝时，距离近的节点优先，以提高性能</p><h3 id="HDFS一致性模型"><a href="#HDFS一致性模型" class="headerlink" title="HDFS一致性模型"></a>HDFS一致性模型</h3><p>HDFS提供了一个同步函数，这个方法是FSDataOutputStream类的sync()函数。当sync()函数返回成功时，HDFS就可以保证此时写入的文件数据文件是一致的并且对于所有用户是可见的。关闭一个文件时也隐式执行了sync()函数</p><h3 id="HDFS文件系统结构"><a href="#HDFS文件系统结构" class="headerlink" title="HDFS文件系统结构"></a>HDFS文件系统结构</h3><h3 id="HDFS文件镜像和编辑日志"><a href="#HDFS文件镜像和编辑日志" class="headerlink" title="HDFS文件镜像和编辑日志"></a>HDFS文件镜像和编辑日志</h3><ul><li>通常情况下，辅助namenode每隔一个小时(通过fs.checkpoint.period属性设置，以秒为单位)创建检查点</li><li>当编辑日志大小达到64MB(由fs.checkpoint.size属性设置，以字节为单位)创建检查点。系统每隔五分钟检查一次编辑日志大小</li></ul><p>用于误操作的恢复，和文件系统的备份</p><h3 id="归档文件（Archive）"><a href="#归档文件（Archive）" class="headerlink" title="归档文件（Archive）"></a>归档文件（Archive）</h3><p>HDFS不利于小文件的存储，浪费性能。可以将小文件打包成大文件存储</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hadoop</span> archive -archiveName files.har <span class="hljs-number">1</span>.txt <span class="hljs-number">2</span>.txt <span class="hljs-number">3</span>.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建集群hadoop</title>
    <link href="/2018/10/16/hadoop/%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4hadoop/"/>
    <url>/2018/10/16/hadoop/%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4hadoop/</url>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>在单机的hadoop的基础上搭建集群的hadoop</p><p>先克隆3台虚拟机：<br>在VMware中，右键虚拟机（已关闭状态），依次选择</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[管理]</span>-&gt;<span class="hljs-selector-attr">[克隆]</span>-&gt;<span class="hljs-selector-attr">[下一步]</span>-&gt;<span class="hljs-selector-attr">[虚拟机中当前状态]</span>-&gt;<span class="hljs-selector-attr">[下一步]</span><br></code></pre></td></tr></table></figure><p>如图所示</p><div align=center>![hadoop_001](/images/hadoop_001.PNG)</div><p>选择位置后克隆机器，克隆2~3台虚拟机即可</p><h3 id="修改网卡IP主机名"><a href="#修改网卡IP主机名" class="headerlink" title="修改网卡IP主机名"></a>修改网卡IP主机名</h3><p>克隆的机器叫做02，先右键机器-&gt;设置-&gt;网络适配器-&gt;高级，给02生成一个新的mac地址</p><div align=center>![hadoop_002](/images/hadoop_002.PNG)</div><p>更改规则</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/u</span>dev<span class="hljs-regexp">/rules.d/</span><span class="hljs-number">70</span>-persistent-net.rules<br></code></pre></td></tr></table></figure><div align=center>![hadoop_003](/images/hadoop_003.PNG)</div><p>删除多余的网卡，将第二个网卡的NAME改为eth0</p><p>配置IP地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-eth0<br></code></pre></td></tr></table></figure><p>将IP地址修改为和01机器在同一个网段下，保证01和02相互能ping通<br>重启网络<code>service network restart</code>，测试一下ping，02与Windows和01都能互相ping通</p><p>和搭建伪分布式一样，修改主机名和hosts文件，修改完成</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>sysconfig/network<br>vim <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="删除原有的hadoop环境"><a href="#删除原有的hadoop环境" class="headerlink" title="删除原有的hadoop环境"></a>删除原有的hadoop环境</h3><p>我是复制了3份，VMware中共有01,02,03,04虚拟机，依次删除原有的hadoop（也可以先删除再拷贝的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从环境变量中删除</span><br>vim /etc/profile<br><span class="hljs-comment"># 从磁盘中删除</span><br><span class="hljs-built_in">rm</span> -rf /hadoop<br></code></pre></td></tr></table></figure><p>为了操作方便，可以用xshell工具连接，免得虚拟机来回切换</p><p>02,03,04删除root下的<code>.ssh</code>文件夹，重新生成秘钥<code>ssh-keygen -t rsa -C &quot;zhang0chao0@gmail.com&quot;</code></p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>将安装包<code>hadoop-2.8.4.tar.gz</code>上传到01机器上，和单机一样，解压并配置环境变量</p><p>hosts文件配置，01~04机器都追加hosts文件</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.8.2</span> hadoop01<br><span class="hljs-number">192.168.8.3</span> hadoop02<br><span class="hljs-number">192.168.8.4</span> hadoop03<br><span class="hljs-number">192.168.8.5</span> hadoop04<br></code></pre></td></tr></table></figure><p>cd到目录<code>/hadoop/hadoop-2.8.4/etc/hadoop</code>，开始修改配置文件</p><p>修改JAVA_HOME</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> hadoop-env.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>core-site.xml，配置namenode和tmp目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.default.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://192.168.8.2:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/hadoop/hadoop-2.8.4/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>hdfs-site.xml，配置副本数量和name&#x2F;data-node本地文件位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/hadoop/hadoop-2.8.4/tmp/dfs/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/hadoop/hadoop-2.8.4/tmp/dfs/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>mapred-site.xml，指定运行在YARN上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yarn-site.xml，指定resourcemanager的地址，可以不和namenode在一台机器上，以减轻压力</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop02<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>slaves，添加slave节点</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">hadoop02<br>hadoop03<br>hadoop04<br></code></pre></td></tr></table></figure><p>将配置好的文件拷贝到其它机器，在拷贝前先删除doc文档，提高拷贝的速度</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -rf <span class="hljs-regexp">/hadoop/</span>hadoop-<span class="hljs-number">2.8</span>.<span class="hljs-number">4</span><span class="hljs-regexp">/share/</span>doc/<br></code></pre></td></tr></table></figure><p>拷贝</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp -r <span class="hljs-regexp">/hadoop/</span> hadoop02:/<br>scp -r <span class="hljs-regexp">/hadoop/</span> hadoop03:/<br>scp -r <span class="hljs-regexp">/hadoop/</span> hadoop04:/<br></code></pre></td></tr></table></figure><p>02,03,04机器上添加环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim /etc<span class="hljs-built_in">/profile</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">export</span> <span class="hljs-attribute">HADOOP_HOME</span>=/hadoop/hadoop-2.8.4<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$HADOOP_HOME/bin<br>source /etc/profile<br></code></pre></td></tr></table></figure><p>01机器上格式化hdfs</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">hadoop namenode -<span class="hljs-built_in">format</span><br></code></pre></td></tr></table></figure><h3 id="启动hdfs"><a href="#启动hdfs" class="headerlink" title="启动hdfs"></a>启动hdfs</h3><p>cd到sbin目录，命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./start-dfs.sh<br></code></pre></td></tr></table></figure><p>然后启动了namenode后，在启动datanode的时候卡住了，卡着不动，怎么办？找错误</p><p>在启动hadoop03机器的datanode时卡出了，就去对应的日志文件找，找到日志</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> hadoop-root-datanode-hadoop03.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>发现错误</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2018</span>-<span class="hljs-number">10</span>-<span class="hljs-number">14</span> <span class="hljs-number">05</span>:<span class="hljs-number">34</span>:<span class="hljs-number">44</span>,<span class="hljs-number">052</span> WARN org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.ipc</span><span class="hljs-selector-class">.Client</span>: Failed to connect to server: hadoop01/<span class="hljs-number">192.168</span>.<span class="hljs-number">8.2</span>:<span class="hljs-number">9000</span>: retries get failed due to exceeded maximum allowed retries number: <span class="hljs-number">10</span><br>java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.ConnectException</span>: Connection refused<br>at sun<span class="hljs-selector-class">.nio</span><span class="hljs-selector-class">.ch</span><span class="hljs-selector-class">.SocketChannelImpl</span><span class="hljs-selector-class">.checkConnect</span>(Native Method)<br>at sun<span class="hljs-selector-class">.nio</span><span class="hljs-selector-class">.ch</span><span class="hljs-selector-class">.SocketChannelImpl</span><span class="hljs-selector-class">.finishConnect</span>(SocketChannelImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">717</span>)<br>xxxxxx<br></code></pre></td></tr></table></figure><p>就是hadoop03无法与hadoop01通信，那么就配置一下秘钥</p><h4 id="配ssh"><a href="#配ssh" class="headerlink" title="配ssh"></a>配ssh</h4><p>从01-&gt;[02,03,04]</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> hadoop02<br>ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> hadoop03<br>ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> hadoop04<br></code></pre></td></tr></table></figure><p>从[02,03,04]-&gt;01</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> hadoop01<br></code></pre></td></tr></table></figure><p>再次启动hdfs，成功~</p><h3 id="启动yarn"><a href="#启动yarn" class="headerlink" title="启动yarn"></a>启动yarn</h3><p>因为我在hadoop02上配置的resourcemanager，那么就在hadoop02上启动yarn</p><p>和01一样，将02与[01,03,04]之间都配上ssh权限，启动<code>sbin/start-yarn.sh</code>，出现错误</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">The authenticity <span class="hljs-keyword">of</span> host <span class="hljs-symbol">&#x27;hadoop02</span> (<span class="hljs-number">192.168</span>.<span class="hljs-number">8.3</span>)&#x27; can<span class="hljs-symbol">&#x27;t</span> be established.<br></code></pre></td></tr></table></figure><p>自己到自己没有免登陆，再<code>ssh-copy-id localhost</code>，再次启动。终于成功</p><h3 id="检验进程"><a href="#检验进程" class="headerlink" title="检验进程"></a>检验进程</h3><p>挨个<code>jps</code>，发现hadoop02</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2595 </span>DataNode<br><span class="hljs-symbol">3653 </span>Jps<br><span class="hljs-symbol">3480 </span>NodeManager<br><span class="hljs-symbol">2815 </span>ResourceManager<br></code></pre></td></tr></table></figure><p>ResourceManager和NodeManager在一起，而hadoop01缺少NodeManager</p><p>解决，编辑hadoop02中的slaves文件，修改为</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">hadoop01<br>hadoop03<br>hadoop04<br></code></pre></td></tr></table></figure><p>停止yarn后再运行，一切进程都正常</p><p>访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">8.2</span>:<span class="hljs-number">50070</span>/dfshealth.html<span class="hljs-comment">#tab-overview</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">8.3</span>:<span class="hljs-number">8088</span><span class="hljs-regexp">/cluster/</span>nodes<br></code></pre></td></tr></table></figure><p>一切正常，集群搭建完成</p>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装MySQL并远程连接</title>
    <link href="/2018/10/12/%E6%95%B0%E6%8D%AE%E5%BA%93/Linux%E5%AE%89%E8%A3%85MySQL%E5%B9%B6%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <url>/2018/10/12/%E6%95%B0%E6%8D%AE%E5%BA%93/Linux%E5%AE%89%E8%A3%85MySQL%E5%B9%B6%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>64位的机器，先去官网下载安装包<code>mysql-5.5.61-linux-glibc2.12-x86_64.tar.gz</code><br>将安装包上传到Linux机器上<br>移动到目录，<code>mv xxx /usr/local</code><br>解压，<code>tar -zxvf xxx</code><br>多了一个<code>mysql-5.5.61-linux-glibc2.12-x86_64</code>的目录<br>将目录重命名成mysql，<code>mv xxx mysql</code>，这样更方便操作</p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">groupadd mysql</span><br><span class="hljs-attribute">useradd -g mysql mysql</span><br></code></pre></td></tr></table></figure><p>添加了一个mysql的用户组和全局的用户</p><span id="more"></span><h3 id="初始化命令"><a href="#初始化命令" class="headerlink" title="初始化命令"></a>初始化命令</h3><p>cd到mysql目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 新建一个文件夹放数据</span><br>mkdir .<span class="hljs-regexp">/data/my</span>sql<br><span class="hljs-comment"># 更改当前目录的权限</span><br>chown -R mysql:mysql ./<br><span class="hljs-comment"># 初始化数据库</span><br>.<span class="hljs-regexp">/scripts/my</span>sql_install_db --user=mysql --datadir=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>data/mysql<br></code></pre></td></tr></table></figure><p>记住临时密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[Note] A <span class="hljs-keyword">temporary</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">generated</span> <span class="hljs-keyword">for</span> root@localhost: o*s#gqh)F4Ck<br></code></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 拷贝后可以用service命令来启动数据库</span><br>cp support-files<span class="hljs-regexp">/mysql.server /</span>etc<span class="hljs-regexp">/init.d/my</span>sqld<br>chmod <span class="hljs-number">755</span> <span class="hljs-regexp">/etc/i</span>nit.d/mysqld<br><span class="hljs-comment"># 删除默认的配置文件或者将mysql里面的cnf文件拷贝一份到etc下，没什么影响</span><br>rm -rf <span class="hljs-regexp">/etc/my</span>.cnf<br><span class="hljs-comment"># 修改启动脚本</span><br>vim <span class="hljs-regexp">/etc/i</span>nit.d/mysqld<br>basedir=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span><br>datadir=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>data/mysql<br></code></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 启动mysql</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>mysqld start<br><span class="hljs-comment"># 关闭mysql</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>mysqld stop<br><span class="hljs-comment"># 查看运行状态</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>mysqld status<br></code></pre></td></tr></table></figure><h3 id="加入环境变量"><a href="#加入环境变量" class="headerlink" title="加入环境变量"></a>加入环境变量</h3><p>可以在任意目录下使用mysql命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># G跳到文件末尾行</span><br>vim <span class="hljs-regexp">/etc/</span>profile<br>export PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>bin<br>source <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><h3 id="修改一下密码"><a href="#修改一下密码" class="headerlink" title="修改一下密码"></a>修改一下密码</h3><p>用临时密码登录，<code>mysql -u root -p</code><br>或者直接<code>mysql uroot</code>登录<br>执行修改密码，<code>set password for root@localhost = password(&#39;123456&#39;);</code></p><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>命令行可以登录，但是同局域网下的Windows无法用Navicat连接</p><p>登录mysql后输入如下命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-string">&#x27;123456&#x27;</span>是密码<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br>flush <span class="hljs-keyword">privileges</span>;<br></code></pre></td></tr></table></figure><p>防火墙设置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 开放3306端口并重启防火墙</span><br><span class="hljs-regexp">/sbin/i</span>ptables -I INPUT -p tcp --dport <span class="hljs-number">3306</span> -j ACCEPT<br><span class="hljs-comment"># 保存配置</span><br><span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/init.d/i</span>ptables save<br><span class="hljs-comment">#重启服务</span><br><span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/init.d/i</span>ptables restart<br><span class="hljs-comment"># 查看已开放端口</span><br><span class="hljs-regexp">/etc/i</span>nit.d/iptables status<br></code></pre></td></tr></table></figure><p>在Navicat上就可以连接了</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop入门wc程序</title>
    <link href="/2018/07/05/hadoop/hadoop%E5%85%A5%E9%97%A8wc%E7%A8%8B%E5%BA%8F/"/>
    <url>/2018/07/05/hadoop/hadoop%E5%85%A5%E9%97%A8wc%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>安装好hadoop后，需要测试启动，这里就跑一个例子。WC指的是Linux的一条指令wordcount，用来统计文件中的单词数。</p><p>命令：<br><code>wc [文件名]</code></p><p>那么如何做大数据的统计？利用hadoop来做统计，指令在<code>hadoop-mapreduce-examples-2.8.4.jar</code>包中。</p><h3 id="上传-x2F-下载-x2F-删除文件"><a href="#上传-x2F-下载-x2F-删除文件" class="headerlink" title="上传&#x2F;下载&#x2F;删除文件"></a>上传&#x2F;下载&#x2F;删除文件</h3><p>启动hadoop后，先传一个文件test到HDFS上：<br><code>hadoop fs -put /root/Desktop/test.tar.gz hdfs://zc01:9000/test</code></p><p>下载某个文件可以用界面或者命令行：<br><code>hadoop fs -get hdfs://zc01:9000/test /home</code> # 下载到home文件夹</p><p>删除文件（夹）：<br><code>hadoop fs -rm hdfs://zc01:9000/test</code></p><p>这是基础知识。</p><span id="more"></span><h3 id="利用自带的工具包做wc统计"><a href="#利用自带的工具包做wc统计" class="headerlink" title="利用自带的工具包做wc统计"></a>利用自带的工具包做wc统计</h3><p>先进入jar包目录：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@zc01 mapreduce]<span class="hljs-comment"># pwd</span><br><span class="hljs-regexp">/hadoop/</span>hadoop-<span class="hljs-number">2.8</span>.<span class="hljs-number">4</span><span class="hljs-regexp">/share/</span>hadoop/mapreduce<br></code></pre></td></tr></table></figure><p>使用命令：<br><code>hadoop jar hadoop-mapreduce-examples-2.8.4.jar wordcount [输入] [输出]</code></p><p>其中输入和输出都是HDFS里面的地址，则先把待统计的words.txt文件上传到HDFS中：<br><code>hadoop fs -put /root/Desktop/words.txt hdfs://zc01:9000/words</code></p><p>然后计算：<br><code>hadoop jar hadoop-mapreduce-examples-2.8.4.jar wordcount hdfs://zc01:9000/words hdfs://zc01:9000/out</code></p><p>计算完成，<code>hadoop fs -ls /</code>列出目录，发现多了out目录，也可以直接界面查看计算结果。</p><div align=center>![hadoop1-3](/images/hadoop1-3.PNG)</div><p>下载计算结果时浏览器无法解析主机名，应该在hosts文件（C:\Windows\System32\drivers\etc\hosts）中添加映射（相当于本机的DNS）：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.8.88</span>zc01<br></code></pre></td></tr></table></figure><p>下载part-r-00000文件，打开后即是wc统计的结果。</p><h3 id="自己写一个简单的WordCount程序"><a href="#自己写一个简单的WordCount程序" class="headerlink" title="自己写一个简单的WordCount程序"></a>自己写一个简单的WordCount程序</h3><p>新建maven程序，pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hadoopVersion</span>&gt;</span>2.8.4<span class="hljs-tag">&lt;/<span class="hljs-name">hadoopVersion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Hadoop start --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hadoop-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;hadoopVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hadoop-hdfs<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;hadoopVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hadoop-mapreduce-client-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;hadoopVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hadoop-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;hadoopVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>自己写一个WordCount类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WordCount</span> &#123;<br>    <span class="hljs-comment">//实现一个Mapper类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenizerMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;Object, Text, Text, IntWritable&gt; &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">IntWritable</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">Text</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(Object key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>            <span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">itr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(value.toString());<br>            <span class="hljs-keyword">while</span> (itr.hasMoreTokens()) &#123;<br>                word.set(itr.nextToken());<br>                context.write(word, one);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//实现一个Reducer类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntSumReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, IntWritable, Text, IntWritable&gt; &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">IntWritable</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>();<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (IntWritable val : values) &#123;<br>                sum += val.get();<br>            &#125;<br>            result.set(sum);<br>            context.write(key, result);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        String[] otherArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericOptionsParser</span>(conf, args).getRemainingArgs();<br>        <span class="hljs-keyword">if</span> (otherArgs.length != <span class="hljs-number">2</span>) &#123;<br>            System.err.println(<span class="hljs-string">&quot;Error in args&quot;</span>);<br>            System.exit(<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf, <span class="hljs-string">&quot;word count&quot;</span>);<br>        job.setJarByClass(WordCount.class);<br>        job.setMapperClass(TokenizerMapper.class);<br>        job.setReducerClass(IntSumReducer.class);<br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(IntWritable.class);<br>        <span class="hljs-comment">//输入目录</span><br>        FileInputFormat.addInputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(otherArgs[<span class="hljs-number">0</span>]));<br>        <span class="hljs-comment">//输出目录</span><br>        FileOutputFormat.setOutputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(otherArgs[<span class="hljs-number">1</span>]));<br>        System.exit(job.waitForCompletion(<span class="hljs-literal">true</span>) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在弄清楚MapReduce的原理的基础上，自己实现一个Map类和Reducer类。</p><p>将项目打包成jar文件，上传到hdfs中，利用命令行运行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hadoop jar hadoop01.jar demo01.WordCount hdfs:<span class="hljs-regexp">//</span>hadoop01:<span class="hljs-number">9000</span><span class="hljs-regexp">/wc_test_01 hdfs:/</span><span class="hljs-regexp">/hadoop01:9000/</span>wc_out2<br></code></pre></td></tr></table></figure><p>执行结果与example包中计算的结果一样（程序无误的前提下），这样，就完成了简单的WordCount程序</p>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建伪分布式hadoop</title>
    <link href="/2018/07/05/hadoop/%E6%90%AD%E5%BB%BA%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8Fhadoop/"/>
    <url>/2018/07/05/hadoop/%E6%90%AD%E5%BB%BA%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8Fhadoop/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学习hadoop的第一课，先搭建好伪分布式环境。</p><h5 id="hadoop是什么，能干什么？"><a href="#hadoop是什么，能干什么？" class="headerlink" title="hadoop是什么，能干什么？"></a>hadoop是什么，能干什么？</h5><p>解决问题：</p><ul><li>海量数据的存储（HDFS），分布式存储系统</li><li>海量数据的分析（MapReduce），分布式计算模型</li></ul><p>能干什么？<br>大数据存储，大数据分析</p><h5 id="hadoop2-x"><a href="#hadoop2-x" class="headerlink" title="hadoop2.x"></a>hadoop2.x</h5><p>提供了YERN（资源调度系统），可以运行各种计算模型。<br>可以运行自家的MapReduce（处理离线数据），也可以运行Storm、Spark等处理实时数据。</p><h3 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h3><h5 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h5><p>主节点，只有一个：namenode，2.0版本之后有多个，相当于老大，作用：</p><ul><li>接收用户操作请求</li><li>维护文件系统的目录结构</li><li>管理文件与block之间关系、block与datanode之间关系</li></ul><p>从节点，有很多个：datanodes，作用：</p><ul><li>存储文件，文件被分成block存储在磁盘上</li><li>为保证数据安全，文件会有多个副本</li></ul><h5 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h5><ul><li>本地模式</li><li>伪分布式模式</li><li>集群模式</li></ul><h3 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h3><ol><li>准备工作（关防火墙，改ip、hostname）</li><li>安装（JDK、hadoop）</li><li>启动测试（ssh免登陆等）</li></ol><span id="more"></span><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h5 id="改ip、hostname"><a href="#改ip、hostname" class="headerlink" title="改ip、hostname"></a>改ip、hostname</h5><p>先查看下ip和主机名：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br><span class="hljs-attribute">hostname</span><br></code></pre></td></tr></table></figure><p>修改ip有三种方式：</p><ol><li>图形界面修改。设置IPv4 method为Manual，这样每次启动后虚拟机的IP不会改变。</li><li>setup命令。（redhat旗下专属）</li><li>修改配置文件。</li></ol><p>修改配置：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-eth0<br></code></pre></td></tr></table></figure><p>修改BOOTPROTO&#x3D;”static”，增加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">IPADDR</span>=<span class="hljs-string">&quot;192.168.8.88&quot;</span><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-string">&quot;255.255.255.0&quot;</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-string">&quot;192.168.8.1&quot;</span><br><span class="hljs-comment"># 上网DNS</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-string">&quot;8.8.8.8&quot;</span><br><span class="hljs-attr">DNS2</span>=<span class="hljs-string">&quot;8.8.4.4&quot;</span><br></code></pre></td></tr></table></figure><p>修改主机名：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>sysconfig/network<br>HOSTNAME=zc01    <span class="hljs-comment">###</span><br></code></pre></td></tr></table></figure><p>修改IP与主机名的映射关系（host文件）：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">vim /etc/hosts<br><span class="hljs-number">192.168.8.88</span>zc01<br></code></pre></td></tr></table></figure><p>为了确保主机能与虚拟机进行通信，虚拟机的配置应使用<code>hostonly</code>模式：</p><div align=center>![VM01](/images/VM01.PNG)</div><p>设置网络配置的vmnetcfg.exe和VW启动的exe在同一目录。</p><p>设置里面也要进行配置：</p><div align=center>![VM02](/images/VM02.PNG)</div><p>设置Win10的IP就是走VMnet1这个网卡，需要设置Win10的IP：</p><div align=center>![VM03](/images/VM03.PNG)</div><p>虚拟机的IP为192.168.8.88，Win10的IP为192.168.8.100。<br>设置完成后相互能<code>ping</code>通，说明可以通信。</p><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><p>为了集群之间能更好的通信。</p><p>查看一下防火墙状态：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service iptables status</span><br></code></pre></td></tr></table></figure><p>有信息说明是开启的。<br>关闭服务：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">service iptables stop<br></code></pre></td></tr></table></figure><p>这样只是<code>暂时</code>关闭了！不能保证机器重启时防火墙服务依然开启。那么应该查看启动状态：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">chkconfig iptables <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><p>打印出：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@localhost Desktop]<span class="hljs-comment"># chkconfig iptables --list</span><br>iptables       <span class="hljs-number">0</span>:<span class="hljs-literal">off</span><span class="hljs-number">1</span>:<span class="hljs-literal">off</span><span class="hljs-number">2</span>:<span class="hljs-literal">on</span><span class="hljs-number">3</span>:<span class="hljs-literal">on</span><span class="hljs-number">4</span>:<span class="hljs-literal">on</span><span class="hljs-number">5</span>:<span class="hljs-literal">on</span><span class="hljs-number">6</span>:<span class="hljs-literal">off</span><br></code></pre></td></tr></table></figure><p>可以看到当启动状态为2~5时（之前的基础知识）服务会启动，因此我们要防止此服务在启动linux时自动开启。</p><p>关闭防火墙开机启动：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">chkconfig</span> iptables <span class="hljs-literal">off</span><br></code></pre></td></tr></table></figure><p>再次查看系统状态就发现都是off了。</p><p>都配置完后<code>reboot</code>重启一下机器。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h5 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h5><p>安装JDK，这是经常操作了，过一遍就行。</p><ol><li>创建新文件夹<code>mkdir /usr/java</code>，这个一个好习惯。</li><li>下载、解压<code>tar -zxvf xxx</code>等。</li><li>环境变量。</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim /etc<span class="hljs-built_in">/profile</span><br><span class="hljs-built_in"></span><span class="hljs-comment"># 在文件最后添加</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/usr/java/jdk1.8.0_171<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$JAVA_HOME/bin<br></code></pre></td></tr></table></figure><p>最后使配置生效<code>source /etc/profile</code>，我安装的1.8版本的JDK。</p><h5 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h5><p>根目录下新建<code>/hadoop</code>目录，下载二进制包到此目录下。<br>解压<code>tar -zxvf hadoop-2.8.4.tar.gz</code>。</p><p><a href="http://hadoop.apache.org/releases.html">下载地址</a>，我是下载的2.8.4版本的二进制包。</p><p>修改配置文件，一个是修改5个：</p><p>以下配置文件都是在一个目录下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@zc01 etc]<span class="hljs-comment"># cd /hadoop/hadoop-2.8.4/etc/hadoop/</span><br>[root@zc01 hadoop]<span class="hljs-comment"># ls</span><br>capacity-scheduler.<span class="hljs-keyword">xml</span>      <span class="hljs-title">httpfs-env</span>.sh            mapred-env.sh<br>configuration.xsl           httpfs-log4j.properties  mapred-queues.xml.template<br>container-executor.cfg      httpfs-signature.secret  mapred-site.<span class="hljs-keyword">xml</span><br><span class="hljs-title">core-site</span>.<span class="hljs-keyword">xml</span>               <span class="hljs-title">httpfs-site</span>.<span class="hljs-keyword">xml</span>          <span class="hljs-title">slaves</span><br>hadoop-env.cmd              kms-acls.<span class="hljs-keyword">xml</span>             <span class="hljs-title">ssl-client</span>.xml.example<br>hadoop-env.sh               kms-env.sh               ssl-server.xml.example<br>hadoop-metrics2.properties  kms-log4j.properties     yarn-env.cmd<br>hadoop-metrics.properties   kms-site.<span class="hljs-keyword">xml</span>             <span class="hljs-title">yarn-env</span>.sh<br>hadoop-policy.<span class="hljs-keyword">xml</span>           <span class="hljs-title">log4j</span>.properties         yarn-site.<span class="hljs-keyword">xml</span><br><span class="hljs-title">hdfs-site</span>.<span class="hljs-keyword">xml</span>               <span class="hljs-title">mapred-env</span>.cmd<br></code></pre></td></tr></table></figure><p>都是用vim直接编辑修改，在Linux基础博客有讲到vim。</p><h6 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h6><p>修改JAVA_HOME变量：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">#第<span class="hljs-number">27</span>行<br><span class="hljs-keyword">export</span> JAVA_HOME=/usr/java/jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0</span>_171<br>````<br><br>###### core-site.xml<br></code></pre></td></tr></table></figure><!-- 指定HDFS的老大（NameNode）的地址 --><property>    <name>fs.defaultFS</name>    <value>hdfs://192.168.8.88:9000</value></property><!-- 指定hadoop运行时产生文件的存储目录 --><property>    <name>hadoop.tmp.dir</name>    <value>/hadoop/hadoop-2.8.4/tmp</value></property><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>###### hdfs-site.xml<br></code></pre></td></tr></table></figure><!-- 指定HDFS副本的数量（包括自己，集群时默认为3） --><property>    <name>dfs.replication</name>    <value>1</value></property><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>###### mapred-site.xml<br>此文件不存在，先重命名一下：<br></code></pre></td></tr></table></figure>mv mapred-site.xml.template mapred-site.xmlvim mapred-site.xml<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><!-- 指定mr运行在yarn上 --><property>    <name>mapreduce.framework.name</name>    <value>yarn</value></property><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>###### yarn-site.xml<br></code></pre></td></tr></table></figure><!-- reducer取数据的方式是mapreduce_shuffle --><property>    <name>yarn.nodemanager.aux-services</name>    <value>mapreduce_shuffle</value></property><!--指定YARN的老大ResourceManager的地址--><property>    <name>yarn.resourcemanager.hostname</name>    <value>zc01</value></property><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs"><br>最后将hadoop添加到环境变量中：<br></code></pre></td></tr></table></figure>vim /etc/profileexport HADOOP_HOME=/hadoop/hadoop-2.8.4export PATH=$PATH:$HADOOP_HOME/binsource /etc/profile<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>至此，已经完成了hadoop的安装工作。<br><br>### 启动hadoop<br>初始化HDFS（namenode）第一次使用时要格式化：<br>`hadoop namenode -format`，打印出如下说明格式化成功：<br></code></pre></td></tr></table></figure>18/07/04 19:47:06 INFO common.Storage: Storage directory /hadoop/hadoop-2.8.4/tmp/dfs/name has been successfully formatted.<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>启动hadoop，先启动HDFS，`cd /hadoop/hadoop-<span class="hljs-number">2.8</span>.<span class="hljs-number">4</span>`切换到hadoop目录：<br>`sbin/start-dfs.sh`启动DFS，`sbin/start-yarn.sh`再启动YARN。<br><br>也可以直接启动全部：`sbin/start-all.sh`（过时）<br><br>判断是否启动成功？<br>命令`jps`打印出Java进程，共有如下进程：<br></code></pre></td></tr></table></figure>6624 SecondaryNameNode7042 NodeManager6394 DataNode6301 NameNode6766 ResourceManager7070 Jps<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">说明启动成功！<br><br>也可以在Windows的浏览器直接访问：<br></code></pre></td></tr></table></figure>http://192.168.8.88:50070  (HDFS管理界面)http://192.168.8.88:8088 （MR管理界面）```<p>如图：</p><div align=center>![hadoop1-1](/images/hadoop1-1.PNG)</div><div align=center>![hadoop1-2](/images/hadoop1-2.PNG)</div><p>说明hadoop伪分布式环境搭建完成！</p><h3 id="解决输入多次密码的问题"><a href="#解决输入多次密码的问题" class="headerlink" title="解决输入多次密码的问题"></a>解决输入多次密码的问题</h3><p>在启动和停止hadoop的指令中，需要输入多次密码，一台机器还是可以忍受的。</p><p>如果是很多机器，每次输入密码太麻烦了，如何免密码启动？</p><p>解决：配置ssh免登陆：<br><code>/root</code>目录下有隐藏的<code>.ssh</code>目录，先cd到这个目录，生成秘钥：<br><code>ssh-keygen -t rsa -C &quot;zhang0chao0@gmail.com&quot;</code><br>一路回车即可。</p><p>设置自己对自己免登陆，一行命令：<br><code>cp id_rsa.pub authorized_keys</code>即可。</p><p>拓展：<br>想免登录密码登录其它的机器，一行命令<code>ssh-copy-id [IP地址]</code>，把自己的公钥拷贝到要登录的机器上即可免秘钥登录。</p><h3 id="启动过程中的异常"><a href="#启动过程中的异常" class="headerlink" title="启动过程中的异常"></a>启动过程中的异常</h3><p>可以查看日志来解决。<br><code>cd /hadoop/hadoop-2.8.4/logs</code>，相关的日志都在这个文件夹中。</p>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux基础5-网络命令</title>
    <link href="/2018/02/13/linux/linux%E5%9F%BA%E7%A1%805-%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/"/>
    <url>/2018/02/13/linux/linux%E5%9F%BA%E7%A1%805-%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>主要总结一下基础的网络命令。</p><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h5 id="who"><a href="#who" class="headerlink" title="who"></a>who</h5><p>查看用户的登录信息</p><h5 id="w"><a href="#w" class="headerlink" title="w"></a>w</h5><p>和<code>who</code>一样，显示结果中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tty</span>：代表本地登录<br>pts：代表远程终端登录<br></code></pre></td></tr></table></figure><h5 id="write"><a href="#write" class="headerlink" title="write"></a>write</h5><p>简单的即时通信，给用户发信息，以<code>Ctrl+D</code>保存结束<br><code>write [用户名]</code>：用户不在登录状态是收不到的，可以用<code>w</code>命令，看看哪些用户在登录状态</p><h5 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h5><p>如何群发登录用户？<br><code>wall [消息内容]</code>：所有的登录用户都可以收到</p><span id="more"></span><h5 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h5><p>探测消息，网络是否通？<br>语法：<code>ping [选项] [IP地址]</code>，参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c：指定发送次数</span><br></code></pre></td></tr></table></figure><p>例如：<code>ping -c3 127.0.0.1</code></p><h5 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h5><p>查看网卡信息，windows里面叫<code>ipconfig</code>，eth0代表本地的真实网卡，主要是查看机器的IP地址</p><h5 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h5><p>邮件命令，向某一个用户发送邮件<br>语法：<code>mail [用户名]</code><br>查看邮件：<br>mail即可，help查看支持的命令格式，输入数字代表查看第几封邮件，参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">h：列出所有邮件<br>d <span class="hljs-selector-attr">[数字]</span>：删除某封邮件<br><span class="hljs-selector-tag">q</span>：退出<br></code></pre></td></tr></table></figure><h5 id="last"><a href="#last" class="headerlink" title="last"></a>last</h5><p>列出目前与过去用户登入系统的信息，重启系统信息等</p><h5 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h5><p>列出用户最后一次登录系统的信息</p><h5 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h5><p><code>非常重要</code>的一个命令，显示数据包到主机间的路径<br>例如：<code>traceroute www.baidu.com</code></p><p>如果网断了，可以用这个命令查看在哪一个IP节点丢包的</p><h5 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h5><p>显示网络相关信息<br>语法：<code>netstat [选项]</code>，参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-t：TCP协议</span><br><span class="hljs-deletion">-u：UDP协议</span><br><span class="hljs-deletion">-l：监听</span><br><span class="hljs-deletion">-r：路由</span><br><span class="hljs-deletion">-n：显示IP地址和端口号</span><br></code></pre></td></tr></table></figure><p>例子：<br><code>netstat -tlun</code>：查看本机监听的端口（可以查看本机开了哪些服务）<br><code>netstat -an</code>：查看本机所有的网络连接<br><code>netstat -rm</code>：查看本机路由表（查询本机网关）</p><h5 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h5><p>调出详细配置页面（红帽系列的系统才有这个命令）</p><p>配置完后重启网络服务：<code>service network restart</code></p><h5 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h5><p>挂载光盘，卸载光盘<br>语法：<code>mount [-t iso9660] [设备文件名] [挂载点]</code></p><p>例子（&#x2F;dev是放设备的目录，&#x2F;mnt是挂载目录，在里面新建一个自己的挂载点）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount -t iso9660 <span class="hljs-regexp">/dev/</span>sr0 <span class="hljs-regexp">/mnt/</span>cdrom<br>mount <span class="hljs-regexp">/dev/</span>sr0 <span class="hljs-regexp">/mnt/</span>cdrom，也行<br></code></pre></td></tr></table></figure><p>卸载光盘：<code>unmount /dev/sr0</code>，或者<code>unmount /mnt/cdrom</code></p><p>注意卸载时当前目录不能为挂载目录，否则会提示busy</p><h3 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h3><h5 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h5><p>关机重启命令（推荐shutdown，安全性高）<br>语法：<code>shutdown [选项] [时间]</code>，参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c：取消前一个关机命令</span><br><span class="hljs-deletion">-h：关机</span><br><span class="hljs-deletion">-r：重启</span><br></code></pre></td></tr></table></figure><p>其它关机命令：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">halt<br>poweroff<br><span class="hljs-keyword">init</span> <span class="hljs-number">0</span><br>其它重启命令<br>reboot<br><span class="hljs-keyword">init</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>启动选项，打开配置文件<code>cat /etc/inittab</code>，小知识：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">0：关机<br>1：单用户<br>2：不完全多用户，不含NFS文件共享服务<br>3：完全多用户（一般服务器是这个）<br>4：未分配<br>5：图形界面（一般个人机，虚拟机）<br>6：重启<br></code></pre></td></tr></table></figure><h5 id="runlevel"><a href="#runlevel" class="headerlink" title="runlevel"></a>runlevel</h5><p>查询当前运行级别</p><h5 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h5><p>退出登录命令（操作完服务器记得退出）</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>linux基础4-软件包管理</title>
    <link href="/2018/02/12/linux/linux%E5%9F%BA%E7%A1%804-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <url>/2018/02/12/linux/linux%E5%9F%BA%E7%A1%804-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>主要学习各种软件包的管理：源码包，二进制包，rpm包。</p><h3 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h3><p>软件包分为：</p><ol><li>源代码包</li><li>二进制包（RPM包、系统默认包）</li></ol><h5 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h5><p>RPM包的依赖性查询：<code>www.rpmfind.net</code></p><p>手动安装rpm包的最大坏处：<br>一个包的依赖太多，a-&gt;b-&gt;c树形依赖，或者a-&gt;b-&gt;c-&gt;a环形依赖，使得安装rpm包变得很复杂</p><p>RPM安装：<br>语法：<code>rpm -ivh [包全名]</code>，参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-i（install）：安装</span><br><span class="hljs-deletion">-v（verbose）：显示详细信息</span><br><span class="hljs-deletion">-h（hash）：显示进度</span><br><span class="hljs-deletion">--nodeps：不检测依赖性</span><br></code></pre></td></tr></table></figure><span id="more"></span><p>RPM包升级：<br>语法：<code>rpm -Uvh [包全名]</code>，参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-U：升级</span><br></code></pre></td></tr></table></figure><p>RPM包卸载：<br>语法：<code>rpm -e [包名]</code> （这个是包名而不是全名）</p><p>RPM包查询（重要）：</p><ol><li>查询是否安装：<code>rpm -q [包名]</code></li><li>查询所有已经安装的RPM包<code>rpm -qa</code>，只看所有包中关于<code>httpd</code>的包：<code>rpm -qa | grep httpd</code></li><li>查询软件包详细信息：<code>rpm -qi [包名]</code>，<code>-i</code>：查询软件信息，<code>-p</code>：查询未安装包信息（指定包全名）</li><li>查询包中文件安装位置：<code>rpm -ql [包名]</code></li><li>查询系统文件属于哪个RPM包：<code>rpm -qf [系统文件名]</code></li><li>查询软件包的依赖性：<code>rpm -qR [包名]</code></li></ol><p>RPM包校验：<br>语法：<code>rmp -V [包名]</code><br>如果没有任何提示，说明这个包自安装以来就没被修改过</p><div align=center>![linux_rpm1](/images/linux_rpm1.PNG)</div><div align=center>![linux_rpm2](/images/linux_rpm2.PNG)</div><h5 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h5><p>为了解决rpm包的层层安装，解决依赖性问题，推荐使用<code>yum</code>直接安装</p><p>yum源：<br><code>vim /etc/yum.repos.d/CentOS-Base.repo</code>：打开默认的配置文件</p><div align=center>![linux_yum](/images/linux_yum.PNG)</div><p>常用的yum命令：<br><code>yum list</code>：查询所有可用的软件包列表<br><code>yum search [包名]</code>：搜索服务器上所有和关键字相关的包<br><code>yum -y install [包名]</code>：安装软件包<br><code>-y</code>：自动回答yes</p><p>升级软件包（如果不加包名会升级所有软件包，包括linux内核，会导致服务器崩溃，慎用）：<br><code>yum -y update [包名]</code></p><p>卸载软件包（和升级一样，小心使用，一定要写包名；慎用，卸载可能删掉某些公用包导致其它软件无法正常使用）：<br><code>yum -y remove [包名]</code></p><p><code>yum grouplist</code>：列出所有可用的软件组<br><code>yum groupinstall [软件组名]</code>：安装软件组<br><code>yum groupremove [软件组名]</code>：卸载指定软件组</p><h5 id="安装源码包"><a href="#安装源码包" class="headerlink" title="安装源码包"></a>安装源码包</h5><p>源码包保存位置：<code>/usr/local/src</code><br>软件安装位置：<code>/usr/local/</code></p><p>查看这个文件夹占用多大空间<br><code>du -sh [目录名]</code></p><p>安装源码包步骤（以安装apache为例）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">准备：下载源码包，解压，进入解压目录（INSTALL文件有安装步骤和提示）<br>命令：<br>.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>apache2（定义安装目录）<br>作用：<br><span class="hljs-number">1</span>.定义需要的功能选项<br><span class="hljs-number">2</span>.检测环境是否符合安装需求<br><span class="hljs-number">3</span>.把定义好的功能选项和信息写入Makefile文件，用于后续的编译<br></code></pre></td></tr></table></figure><p>然后执行<code>make</code>命令编译（前提linux已安装<code>gcc</code>，如果make失败可以用<code>make clean</code>来清除编译产生的临时数据）<br>最后<code>make install</code>编译安装</p><p>源码包的卸载直接删除安装后的文件夹即可，例如直接<code>rm -rf /usr/local/apache2</code>就可以完成卸载<br>有的软件包有自动安装脚本，直接运行<code>./setup.sh</code>即可完成安装</p><p>如果是下载的已经编译好的二进制文件，只需要解压后即可使用。例如java环境等，但为了方便操作，一般需要配置环境变量或者生成软连接到<code>/usr/local/bin/</code>目录下</p><h3 id="启动一个服务"><a href="#启动一个服务" class="headerlink" title="启动一个服务"></a>启动一个服务</h3><p>语法：<code>[绝对路径] start</code><br>例如<code>/etc/rc.d/init.d/httpd start</code>，这种启动方式适用于自己手动安装的软件包</p><p>另一种启动方式：<code>service httpd start</code>，适用于用rpm包安装的软件和yum安装的软件</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>linux基础3-权限管理</title>
    <link href="/2018/02/12/linux/linux%E5%9F%BA%E7%A1%803-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <url>/2018/02/12/linux/linux%E5%9F%BA%E7%A1%803-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>介绍一下linux中关于权限的操作。在文件管理中谈到，linux权限人分为：所有者，所属组和其他人，对文件的操作分为<code>r</code>读权限，<code>w</code>写权限和<code>x</code>执行权限，这节细说权限和讲如何更改权限。<br>截一张图细说<code>rwx</code>区别：</p><div align=center>![linux_rwx](/images/linux_rwx.PNG)</div><p>注意：删除一个文件不需要对此文件有写权限，只需要有对该文件所在的目录有写权限即可。</p><span id="more"></span><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><h5 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h5><p><code>chmod [&#123;ugoa&#125;&#123;+-=&#125;&#123;rwx&#125;] [文件或目录]</code>：改变文件或目录权限<br>-R 递归修改<br>举例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>所有者加上执行权限<br>chmod u+x xxx.txt<br><span class="hljs-regexp">//</span>所有组加上写权限，其他人减去读权限<br>chmod g+w,o-r xxx.txt<br><span class="hljs-regexp">//</span>所有组的权限等于rwx<br>chmod g=rwx xxx.txt<br></code></pre></td></tr></table></figure><p>另一种数字的表示方法：<br>r —- 4<br>w —- 2<br>x —- 1</p><p>相互转化：<br>532 &#x3D;&gt; r-x-wx-w-<br>5代表u权限<br>3代表g权限<br>2代表o权限</p><h5 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h5><p><code>useradd xxx</code>：创建用户<br><code>passwd xxx</code>：更改用户密码<br><code>groupadd xxx</code>：创建用户组</p><h5 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h5><p><code>chown [用户] [文件或目录]</code>：改变文件的所有者，只有管理员root才能执行。<br><code>chgrp [用户组] [文件或目录]</code>：改变文件的所属组</p><h5 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h5><p>如何更改创建文件或文件夹时的默认权限？<br><code>umask -S</code>：查看默认权限<br>注意：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">直接umask显示0022，实际权限计算：首字母0不算，<span class="hljs-attribute">777-022</span>=755就是实际表示的权限<br></code></pre></td></tr></table></figure><p><code>umask 023</code>：更改默认权限为777-023&#x3D;754</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>linux基础2-文件编辑</title>
    <link href="/2018/02/12/linux/linux%E5%9F%BA%E7%A1%802-%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91/"/>
    <url>/2018/02/12/linux/linux%E5%9F%BA%E7%A1%802-%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>文件查看、浏览、编辑的命令有很多，这里就当做个笔记了。</p><h3 id="文件浏览或编辑"><a href="#文件浏览或编辑" class="headerlink" title="文件浏览或编辑"></a>文件浏览或编辑</h3><h5 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h5><p>创建一个文件，关于带空格的文件名，不建议创建。<br>如果文件名必须带空格，可以用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> <span class="hljs-string">&quot;pro files&quot;</span><br></code></pre></td></tr></table></figure><p>用双引号包含。所有命令中对带空格的文件名，都必须用双引号括住。</p><h5 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h5><p><code>cat [文件名]</code>：查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> -n：查看行号<br></code></pre></td></tr></table></figure><h5 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h5><p><code>tac [文件名]</code>：倒着查看文件</p><span id="more"></span><h5 id="more"><a href="#more" class="headerlink" title="more"></a>more</h5><p>如何浏览大文件？<br><code>more [文件名]</code>：浏览大文件（分页）<br>技巧：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">空格，f：翻页查看（下一页）<br>回车：一行一行查看<br><span class="hljs-selector-tag">q</span>：退出浏览<br></code></pre></td></tr></table></figure><h5 id="less"><a href="#less" class="headerlink" title="less"></a>less</h5><p>相比more，如何搜索，向上翻页？<br><code>less [文件名]</code>：分页查看大文件<br>在more命令的基础上：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">PgUp向上翻页<br>/搜索关键字，按键<span class="hljs-built_in">n</span>，跳至下一个关键字<br></code></pre></td></tr></table></figure><h5 id="head"><a href="#head" class="headerlink" title="head"></a>head</h5><p>只想看前几行？<br><code>head -n xx [文件名]</code><br>默认显示前10行</p><p>反之，想看后几行？<br><code>tail -n xx [文件名]</code><br>默认10行<br><code>tail -f</code>可以动态查看。</p><h3 id="链接的创建"><a href="#链接的创建" class="headerlink" title="链接的创建"></a>链接的创建</h3><p>软链接：<code>ln -s [原文件] [链接文件]</code><br>硬链接：<code>ln [原文件] [链接文件]</code><br>软链接相当于原文件的快捷方式。权限都是rwx。<br>硬链接相当于原文件的拷贝，但是这两个文件可以同步更新，且这两个文件的i节点相同。硬链接不能跨分区生成。</p><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>强大的文本编辑器<br>语法：<code>vim [文件名]</code></p><p>编辑模式：<code>i，a，o，I，A，O</code>，退出编辑模式按<code>Esc</code></p><div align=center>![linux_vim1](/images/linux_vim1.PNG)</div><p>命令模式：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gams">:<span class="hljs-keyword">set</span> nu 设置行号<br>:<span class="hljs-keyword">set</span> <span class="hljs-comment">nonu</span> 取消行号<br>gg 第一行<br>G 最后一行<br>nG 到第<span class="hljs-comment">n</span>行<br>:n 到第<span class="hljs-comment">n</span>行<br>$ 移至行尾<br>0 移至行首<br></code></pre></td></tr></table></figure><p>复制剪切操作：</p><div align=center>![linux_vim2](/images/linux_vim2.PNG)</div><p>删除操作：</p><div align=center>![linux_vim3](/images/linux_vim3.PNG)</div><p>替换字符和取消操作：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">r</span>：替换光标所在的字符<br><span class="hljs-built_in">R</span>：从光标处开始替换字符，按[<span class="hljs-type">Esc</span>]结束<br>u：取消上一步的操作<br></code></pre></td></tr></table></figure><p>搜索和less，more一样：按&#x2F;来搜索，n切换下一个结果，搜索时忽略大小写：<code>:set ic</code></p><p>替换字符串：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:%s/oldstr/newstr/g</span>：全文替换<br><span class="hljs-symbol">:n1</span>,n2s/oldstr/newstr/g：在指定范围内替换<br></code></pre></td></tr></table></figure><p>最后退出vim：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:w</span> 保存修改<br><span class="hljs-symbol">:w</span> new_file 另存为指定文件<br><span class="hljs-symbol">:wq</span> 保存修改并退出<br><span class="hljs-symbol">:q!</span> 不保存修改退出<br><span class="hljs-title class_">ZZ</span> 快捷键退出，相当于wq了<br></code></pre></td></tr></table></figure><p>高级vim操作，技巧<br><code>:r [文件名]</code>：导入其它文件到当前光标处<br><code>:![命令名]</code>：在不退出vim的情况下执行命令<br><code>:r ![命令名]</code>：将执行命令的结果导入当前光标处<br><code>:n1,n2s/^/#/g</code>：连续注释行<br><code>:n1,n2s/^#/ /g</code>：把连续注释的行去掉<br><code>:ab mymail xxxx@abc.com</code>：替换，这样的话，在vim编辑中，只要输入mymail后，都会被替换成指定值</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>linux基础1-文件管理</title>
    <link href="/2018/02/12/linux/linux%E5%9F%BA%E7%A1%801-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/2018/02/12/linux/linux%E5%9F%BA%E7%A1%801-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前linux基础太差，干啥都要百度，很不方便，所以决定系统化的学习一下，恶补恶补。这几个系列也算是我的学习笔记了。</p><h3 id="基础常识"><a href="#基础常识" class="headerlink" title="基础常识"></a>基础常识</h3><p>windows文件系统格式有：FAT16，FAT32，NTFS；linux有：EXT2，EXT3，EXT4。<br>Linux不区分文件扩展名，有的特殊文件（压缩包）有扩展名是为了管理员区分方便。这个跟windows不一样。</p><h3 id="运营者需要了解的"><a href="#运营者需要了解的" class="headerlink" title="运营者需要了解的"></a>运营者需要了解的</h3><ol><li>远程服务器不允许关机，只能重启。（某种情况远程关了，打开麻烦）</li><li>重启时应该关闭所有服务。</li><li>不在访问高峰期执行高负载命令。</li><li>远程配置防火墙时不要把自己踢出服务器。</li><li>指定合理的密码规范并定期更新。</li><li>合理分配权限。</li><li>定期备份重要数据和日志。</li></ol><span id="more"></span><h3 id="Linux各个目录的含义"><a href="#Linux各个目录的含义" class="headerlink" title="Linux各个目录的含义"></a>Linux各个目录的含义</h3><p>这里截了几张图片：</p><div align=center>![linux_dir1](/images/linux_dir1.PNG)</div><div align=center>![linux_dir2](/images/linux_dir2.PNG)</div><div align=center>![linux_dir3](/images/linux_dir3.PNG)</div><h3 id="命令规则"><a href="#命令规则" class="headerlink" title="命令规则"></a>命令规则</h3><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">命令 [-选项] [参数]<br>举例： <span class="hljs-built_in">ls</span> -la /etc<br></code></pre></td></tr></table></figure><p>简化选项与完整选项：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">-<span class="hljs-keyword">a</span> 等于 <span class="hljs-comment">--all</span><br>简化选项：- 加 简化字母<br>完整选项：<span class="hljs-comment">-- 加 完整字母</span><br></code></pre></td></tr></table></figure><h3 id="基础的文件管理命令"><a href="#基础的文件管理命令" class="headerlink" title="基础的文件管理命令"></a>基础的文件管理命令</h3><h5 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h5><p>作用：列出所有的文件和目录。<br>常用选项：<br>-a 显示所有文件，包括隐藏文件<br>-l 显示详细信息<br>-d 查看目录属性（只查看这个目录，而不查看目录下的文件信息）<br>-h 更友好的显示，例如 ls -lh，文件大小会帮你换算为K<br>-i 查看文件的节点序号（相当于id号，linux中任何文件或目录都有唯一标识的id号，便于系统管理）</p><p>举例：<br>输入<code>ls -l</code>，结果：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">-rw-rw-r--.<span class="hljs-number"> 1 </span>zhangchao zhangchao  <span class="hljs-number"> 22 </span>Feb <span class="hljs-number"> 6 </span>20:17 hh<br></code></pre></td></tr></table></figure><p>依次表示的信息是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">- 开头代表一个文件，d 开头代表是一个目录，l开头代表一个软链接<br>rw-rw-r--. 代表权限信息，<span class="hljs-number">3</span>个一拆分，<span class="hljs-selector-attr">[rw-]</span>、<span class="hljs-selector-attr">[rw-]</span>和<span class="hljs-selector-attr">[r--]</span>，分别是所有者，所属组，其他人的权限<br><span class="hljs-number">1</span> 代表调用次数<br>后面两个用户代表：所有者，所有组<br>文件大小<br>最后一次修改时间/创建时间<br>文件名<br></code></pre></td></tr></table></figure><p>关于linux的权限的小知识：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ada">u 所有者<br>g 所有组<br>o 其他人<br>r 读<br>w 写<br>x 执行<br><br>-rw-rw-r<span class="hljs-comment">--. 的意思是</span><br>-：这是一个文件<br>rw-：它的所有者有读写权限<br>rw-：它的所有组有读写权限<br>r<span class="hljs-comment">--：其他人有读权限</span><br></code></pre></td></tr></table></figure><h5 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h5><p>作用：创建一个目录<br>如果我要创建&#x2F;a&#x2F;b&#x2F;c目录，本身a目录是不存在的，即如何递归创建？<br><code>mkdir -p</code>即可递归创建。<br>创建目录可以同时创建多个目录，用空格隔开。</p><p>有关的小命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 切换到某个目录（基础之基础）<br><span class="hljs-built_in">pwd</span> 显示当前目录的完整路径（现在<span class="hljs-built_in">cd</span>的是哪个目录？）<br><span class="hljs-built_in">rmdir</span> 删除空目录（只能删除空目录）<br></code></pre></td></tr></table></figure><h5 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h5><p>作用：原意copy，即文件的复制。可以复制多个文件，复制的同时可以给文件重命名。<br>用法：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">cp</span> [原文件] [新的位置]<br><span class="hljs-keyword">cp</span> -r 复制目录<br><span class="hljs-keyword">cp</span> -p 保留原文件的属性<br></code></pre></td></tr></table></figure><h5 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h5><p>作用：移动&#x2F;剪切文件或目录（不需要加<code>-r</code>），文件的重命名。<br>用法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">mv <span class="hljs-selector-attr">[原文件]</span> <span class="hljs-selector-attr">[新的位置]</span><br>mv <span class="hljs-selector-attr">[原文件]</span> <span class="hljs-selector-attr">[新名字]</span><br></code></pre></td></tr></table></figure><h5 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h5><p>作用：删除一个文件、目录。<br>用法：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">rm</span> [文件]<br><span class="hljs-built_in">rm</span> <span class="hljs-literal">-r</span> [目录]<br><span class="hljs-operator">-f</span> 强制执行<br><span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> [目录] 递归的删除目录和目录里面的所有<br></code></pre></td></tr></table></figure><p>如果一不小心<code>rm -rf /</code>，就gg了。</p><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><p>文件搜索命令（windows下文件搜索工具everything）<br>基本语法：<code>find [搜索范围] [匹配条件]</code><br><code>find /home -name xxx</code>：根据名字搜索<br>如何模糊搜索？利用通配符，*匹配任意字符，?匹配单个字符，举例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">find /home -name *xxx*  （查找多个值需要<span class="hljs-string">&quot;*xxx*&quot;</span>，双引号引起来）<br></code></pre></td></tr></table></figure><p><code>find /home -iname xxx</code>：不区分大小写搜索<br>如何按文件大小来筛选？（+代表大于，-代表小于，否则等于），举例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">find</span> /home -size +<span class="hljs-number">204800</span>  （查找大于<span class="hljs-number">100</span>MB的数据，注意数据格式为数据块，<span class="hljs-number">1</span>数据块=<span class="hljs-number">512</span>B=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>KB）<br></code></pre></td></tr></table></figure><p><code>find /home -user zhangchao</code>：按用户来查找，同理用户组为<code>-group</code></p><h6 id="高级查找"><a href="#高级查找" class="headerlink" title="高级查找"></a>高级查找</h6><p><code>find /home -cmin -5</code>：在home目录下查找5分钟内被修改过属性的文件和目录，参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-amin 访问时间</span><br><span class="hljs-deletion">-cmin 文件属性</span><br><span class="hljs-deletion">-mmin 文件内容</span><br></code></pre></td></tr></table></figure><p><code>find /home -size +163840 -a -size -204800</code>：查找文件大于80MB小于100MB的文件，参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a 表示两个条件同时满足，记作and</span><br><span class="hljs-deletion">-o 表示满足任意一个条件即可，记作or</span><br></code></pre></td></tr></table></figure><p>如何根据类型查找？<br><code>-type</code>根据文件类型查找，其中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">f：文件<br>d：目录<br>l：软链接<br></code></pre></td></tr></table></figure><p>如何对查找出来的结果做进一步的操作？<br><code>find /home -name xxx -exec ls -l &#123;&#125; \;</code>：对查找出来的结果进行批量的ls -l操作，其中后面的<code>[-exec ls -l &#123;&#125; \;]</code>是一个固定的格式<code>-exec</code>可以用<code>-ok</code>代替，只是每个文件都要询问一下。<br>根据i节点查找？举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">找到当前目录下，i节点为12345的文件并删掉它<br>find . -inum 12345 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> &#123;&#125; \;<br></code></pre></td></tr></table></figure><h5 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h5><p><code>find</code>命令需要遍历查找文件夹，浪费大量资源，如何高效查找？<br><code>locate</code>命令在文件库中查找文件，不在硬盘中查找，所以速度很快，语法<code>locate [文件名]</code></p><p>如果一个文件新建不久，资料库中没有，就无法找到<br>可以使用命令<code>updatedb</code>更新资料库，<code>不会</code>更新系统的<code>/tmp</code>文件夹中的内容</p><p><code>locate -i [文件名]</code>：不区分大小写的搜寻</p><h5 id="which"><a href="#which" class="headerlink" title="which"></a>which</h5><p>特殊查找，查找命令在哪个文件夹。<br>语法：<code>which [命令名]</code><br>例如：<code>which ls</code><br>除了显示命令的地址所在，还可以显示命令的别名。例如普通的<code>ls</code>可以显示文件、文件夹的颜色，其实<code>ls</code>是<code>ls --color</code>的别名，如果要执行底层的<code>ls</code>，可以用<code>\ls</code>。</p><h5 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h5><p>语法：<code>whereis [命令名]</code><br>和<code>which</code>功能一样，<code>whereis</code>还可以查到该命令的帮助文档所在地址。</p><h5 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h5><p>查找某个确定文件中是否有某某关键字。<br>语法：<code>grep [指定匹配字符串] [文件名]</code>，参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-i：不区分大小写</span><br><span class="hljs-deletion">-v：排除指定字符串</span><br></code></pre></td></tr></table></figure><p>例：<br><code>grep -v ^# /xxx.txt</code>：排除#开头的内容</p><h5 id="man"><a href="#man" class="headerlink" title="man"></a>man</h5><p>查看指定命令的帮助手册<br>语法：<code>man [命令名]</code><br>例如：<code>man ls</code><br>如果直接查看配置文件信息，可以<code>man [配置文件名]</code><br>例如：<code>man services</code></p><blockquote><p>小知识，帮助文档的<code>文件名</code>中含有<code>1</code>代表命令的帮助，<code>5</code>代表配置文件的帮助</p></blockquote><p>其他查看帮助信息的命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">whatis</span><span class="hljs-meta"> [命令名]</span><br><span class="hljs-attribute">apropos</span><span class="hljs-meta"> [配置文件名]</span><br></code></pre></td></tr></table></figure><p>还有命令加上 –help，查看帮助<br>例如<code>ls --help</code></p><p>注意：内置shell命令（例如<code>cd</code>）无法<code>man</code>，<code>which</code>等，这时查看帮助可以用<code>help [命令名]</code><br>例如：<code>help cd</code></p><h3 id="压缩-amp-解压命令"><a href="#压缩-amp-解压命令" class="headerlink" title="压缩&amp;解压命令"></a>压缩&amp;解压命令</h3><h5 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h5><p>压缩成<code>.gz</code>格式的压缩包<br>语法：<code>gzip [文件名]</code>，生成<code>.gz</code>压缩文件<br>解压缩：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gunzip</span><span class="hljs-meta"> [压缩文件]</span><br><span class="hljs-attribute">gzip</span> -d<span class="hljs-meta"> [压缩文件]</span><br></code></pre></td></tr></table></figure><p>这种方法压缩，解压后，<code>不保留原文件</code>；<code>只能压缩文件，不能压缩目录</code>。</p><h5 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h5><p>另一种方法打包压缩<br>语法：<code>tar [选项] [压缩后文件名] [目录]</code>，参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c 打包</span><br><span class="hljs-deletion">-v 显示详细信息</span><br><span class="hljs-deletion">-f 指定文件名</span><br><span class="hljs-deletion">-z 打包的同时压缩/解压缩</span><br><span class="hljs-deletion">-x 解压缩</span><br></code></pre></td></tr></table></figure><p>例如<br><code>tar -cvf subtemp.tar subtemp</code>：仅打包<br><code>tar -cvzf subtemp.tar.gz subtemp</code>：打包并压缩，这个是最常见的压缩包<code>.tar.gz</code><br>解压时候把<code>-c</code>换成<code>-x</code>即可</p><p>注意<code>f</code>字母要写在最后，不能<code>-zcfv</code>等，<code>z</code>跟gz压缩格式有关</p><h5 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h5><p>语法：<code>zip [选项] [压缩后文件名] [文件或目录]</code>，参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-r：压缩目录</span><br></code></pre></td></tr></table></figure><p>解压：<code>unzip [压缩文件名]</code></p><h5 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h5><p>gzip的升级版，bzip2<br>语法：<code>bzip2 [选项] [文件]</code>，参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-k：产生压缩文件后保留原文件</span><br></code></pre></td></tr></table></figure><p>跟tar一起使用<br><code>tar -cvjf subtemp.tar.bz2 subtemp</code>：打包并压缩</p><p>把<code>z</code>换成<code>j</code>压缩成<code>.bz2</code>格式的压缩包，解压同理<code>-c</code>换成<code>-x</code></p><p>解压缩：<br>语法：<code>bunzip2 [压缩文件名]</code></p><p>总结一下（文件后缀只是方便人区分，linux系统不认后缀的）：</p><ol><li><code>.gz</code>是<code>gzip</code>命令压缩产生的，这个只能压缩单个文件</li><li><code>.tar</code>是<code>tar</code>命令产生的，可以打包多个文件，文件夹</li><li><code>.zip</code>是<code>zip</code>命令，其余同<code>tar</code></li><li><code>.bz2</code>是<code>gzip</code>的升级版，除了能加<code>-k</code>参数保留原文件以外，其它没功能加强</li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自己搭建VPN服务器</title>
    <link href="/2017/11/19/vpn/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2017/11/19/vpn/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近网络管理很严，以前在<a href="http://www.see-world.club/index.php/Index/seeyou.html">see world</a>上可以买节点，但是现在那个倒闭了，有时候想访问谷歌查查资料就很不方便，看了一篇教程后，就自己搭建了一个<code>VPN服务器</code>，特来分享（注：翻墙是为了学习用，不可用于商业用途如售卖节点等）。</p><h3 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h3><p>这个分为客户端和服务器端，以前服务端是购买的别人的节点，现在需要自己搭建服务，所以需要一个国外的服务器。<br>客户端自己<a href="https://github.com/shadowsocks/shadowsocks-windows/releases">下载</a>就可以。</p><h3 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h3><p>学长推荐，我是在<a href="http://banwagong.cn/gonglue.html">搬瓦工</a>上购买的：</p><div align=center>![banwagong1](/images/banwagong1.PNG)</div><p>可以看到，最便宜的只要1.99美元&#x2F;月，可是这个售空了，我买的是4.99的那个。</p><p>购买后，IP和密码都会发到你的邮箱，默认的用户名是root（用支付宝就可以直接购买，很方便）。</p><span id="more"></span><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><p>用SSH工具登录服务器，这里推荐一个一键安装的脚本，命令行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/teddysun/</span>shadowsocks_install<span class="hljs-regexp">/master/</span>shadowsocks.sh<br></code></pre></td></tr></table></figure><p>如果提示没有<code>wget</code>指令，就先</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> wget<br></code></pre></td></tr></table></figure><p>一下，有了脚本，安装也是无脑的，两行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x shadowsocks.sh<br>./shadowsocks.sh 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> shadowsocks.log<br></code></pre></td></tr></table></figure><p>输入完后，会提示让你设置密码，输好回车后会让你选择一个端口，输入 1-65535 间的数字都行。然后是设置加密方式，输入某个加密方式的序号就行。</p><div align=center>![vpn1](/images/vpn1.jpg)</div><p>慢慢等待，安装完后会把配置信息都打印出来，记住自己的配置。现在基本就可以了，用配置的信息在客户端配置就行。</p><div align=center>![vpn2](/images/vpn2.png)</div><h3 id="设置多用户"><a href="#设置多用户" class="headerlink" title="设置多用户"></a>设置多用户</h3><p>如果要设置多用户，直接编辑配置文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">nano <span class="hljs-regexp">/etc/</span>shadowsocks.json<br></code></pre></td></tr></table></figure><p>这个命令是编辑文件，可以直接修改json文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;server_port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">13162</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;local_address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;local_port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1080</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;port_password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;xxx1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxx1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;xxx2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxx2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;timeout&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">300</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rc4-md5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fast_open&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>port_password</code>字段就是端口-密码的意思，可以自己添加（ctrl+x 退出编辑，按提示保存文件）。</p><p>添加完后重启服务：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/shadowsocks restart<br></code></pre></td></tr></table></figure><p>即可生效。</p><h3 id="开启高速服务"><a href="#开启高速服务" class="headerlink" title="开启高速服务"></a>开启高速服务</h3><p>改三个文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">nano <span class="hljs-regexp">/etc/</span>rc.local<br></code></pre></td></tr></table></figure><p>末尾加上：<code>echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen</code>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">nano <span class="hljs-regexp">/etc/</span>sysctl.conf<br></code></pre></td></tr></table></figure><p>末尾加上：<code>net.ipv4.tcp_fastopen = 3</code>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">nano <span class="hljs-regexp">/etc/</span>shadowsocks.json<br></code></pre></td></tr></table></figure><p>打开配置文件，设置”fast_open”:true。</p><p>最后重启服务即可。</p>]]></content>
    
    
    <categories>
      
      <category>vpn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>翻墙教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xshell中文乱码</title>
    <link href="/2017/10/25/linux/xshell%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <url>/2017/10/25/linux/xshell%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>xshell</code>是常见的ssh连接工具，如果遇到不支持中文咋办？例如：</p><div align=center>![xshell1](/images/xshell1.PNG)</div><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>确保客户端本身的编码是UTF-8的，可以直接修改：</p><div align=center>![xshell2](/images/xshell2.PNG)</div><div align=center>![xshell3](/images/xshell3.png)</div><p>就这两处地方。</p><span id="more"></span><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>如果还不行，查看机器编码：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">root@VM-236-110-ubuntu:/home/ubuntu# locale</span><br>LANG=C<br>LANGUAGE=C:<br>LC_CTYPE=<span class="hljs-string">&quot;C&quot;</span><br>LC_NUMERIC=<span class="hljs-string">&quot;C&quot;</span><br>LC_TIME=<span class="hljs-string">&quot;C&quot;</span><br>LC_COLLATE=<span class="hljs-string">&quot;C&quot;</span><br>LC_MONETARY=<span class="hljs-string">&quot;C&quot;</span><br>LC_MESSAGES=<span class="hljs-string">&quot;C&quot;</span><br>LC_PAPER=<span class="hljs-string">&quot;C&quot;</span><br>LC_NAME=<span class="hljs-string">&quot;C&quot;</span><br>LC_ADDRESS=<span class="hljs-string">&quot;C&quot;</span><br>LC_TELEPHONE=<span class="hljs-string">&quot;C&quot;</span><br>LC_MEASUREMENT=<span class="hljs-string">&quot;C&quot;</span><br>LC_IDENTIFICATION=<span class="hljs-string">&quot;C&quot;</span><br>LC_ALL=<br></code></pre></td></tr></table></figure><p>修改编码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">root@VM-<span class="hljs-number">236</span>-<span class="hljs-number">110</span>-ubuntu:<span class="hljs-regexp">/home/u</span>buntu<span class="hljs-comment"># export LANG=en_US.UTF-8</span><br>root@VM-<span class="hljs-number">236</span>-<span class="hljs-number">110</span>-ubuntu:<span class="hljs-regexp">/home/u</span>buntu<span class="hljs-comment"># export LANGUAGE=en_US.UTF-8</span><br>root@VM-<span class="hljs-number">236</span>-<span class="hljs-number">110</span>-ubuntu:<span class="hljs-regexp">/home/u</span>buntu<span class="hljs-comment"># ls</span><br>wordpress  张超<br></code></pre></td></tr></table></figure><p>这样就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>maven开发</title>
    <link href="/2017/10/20/maven/maven%E5%BC%80%E5%8F%91/"/>
    <url>/2017/10/20/maven/maven%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>搭建好mvn环境后，命令行<code>mvn -v</code>查看maven的版本号，结果正确说明环境已经弄好。</p><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><ol><li>命令行创建工程，然后用工具打开。</li><li>直接用工具创建，本人使用的是<code>IntelliJ IDEA</code>，比myeclipse好用几倍吧。</li></ol><p>常用的命令：</p><ul><li>创建普通java工程：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn archetype:generate <span class="hljs-attribute">-DgroupId</span>=org.zhangchao <span class="hljs-attribute">-DartifactId</span>=mavenTest <span class="hljs-attribute">-DarchetypeArtifactId</span>=maven-archetype-quickstart <span class="hljs-attribute">-DinteractiveMode</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li>创建web工程：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn archetype:generate <span class="hljs-attribute">-DgroupId</span>=org.seckill <span class="hljs-attribute">-DartifactId</span>=seckill <span class="hljs-attribute">-DarchetypeArtifactId</span>=maven-archetype-webapp <span class="hljs-attribute">-DinteractiveMode</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li></ul><p>当然，直接用工具创建的话，<code>groupId</code>和<code>artifactId</code>按要求填即可。</p><span id="more"></span><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">src<br>    --main<br>        --java        <span class="hljs-regexp">//</span>普通java代码，servlet代码等<br>        --resources   <span class="hljs-regexp">//</span>项目里面的xml等配置文件<br>        --webapp      <span class="hljs-regexp">//</span>和普通的web工程一样，里面有<span class="hljs-regexp">/WEB-INF/</span>web.xml等重要配置文件<br>target   <span class="hljs-regexp">//</span>编译后文件存放目录<br>pom.xml  <span class="hljs-regexp">//</span>核心依赖配置文件<br></code></pre></td></tr></table></figure><p>注意resources文件夹，里面放了xml等重要文件，如果你在别的文件夹中也用到了xml配置，例如mybatis的mapper文件，那么项目编译时是不会读到mapper文件的。<code>这是一个坑，踩过才知道</code>，这时需要在pom.xml中的build节点里面配置，加上mapper文件，才OK。</p><h3 id="准备开发"><a href="#准备开发" class="headerlink" title="准备开发"></a>准备开发</h3><p>默认的配置如图，也可以自己配置的：</p><div align=center>![maven6](/images/maven6.PNG)</div><p>repository文件夹放的你的jar包，都是从这里读的；settings.xml是配置文件，注意核心的配置：</p><ol><li>仓库配置，基本都换成<code>阿里云仓库</code>了，因为不需要代理，快。</li><li>如果实在不想换仓库的话，就可以自己配置代理。</li></ol><p>仓库配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- mirror</span><br><span class="hljs-comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="hljs-comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span><br><span class="hljs-comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="hljs-comment">   ！--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>代理配置在这里改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">proxies</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- proxy</span><br><span class="hljs-comment">   | Specification for one proxy, to be used in connecting to the network.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">  &lt;proxy&gt;</span><br><span class="hljs-comment">    &lt;id&gt;optional&lt;/id&gt;</span><br><span class="hljs-comment">    &lt;active&gt;true&lt;/active&gt;</span><br><span class="hljs-comment">    &lt;protocol&gt;http&lt;/protocol&gt;</span><br><span class="hljs-comment">    &lt;username&gt;proxyuser&lt;/username&gt;</span><br><span class="hljs-comment">    &lt;password&gt;proxypass&lt;/password&gt;</span><br><span class="hljs-comment">    &lt;host&gt;proxy.host.net&lt;/host&gt;</span><br><span class="hljs-comment">    &lt;port&gt;80&lt;/port&gt;</span><br><span class="hljs-comment">    &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span><br><span class="hljs-comment">  &lt;/proxy&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">proxies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果你用的<code>Shadowsocks</code>的话，一般就是配<code>localhost:1080</code>了。</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>需要什么包直接去<a href="http://maven.aliyun.com/nexus/#welcome">阿里仓库</a>搜，然后把依赖配置贴pom.xml即可，例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实在不知道有哪些包的，去github下一个类似的工程，看看别人的pom.xml怎么写的就行了。</p><h3 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h3><p>用工具很快：</p><div align=center>![maven5](/images/maven5.PNG)</div><p>直接点package命令即可，或者手工命令行，这时在target目录下就有war包了，当然生成啥包取决于你在pom.xml的配置。</p><p>基本的开发就是这样，欢迎大家交流学习。</p>]]></content>
    
    
    <categories>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven中自己导入包</title>
    <link href="/2017/10/20/maven/maven%E4%B8%AD%E8%87%AA%E5%B7%B1%E5%AF%BC%E5%85%A5%E5%8C%85/"/>
    <url>/2017/10/20/maven/maven%E4%B8%AD%E8%87%AA%E5%B7%B1%E5%AF%BC%E5%85%A5%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有一种情况，有时候会遇到，你去maven中找一个jar包，居然找不到，尴尬不?也许是因为这个包太老了。</p><h3 id="自己下载"><a href="#自己下载" class="headerlink" title="自己下载"></a>自己下载</h3><p>maven仓库里面没有，不代表别处没有，此时可以通过各种途径，把jar包下载下来，但是如何把这个包融入到maven环境呢？</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>其实也是一行命令（groupId和artifactId自己填）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn install:install-file <span class="hljs-attribute">-DgroupId</span>=oracle.xdb <span class="hljs-attribute">-DartifactId</span>=oracle.xdb <span class="hljs-attribute">-Dversion</span>=1.0 <span class="hljs-attribute">-Dpackaging</span>=jar <span class="hljs-attribute">-Dfile</span>=xdb.jar <span class="hljs-attribute">-DgeneratePom</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>Dfile填jar包所在的位置，相对位置或者绝对位置都可以。</p><p>此时在pom中写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>oracle.xdb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>oracle.xdb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git高阶</title>
    <link href="/2017/08/26/git/git%E9%AB%98%E9%98%B6/"/>
    <url>/2017/08/26/git/git%E9%AB%98%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>网上类似的教程有很多，我仅把我在公司用到的常用的命令做个<code>总结</code>。并且结合项目来说，让大家更清晰一些。</p><h3 id="项目开始"><a href="#项目开始" class="headerlink" title="项目开始"></a>项目开始</h3><p>公司开了一个会，决定我们要开始xxx项目了，此时先把准备工作弄好。项目组会选择一个git平台，例如<a href="https://coding.net/">码市</a>，在上面新建一个项目。</p><p>成员登录平台，复制代码的SSH链接，把项目拉倒本地：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>t.coding.net<span class="hljs-regexp">/xxxxxx/</span>xxxxxx.git<br></code></pre></td></tr></table></figure><p>然后用本地编辑器打开项目，就能进行开发的工作了（若出现权限问题请参考<code>git入门</code>）。</p><span id="more"></span><h3 id="提交前"><a href="#提交前" class="headerlink" title="提交前"></a>提交前</h3><p>当你开发完一个功能，准备提交时，你需要关注：</p><ol><li>线上是否有人提交过。</li><li>会不会出现冲突。</li></ol><p>此时，先用：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure><p>更新一下线上的代码，若成功，说明没有冲突。</p><p>如果冲突（别人修改了你的代码），也是三步：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git stash<br>git pull<br>git stash <span class="hljs-built_in">pop</span><br></code></pre></td></tr></table></figure><p>也就是先暂存一下本地的代码，再拉下来，再从暂存区恢复代码。<br>看看控制台中打印的内容，哪些文件合并了冲突，这些文件一般都有<code>======stash</code>内容，需要你自己删除冲突前的代码区域，留下想要的代码。</p><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>三部曲：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git add xxx  <span class="hljs-regexp">//</span>xxx为你要提交的文件，*代表所有<br>git commit -m <span class="hljs-string">&quot;xxx&quot;</span>  <span class="hljs-regexp">//</span>写一段话，你做了何修改<br>git push  <span class="hljs-regexp">//</span>推送到线上仓库<br></code></pre></td></tr></table></figure><p>其实这里面有很多<code>规范</code>需要注意，否则会给部署人员带来不必要的麻烦。</p><p>哪些文件该提交，哪些不该提交？<br>这时要充分利用<code>.gitignore</code>文件，例如本地的<code>日志文件</code>、<code>测试文件</code>等，不要提交，把它们写在ignore文件中，<code>git add *</code>的时候就会忽略它们。</p><p>万一add错了咋办？<br>这是一个习惯，提交前（git commit -m “xxx”之前），先用命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><p>看看文件修改情况：</p><div align=center>![git6](/images/git6.PNG)</div><p><code>绿色</code>部分是被修改并且会准备提交到仓库的文件，<code>红色</code>部分是被修改但<code>不会</code>被提交到仓库的文件。此时你需要看一下，绿色部分是不是你想要提交的，如果不是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git reset xxx  <span class="hljs-regexp">//</span>xxx为文件名<br></code></pre></td></tr></table></figure><p>再<code>git status</code>一下，就会发现该文件已进入红色区域。</p><p>实战技巧：<br>有一次我在本地删除了一个文件，提交后线上的文件却没有删除，此时用：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git commit -<span class="hljs-keyword">a</span> -m <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><p>提交后就可以保证线上的文件也删除了。</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>一般开发会用<code>dev</code>分支，而不是<code>master</code>分支，因为<code>master</code>分支会直接对接线上的代码，安全性极高，不会让人直接修改，我开发都是在dev分支上修改，提交代码后，再由其它人员（权限较高，一般是代码负责人）合并到master分支。</p><p>查看分支：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git branch <span class="hljs-regexp">//</span>*为当前所在分支<br></code></pre></td></tr></table></figure><p>切换分支：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout dev</span><br></code></pre></td></tr></table></figure><p>推荐一个实用工具<code>SourceTree</code>，git专用，下载后用谷歌邮箱登录即可，<a href="https://www.sourcetreeapp.com/">官网</a>。</p><div align=center>![git7](/images/git7.PNG)</div><p>切换分支双击即可，复制分支什么的直接界面就可以完成，还可以只提交一个文件的部分内容。是不是感觉棒棒的~最后推荐阮大神的博客中的<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">git常用命令清单</a>。</p><p>开启你的git之旅吧~</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>node入门</title>
    <link href="/2017/08/21/node/node%E5%85%A5%E9%97%A8/"/>
    <url>/2017/08/21/node/node%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为啥会入node，我也不知道，实习中公司用我就学着写了。写了node还是有好处的，至少我几个小时就用<code>github pages</code>搭建了博客。</p><h3 id="安装node环境"><a href="#安装node环境" class="headerlink" title="安装node环境"></a>安装node环境</h3><p>不想重复造轮子了，直接推荐看<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html">这篇文章</a>，和git一样，傻瓜式双击安装。</p><h3 id="node项目"><a href="#node项目" class="headerlink" title="node项目"></a>node项目</h3><p>我github上有一个入门的项目，用node写的一个RESTful API，我能去公司实习就是写了这个给别人看了，就通过考核了。<br>欢迎<a href="https://github.com/zhang0chao0/NodeHelloWorld">下载</a>来看。</p><span id="more"></span><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>检查环境：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><p>安装一个依赖：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install xxx <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>这个包会安装到项目的<code>node_modules</code>文件夹中，具体依赖会写到<code>package.json</code>中。<br>有点类似maven，当项目部署时，我们不需要node_modules文件夹，也不能要它。在线上只需要<code>npm install</code>一下，所有的依赖包就会从package.json中读取并安装好，自动生成node_modules在线上。</p><p>安装一个依赖（全局）：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> xxx -g<br></code></pre></td></tr></table></figure><p>这个包会安装到<code>C:\Users\xx\AppData\Roaming\npm\node_modules</code>中，对所有的node项目都有效。</p><p>安装包默认在国外的仓库下载，如果你下载不成功（一般都会不成功），有两种方法：</p><ol><li>配置代理。</li><li>更改仓库为国内的淘宝npm库。</li></ol><p>如何配置请看<code>搭建hexo博客(1)</code>，里面有讲到。</p><p>好了，写node就是写js，一样的，函数什么的看<a href="http://nodejs.cn/api/addons.html">官方文档</a>，语法什么的跟js一样~</p>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git入门</title>
    <link href="/2017/08/21/git/git%E5%85%A5%E9%97%A8/"/>
    <url>/2017/08/21/git/git%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为了照顾刚入门的小白，搭建博客起来还是有点困难，特写两篇<code>git入门</code>和<code>node入门</code>来帮助他们。</p><h3 id="git是什么？"><a href="#git是什么？" class="headerlink" title="git是什么？"></a>git是什么？</h3><p>假如多个人共同开发一个项目，怎么确保<code>代码的同步</code>？假如你修改了别人的代码或者别人修改了你的代码，很容易出现<code>冲突</code>的情况。<br>于是git诞生了，如果你找工作不会用<code>git</code>，这是致命的不足。因为没有那个公司不用它！</p><h3 id="github仓库"><a href="#github仓库" class="headerlink" title="github仓库"></a>github仓库</h3><p>github&#x3D;git+hub，即git仓库。git仓库有很多，github或者国内的<a href="https://coding.net/">码市</a>，它是一个云仓库，相当于一个<code>中介</code>，我把代码上传上去，你把代码拉下来，这样我们就能共享代码。<br>而且仓库自己带有<code>解决冲突</code>的机制，帮助我们解决代码冲突！</p><span id="more"></span><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>本人是win10电脑，直接去官网<a href="https://git-for-windows.github.io/">下载</a>，点击download。下载后是一个exe文件，双击傻瓜式安装即可。<br>安装完后，随便进入一个文件夹（包括桌面），右键：</p><div align=center>![git1](/images/git1.png)</div><p>只有傻瓜才用1，点击2，进入命令行，随便打个linux的命令：</p><div align=center>![git2](/images/git2.PNG)</div><p>你会发现<code>ls</code>列出了当前目录的所有文件和文件夹，这个命令在win10 <code>cmd</code>下是无法解析的，也就是说，git完全可以代替你的windows cmd命令行，而且可以把windows当linux来耍！</p><p>最后的配置：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Your Name&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>你的名字和email地址。</p><h3 id="玩github"><a href="#玩github" class="headerlink" title="玩github"></a>玩github</h3><p>注册一个github账号。然后生成你的专属SSH key，随便进入一个目录，利用git：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>你需要把邮件地址换成你自己的邮件地址，然后<code>一路回车</code>，使用默认值即可。</p><p>如果一切顺利的话，可以在用户主目录里找到<code>C:\Users\xx\.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对。</p><div align=center>![git21](/images/git21.PNG)</div><p>进入<code>C:\Users\xx\.ssh</code>文件夹，把<code>id_rsa.pub</code>里面的密钥贴到你的github上，这是你和github通信的凭证，不然会出权限错误。一旦通信成功，会生成<code>known_hosts</code>文件，里面存放了你哪些仓库建立过链接。</p><div align=center>![git22](/images/git22.png)</div><div align=center>![git3](/images/git3.PNG)</div><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><div align=center>![git4](/images/git4.PNG)</div><p>把远程项目克隆到本地，复制链接（建议用ssh）：</p><div align=center>![git5](/images/git5.PNG)</div><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>随便进入一个文件夹：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">url</span><br></code></pre></td></tr></table></figure><p>把项目拉下来（url为你复制的链接）。</p><p>接下来就可以对项目进行开发了，开发完后提交仓库（依次命令）：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">add</span> *<br>git commit -m <span class="hljs-string">&quot;第一次提交&quot;</span><br>git <span class="hljs-keyword">push</span><br></code></pre></td></tr></table></figure><p>如果提交成功，那么github上相应的就有这个文件了。</p><p>自己动手试一下吧~</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识maven</title>
    <link href="/2017/08/20/maven/%E5%88%9D%E8%AF%86maven/"/>
    <url>/2017/08/20/maven/%E5%88%9D%E8%AF%86maven/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很久之前用过maven开发项目，但这几个月一直在公司写node.js，很少碰Java，为了不生疏，就写一系列的博客加强记忆，顺便教下小白（PS：我自己也是小白）。</p><h3 id="为什么用maven？"><a href="#为什么用maven？" class="headerlink" title="为什么用maven？"></a>为什么用maven？</h3><p>用Java框架（SSH、SSM）开发过Web项目的都知道，随着项目越做越大，在<code>WEB-INF/lib</code>目录下放的Jar包也越来越多，当你需要增加或删除一个Jar包，全靠人工记忆，非常不便于管理项目。<br>而且各个Jar包是否有<code>版本冲突</code>情况，让人头疼。</p><h3 id="maven改进"><a href="#maven改进" class="headerlink" title="maven改进"></a>maven改进</h3><p>当你需要一个Jar包时，你只需要在<code>pom.xml</code>中申明它，然后更新工程，Jar包会自动下载下来，一般在<code>C:/Users/xx/.m2/repository</code>文件夹中（看你具体怎么配置的）。<br>当<code>项目编译</code>时，Jar包才会被导入到编译后的项目目录中，随着项目发布。</p><span id="more"></span><h3 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h3><p>直接去官网<a href="http://maven.apache.org/download.cgi">下载</a>，选择这个（安装maven前必须先弄好Java环境哦）：</p><div align=center>![maven1](/images/maven1.PNG)</div><p>解压压缩包，解压后目录：</p><div align=center>![maven2](/images/maven2.PNG)</div><p>环境变量配置：</p><div align=center>![maven3](/images/maven3.PNG)</div><div align=center>![maven4](/images/maven4.PNG)</div><p>检验是否安装成功，只需命令：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> -v<br></code></pre></td></tr></table></figure><p>即可，如果出现相应版本信息就说明安装成功~</p><h3 id="创建Java项目"><a href="#创建Java项目" class="headerlink" title="创建Java项目"></a>创建Java项目</h3><p>个人建议用<code>命令行</code>来创建，更符合标准。命令行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn archetype:generate <span class="hljs-attribute">-DgroupId</span>=org.zhangchao <span class="hljs-attribute">-DartifactId</span>=mavenTest <span class="hljs-attribute">-DarchetypeArtifactId</span>=maven-archetype-quickstart <span class="hljs-attribute">-DinteractiveMode</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>参数意义：<br>DgroupId：项目包名<br>DartifactId：项目名<br>DarchetypeArtifactId：创建何种类型的项目，这里<code>maven-archetype-quickstart</code>是普通Java工程，以后会创建Web工程<br>DinteractiveMode：是否交互？是：创建的过程会让你填版本号什么的；否：按默认的值来创建</p><p>标准目录结构：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-src</span><br><span class="hljs-string">|---main</span><br><span class="hljs-string">|-----java</span><br><span class="hljs-string">|---test</span><br><span class="hljs-string">|-----java</span><br><span class="hljs-string">|-pom.xml</span><br></code></pre></td></tr></table></figure><p>好了，一个普通的maven工程就创建成功了，然后我们用编辑器打开这个项目，进行开发，我习惯用<code>IntelliJ IDEA</code>。<br>入门级介绍就写到这里，以后会写怎么<code>添加依赖</code>，怎么<code>开发</code>，怎么<code>部署发布maven项目</code>等。</p>]]></content>
    
    
    <categories>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建hexo博客(3)</title>
    <link href="/2017/08/17/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2-3/"/>
    <url>/2017/08/17/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2-3/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>看了之前的文章，你自己写文章已经OK了，如果你想把博客变得<code>更炫酷</code>（头像旋转、背景动画等），我推荐看<a href="https://segmentfault.com/a/1190000009544924">这篇文章</a>，我也是看的这个配置的，写的很好。</p><h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><p>打开<code>主题配置文件</code>，找到这个：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">Local</span> <span class="hljs-keyword">search</span><br># Dependencies: https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>github.com<span class="hljs-operator">/</span>flashlab<span class="hljs-operator">/</span>hexo<span class="hljs-operator">-</span>generator<span class="hljs-operator">-</span><span class="hljs-keyword">search</span><br>local_search:<br>  enable: <span class="hljs-literal">true</span><br>  # if auto, <span class="hljs-keyword">trigger</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">by</span> changing input<br>  # if manual, <span class="hljs-keyword">trigger</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">by</span> pressing enter key <span class="hljs-keyword">or</span> <span class="hljs-keyword">search</span> button<br>  <span class="hljs-keyword">trigger</span>: auto<br>  # <span class="hljs-keyword">show</span> top n results <span class="hljs-keyword">per</span> article, <span class="hljs-keyword">show</span> <span class="hljs-keyword">all</span> results <span class="hljs-keyword">by</span> setting <span class="hljs-keyword">to</span> <span class="hljs-number">-1</span><br>  top_n_per_article: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><span id="more"></span><p><code>enable</code>默认为false，改为true。可以看到本地search依赖一个包，需要<code>npm install</code>一下。</p><p>博客根目录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm install hexo<span class="hljs-operator">-</span>generator<span class="hljs-operator">-</span><span class="hljs-keyword">search</span> <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>即可安装依赖包。</p><p><code>博客配置文件</code>中加入：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 微信支付</span><br><span class="hljs-meta">#wechatpay: /images/wechat.png</span><br><br><span class="hljs-meta"># 自定义站点内容搜索</span><br><span class="hljs-meta"># 需要先安装插件：</span><br><span class="hljs-meta"># npm install hexo-generator-search --save</span><br><span class="hljs-symbol">search:</span><br><span class="hljs-symbol">  path:</span> search.xml<br>  <span class="hljs-meta"># 如只想索引文章，可设置为post</span><br><span class="hljs-symbol">  field:</span> post<br></code></pre></td></tr></table></figure><p>PS：顺便提了下如何增加<code>打赏</code>功能，我没开这个功能，因为我觉得没啥意义，不可能会有打赏的，hhh。</p><p>这样<code>搜索功能</code>就神奇的加入了~</p><h3 id="更改访问路径"><a href="#更改访问路径" class="headerlink" title="更改访问路径"></a>更改访问路径</h3><p>现在博客访问都是<code>yourname.github.io</code>，太low了点，我要换成自己的域名（前提是你要自己买域名）。</p><p>本人在<code>腾讯云</code>上买了域名并备案，之前的域名是指向自己的腾讯云IP的，我之前是用的wordpress博客，后来才转github page。</p><p>进入域名解析，并配置：</p><div align=center>![zhangchaozc](/images/zhangchaozc.PNG)</div><p>这样就配置好了，在<code>搭建hexo博客(2)</code>中我贴了博客的目录图，可以看到source文件夹下有一个文件<code>CNAME</code>，没错这个文件里面写自己的域名：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">zhangchaozc.<span class="hljs-literal">cn</span><br></code></pre></td></tr></table></figure><p>也可以写：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">www.zhangchaozc.<span class="hljs-literal">cn</span><br></code></pre></td></tr></table></figure><p>都可以。</p><p>重新三个命令一下<code>hexo clean</code>、<code>hexo generate</code>、<code>hexo deploy</code>，就可以用自己的域名访问了（记得清一下浏览器缓存）。</p><h3 id="增加评论"><a href="#增加评论" class="headerlink" title="增加评论"></a>增加评论</h3><p>本人用的是<code>畅言</code>评论插件，当然还有很多评论插件例如多说等。</p><p>前提：你的域名<code>必须备案成功</code>，注册畅言，输入自己的域名，会有一段时间的审核，主要看你的域名是否备案了，审核通过后登陆畅言后台管理：</p><h5 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h5><div align=center>![changyan](/images/changyan.PNG)</div><p>把这段代码放在你的文章最后就行了，SourceID必须要唯一确定一篇文章，这里我的SourceID就是文章名（可以支持中文）。</p><h5 id="方法2（推荐）"><a href="#方法2（推荐）" class="headerlink" title="方法2（推荐）"></a>方法2（推荐）</h5><div align=center>![changyan2](/images/changyan2.PNG)</div><p><code>主题配置文件</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># changyan</span><br><span class="hljs-attr">changyan:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">your_appid</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">your_appkey</span><br></code></pre></td></tr></table></figure><p>这样不用加任何代码，在每一篇博客后面都会出现评论框。<br>但是如果你不想在文章后有评论框，例如<code>分类</code>、<code>标签</code>页面，可以在文章头加上：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>这样就不会出现评论框了。</p><h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p>默认的字体太小了，看着不舒服。打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，修改：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$font</span>-size-base            =16px</span><br></code></pre></td></tr></table></figure><p>这样好一点。</p><p>大家可以自己动手玩自己的博客了哦~</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建hexo博客(2)</title>
    <link href="/2017/08/17/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2-2/"/>
    <url>/2017/08/17/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2-2/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如果看过<code>搭建hexo博客(1)</code>并且成功的，可以往后看，我会教大家一步步把博客变成我现在的样子；<br>如果没有成功，请评论或私聊我。</p><h3 id="我的目录结构"><a href="#我的目录结构" class="headerlink" title="我的目录结构"></a>我的目录结构</h3><div align=center>![catalog](/images/catalog.PNG)</div><span id="more"></span><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>写博客用的是<code>MarkDown</code>的语法，如果没有接触过这个的，我推荐看<a href="https://www.zybuluo.com/mdeditor">这篇文章</a>，因为我也是看的这个学习的。</p><p>看了目录结构图就知道，我用的是<code>WebStorm</code>，我写Java也用这个系列的软件，非常方便，在WebStorm里面装个写MarkDown的插件就可以了。</p><p>刚<code>hexo server</code>运行起来的网站很丑，且自带一篇<code>Hello World</code>的文章，我换了很多主题，最后我才选用了<code>next</code>主题，如果也想用这个主题的，请看<a href="http://theme-next.iissnan.com/getting-started.html">官方介绍文档</a>。</p><h3 id="做准备"><a href="#做准备" class="headerlink" title="做准备"></a>做准备</h3><p>看了<code>官方介绍文档</code>，博客可以弄成跟我差不多的了，我用的：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">scheme:</span> Mist<br></code></pre></td></tr></table></figure><p>还有另外两个<code>scheme</code>也不错，文档里面已经介绍了怎么<code>弄分类</code>，<code>弄标签</code>。但是我还是再重复造轮子写一遍。</p><h3 id="新建页面（菜单栏）"><a href="#新建页面（菜单栏）" class="headerlink" title="新建页面（菜单栏）"></a>新建页面（菜单栏）</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> <span class="hljs-string">&quot;categories&quot;</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> <span class="hljs-string">&quot;archives&quot;</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> <span class="hljs-string">&quot;tags&quot;</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> <span class="hljs-string">&quot;about&quot;</span><br></code></pre></td></tr></table></figure><p><code>images文件夹</code>是自己新建的，用来放用到的图片，<code>搜索</code>功能稍微复杂点，下篇文章讲。<br>分别打开文件夹，里面都有一个<code>index.md</code>文件：</p><h5 id="about"><a href="#about" class="headerlink" title="about"></a>about</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2017-07-23 17:29:56</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment">## 个人简介</span><br><span class="hljs-string">xxxxxx</span><br><br><span class="hljs-comment">## 博客搭建</span><br><span class="hljs-string">托管：github</span><br><span class="hljs-string">框架：hexo</span><br><span class="hljs-string">主题：next</span><br><br><span class="hljs-comment">## 联系方式</span><br><span class="hljs-string">xxxxxx</span><br></code></pre></td></tr></table></figure><h5 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2017-07-23 17:26:54</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h5 id="archives"><a href="#archives" class="headerlink" title="archives"></a>archives</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">archives</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2017-07-23 17:29:20</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;archives&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h5 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2017-07-23 17:18:31</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;tags&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>除了about以外，其它的加个<code>type: &quot;xxx&quot;</code>就可以了。<br><code>主题配置文件</code>中找到<code>menu</code>：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">  home:</span> /<br><span class="hljs-symbol">  categories:</span> <span class="hljs-keyword">/categories/</span><br><span class="hljs-symbol">  archives:</span> <span class="hljs-keyword">/archives/</span><br><span class="hljs-symbol">  tags:</span> <span class="hljs-keyword">/tags/</span><br><span class="hljs-symbol">  about:</span> <span class="hljs-keyword">/about/</span><br></code></pre></td></tr></table></figure><p>这样博客栏上<code>分类</code>、<code>归档</code>、<code>标签</code>、<code>关于</code>就弄好了。</p><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p>例如我想写一篇文章<code>JVM</code>，并给它贴上分类，便签，咋办？<br>进入博客根目录：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;JVM&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到source&#x2F;_posts目录下已经有了md文件，文件头：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">JVM</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2017-07-26 10:02:58</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">Java</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Think</span> <span class="hljs-string">in</span> <span class="hljs-string">Java</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>这样，这篇文章就会自动分类在<code>Java</code>类中，标签为<code>Think in Java</code>，如果没有这个标签或者分类会自动生成。<br>如果文章太长想<code>阅读全文</code>，分割点写上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><p>即可。</p><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>看了MarkDown的语法后，自己写一篇文章。写完后想发布，三条命令即可：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean<br>hexo <span class="hljs-keyword">generate</span><br>hexo deploy<br></code></pre></td></tr></table></figure><p>即：清理旧的，生成新的，发布到<code>github page</code>上。</p><p>发布前想预览下，可以用<code>hexo server</code>在本地预览。</p><h3 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//常用命令</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-meta">#新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-meta">#新建页面</span><br>hexo generate <span class="hljs-meta">#生成静态页面至public目录</span><br>hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br>hexo deploy <span class="hljs-meta">#将.deploy目录部署到GitHub</span><br>hexo help  <span class="hljs-meta">#查看帮助</span><br>hexo version  <span class="hljs-meta">#查看Hexo的版本</span><br></code></pre></td></tr></table></figure><p>好了，基本可以写文章了。如果有困难请评论或联系我。</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射</title>
    <link href="/2017/07/30/java/%E5%8F%8D%E5%B0%84/"/>
    <url>/2017/07/30/java/%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>反射作为Java的一大特性，在Java的许多框架中都是核心。Spring通过配置文件生产实例，Mybatis对象映射ORM等。还有因为反射出来的框架中自动给类属性赋值（set和get方法），总之，反射是一个重要的特性。</p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>在<code>类加载</code>这篇文章中已经讲到，在java文件编译时，会把类信息都存放在同名的.class文件中，在程序运行时这些文件的信息会被加载到JVM中。<br>那么这些信息是有用的，比如反射。可以利用信息产生类对象、获取并执行类方法等。下面通过代码来说明。</p><span id="more"></span><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h5 id="Person类"><a href="#Person类" class="headerlink" title="Person类"></a>Person类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflect;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by 张超 on 2017/7/31.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayName</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;My name is:&quot;</span>+name);<br>    &#125;<br>    <span class="hljs-comment">//此处略去get和set方法，以及toString()</span><br>    <span class="hljs-comment">//编译器可以自动生成</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="测试new"><a href="#测试new" class="headerlink" title="测试new"></a>测试new</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-comment">//测试forName</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.forName必须指定类的绝对路径（包名.类名）</span><br>        <span class="hljs-comment">//2.必须用try catch语句抓异常或者抛出异常</span><br>        <span class="hljs-comment">//3.待生成的类必须要有默认的构造函数，Spring中若类没有默认的构造函数，</span><br>        <span class="hljs-comment">//是无法注入实例的，底层也是这个函数生成的对象</span><br>        Person person=(Person) Class.forName(<span class="hljs-string">&quot;reflect.Person&quot;</span>).newInstance();<br>        person.setName(<span class="hljs-string">&quot;zc&quot;</span>);<br>        person.sayName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">My <span class="hljs-keyword">name</span> <span class="hljs-keyword">is</span>:zc<br></code></pre></td></tr></table></figure><h5 id="测试方法-amp-属性"><a href="#测试方法-amp-属性" class="headerlink" title="测试方法&amp;属性"></a>测试方法&amp;属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;reflect.Person&quot;</span>).newInstance();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) o;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p.getClass();<br>        <span class="hljs-comment">//getMethods()包含Object类中的方法</span><br>        <span class="hljs-comment">//getDeclaredMethods()不包含</span><br>        Method[] methods = c.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method m : methods) &#123;<br>            System.out.println(m.getName());<br>        &#125;<br>        <span class="hljs-comment">//getFields()返回空</span><br>        <span class="hljs-comment">//getDeclaredFields()返回所有属性名</span><br>        Field[] fields = c.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field f : fields) &#123;<br>            System.out.println(f.getName());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">to</span>String<br>getName<br><span class="hljs-built_in">set</span>Name<br>getPhone<br><span class="hljs-built_in">set</span>Phone<br>sayName<br>name<br>phone<br></code></pre></td></tr></table></figure><h5 id="测试方法调用"><a href="#测试方法调用" class="headerlink" title="测试方法调用"></a>测试方法调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;reflect.Person&quot;</span>).newInstance();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) o;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p.getClass();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zc&quot;</span>;<br>        p.sayName();<br>        <span class="hljs-comment">//通过set方法给对象成员属性赋值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fieidName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;name&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;set&quot;</span> + fieidName.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toUpperCase() + fieidName.substring(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//注意String.class 不加会异常</span><br>        Method method=c.getMethod(m,String.class);<br>        method.invoke(p,name);<br>        p.sayName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">My <span class="hljs-type">name</span> <span class="hljs-keyword">is</span>:<span class="hljs-keyword">null</span><br>My <span class="hljs-type">name</span> <span class="hljs-keyword">is</span>:zc<br></code></pre></td></tr></table></figure><p>如果函数有返回值可以用</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Object</span> <span class="hljs-keyword">value</span> = <span class="hljs-keyword">method</span>.invoke(p,<span class="hljs-type">name</span>);<br></code></pre></td></tr></table></figure><p>来接收。</p><p>还有更多的方法可以查看API文档，我就不一一测试了。<br>总结：有了类信息后，可以动态的对类进行操作，很灵活~</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Think in Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建hexo博客(1)</title>
    <link href="/2017/07/28/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2-1/"/>
    <url>/2017/07/28/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2-1/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我之前的博客是用的wordpress，但是后来摒弃了。因为wordpress<code>很难移植</code>，我之前的博客死掉了，我以为是数据库的问题，我把sql文件都导出后，想重新搭建起来。但是发现很难从sql文件中还原出来，所以我就摒弃了wordpress，改用hexo博客。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol><li>玩过github，至少上传过一个自己的项目&#x2F;工程。</li><li>有一定的node.js基础，至少安装过node环境，熟悉npm命令。</li></ol><p>如果没有基础的请看<code>git入门</code>和<code>node入门</code>两篇文章。</p><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>因为npm默认访问国外的仓库，要想正常安装hexo，要么配置代理，要么换仓库。</p><ul><li><p>配置代理</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set proxy http:<span class="hljs-comment">//127.0.0.1:1080</span><br></code></pre></td></tr></table></figure></li><li><p>更换仓库（<code>推荐</code>）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure></li></ul><p>此后会发现<code>C:\Users\xxx</code>（本人Win10）多了<code>.npmrc</code>文件，这就是你的npm配置文件。</p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g hexo<br></code></pre></td></tr></table></figure><p>-g是全局安装，安装成功后可以使用<code>hexo</code>指令。</p><span id="more"></span><h4 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h4><p>进入你想放博客的目录：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>生成博客：</p><div align=center>![blogroot](/images/blogroot.PNG)</div><p>安装依赖包：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br>npm <span class="hljs-keyword">install</span> hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>生成静态网页：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><h4 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>这时在浏览器中输入localhost:4000&#x2F;就可以看到本地的博客了。</p><h3 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h3><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>仓库名一定是：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">zha<span class="hljs-symbol">ng0</span>cha<span class="hljs-meta">o0</span>.github.io  <span class="hljs-comment">//zhang0chao0换成yourname</span><br></code></pre></td></tr></table></figure><h4 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h4><p>在你的hexo根目录下有一个_config_yml文件，就是站点的配置文件，在最后加上：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:zhang0chao0/zhang0chao0.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>zhang0chao0换成yourname即可。</p><h4 id="上传博客"><a href="#上传博客" class="headerlink" title="上传博客"></a>上传博客</h4><p>在hexo根目录下，用指令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></figure><p>即可，然后在浏览器输入：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">yourname.github.<span class="hljs-built_in">io</span><br></code></pre></td></tr></table></figure><p>就能看到你自己的的博客了~</p><p>搭建博客已完成，后续会写怎么切换主题以及写文章。（遇到问题可以评论或者联系我）</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
